import { __decorate } from "tslib";
import { Component, EventEmitter, Input, Output, ChangeDetectionStrategy, ContentChildren, inject, ContentChild, HostListener, HostBinding, } from '@angular/core';
import { UntilDestroy, untilDestroyed } from '@ngneat/until-destroy';
import { CmdkService } from '../../cmdk.service';
import { EmptyDirective } from '../../directives/empty/empty.directive';
import { ItemDirective } from '../../directives/item/item.directive';
import { GroupComponent } from '../group/group.component';
import { SeparatorComponent } from '../separator/separator.component';
import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';
import { LoaderDirective } from '../../directives/loader/loader.directive';
import { ListComponent } from '../list/list.component';
import { race } from 'rxjs';
import * as i0 from "@angular/core";
let commandId = 0;
const GROUP_SELECTOR = 'cmdk-group';
const GROUP_HEADING_SELECTOR = '.cmdk-group-label';
export let CommandComponent = class CommandComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
        this.filter = (value, search) => value.toLowerCase().includes(search.toLowerCase());
        this.loop = false;
        this.search = '';
        this.panelId = `cmdk-command-${commandId++}`;
        this.cmdkService = inject(CmdkService);
    }
    get attrAriaLabel() {
        return this.ariaLabel;
    }
    get id() {
        return this.panelId;
    }
    ngOnChanges(changes) {
        if (changes['value'] && !changes['value'].firstChange) {
            this.setValue(this.value);
        }
        else if (changes['loading'] &&
            !changes['loading'].firstChange &&
            this.loader) {
            this.loader.cmdkLoader = this.loading;
        }
    }
    ngAfterViewInit() {
        race(this.cmdkService.itemValueChanged$, this.items.changes)
            .pipe(untilDestroyed(this))
            .subscribe(() => {
            setTimeout(() => {
                if (this.keyManager) {
                    this.keyManager.destroy();
                }
                // create key and focus managers
                this.initKeyManager();
                if (this.filter) {
                    this.handleSearch(this.search);
                }
            });
        });
        // show/hide loader
        if (this.loader) {
            this.loader.cmdkLoader = this.loading;
        }
        // create key and focus managers
        this.initKeyManager();
        if (this.filter) {
            this.cmdkService.search$
                .pipe(untilDestroyed(this))
                .subscribe((s) => this.handleSearch(s));
        }
        // if value is given, make that item active, else make first item active
        if (this.value) {
            this.setValue(this.value);
        }
        else {
            this.makeFirstItemActive();
        }
        // emit value on item clicks
        this.cmdkService.itemClicked$
            .pipe(untilDestroyed(this))
            .subscribe((value) => {
            const emit = true;
            this.setValue(value, emit);
        });
    }
    initKeyManager() {
        this.keyManager = new ActiveDescendantKeyManager(this.items)
            .withWrap(this.loop)
            .withPageUpDown()
            .skipPredicate((item) => item.disabled || !item.filtered);
        // set active group on active item change
        this.keyManager.change.pipe(untilDestroyed(this)).subscribe(() => {
            const activeItem = this.keyManager.activeItem;
            if (activeItem) {
                const emit = true;
                this.setValue(activeItem.value, emit);
                this.setActiveGroupForActiveItem(activeItem.itemId);
            }
        });
    }
    get filteredItems() {
        return this.items?.filter((item) => item.filtered);
    }
    get filteredGroups() {
        return this.groups?.filter((group) => group.filtered);
    }
    get filteredLists() {
        return this.lists?.filter((group) => group.filtered);
    }
    handleSearch(search) {
        this.search = search;
        if (this.items?.length) {
            // filter items
            this.items?.forEach((item) => {
                item.filtered = this.filter ? this.filter(item.value, search) : true;
            });
            // make first item active and in-turn it will also make first group active, if available
            this.makeFirstItemActive();
        }
        // show/hide empty directive
        if (this.empty) {
            this.empty.cmdkEmpty = this.filteredItems?.length === 0;
        }
        // show/hide group
        this.groups?.forEach((group) => {
            group.showGroup = group.filteredItems?.length > 0;
            group._cdr.markForCheck();
        });
        // hide separator if search and filter both are present, else show
        this.separators?.forEach((seperator) => {
            seperator.showSeparator = !(this.filter && search);
            seperator.cdr.markForCheck();
        });
    }
    onKeyUp(ev) {
        if (ev.key === 'Enter' &&
            this.keyManager.activeItem &&
            this.filteredItems.length > 0) {
            this.valueChanged.emit(this.keyManager.activeItem.value);
            this.keyManager.activeItem.selected.emit();
        }
        else {
            this.keyManager.onKeydown(ev);
        }
    }
    ngOnDestroy() {
        this.keyManager.destroy();
    }
    makeFirstItemActive() {
        setTimeout(() => {
            const firstItem = this.filteredItems?.[0];
            if (firstItem) {
                this.keyManager.setFirstItemActive();
            }
            else {
                this.valueChanged.emit(undefined);
            }
        });
    }
    setActiveGroupForActiveItem(nextActiveItemId) {
        this.filteredGroups?.forEach((group) => {
            group.active = group.filteredItems.some((item) => item.itemId === nextActiveItemId);
        });
        this.filteredLists?.forEach((list) => {
            list.active = list.filteredItems.some((item) => item.itemId === nextActiveItemId);
        });
    }
    setValue(value, emit = false) {
        if (value !== undefined) {
            const valueItem = this.filteredItems?.find((item) => item.value === value);
            if (valueItem) {
                if (this.keyManager.activeItem !== valueItem) {
                    setTimeout(() => {
                        this.keyManager.setActiveItem(valueItem);
                    });
                }
                setTimeout(() => {
                    this.scrollActiveIntoView();
                });
                if (emit) {
                    this.valueChanged.emit(value);
                }
            }
        }
    }
    scrollActiveIntoView() {
        const item = this.keyManager.activeItem;
        const nativeElement = item?._elementRef?.nativeElement;
        if (nativeElement) {
            if (nativeElement.parentElement?.firstChild === nativeElement) {
                // First item in Group, ensure heading is in view
                nativeElement
                    .closest(GROUP_SELECTOR)
                    ?.querySelector(GROUP_HEADING_SELECTOR)
                    ?.scrollIntoView({ block: 'nearest' });
            }
            // Ensure the item is always in view
            nativeElement.scrollIntoView({ block: 'nearest' });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CommandComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: CommandComponent, isStandalone: true, selector: "cmdk-command", inputs: { value: "value", ariaLabel: "ariaLabel", loading: "loading", filter: "filter", loop: "loop" }, outputs: { valueChanged: "valueChanged" }, host: { listeners: { "keydown": "onKeyUp($event)" }, properties: { "attr.aria-label": "this.attrAriaLabel", "id": "this.id" }, classAttribute: "cmdk-command" }, providers: [CmdkService], queries: [{ propertyName: "empty", first: true, predicate: EmptyDirective, descendants: true }, { propertyName: "loader", first: true, predicate: LoaderDirective, descendants: true }, { propertyName: "items", predicate: ItemDirective, descendants: true }, { propertyName: "groups", predicate: GroupComponent, descendants: true }, { propertyName: "lists", predicate: ListComponent, descendants: true }, { propertyName: "separators", predicate: SeparatorComponent, descendants: true }], exportAs: ["cmdkCommand"], usesOnChanges: true, ngImport: i0, template: "<ng-content></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
};
CommandComponent = __decorate([
    UntilDestroy()
], CommandComponent);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: CommandComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cmdk-command', providers: [CmdkService], changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'cmdkCommand', host: {
                        class: 'cmdk-command',
                    }, standalone: true, template: "<ng-content></ng-content>\n" }]
        }], propDecorators: { valueChanged: [{
                type: Output
            }], value: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], loading: [{
                type: Input
            }], filter: [{
                type: Input
            }], loop: [{
                type: Input
            }], items: [{
                type: ContentChildren,
                args: [ItemDirective, { descendants: true }]
            }], groups: [{
                type: ContentChildren,
                args: [GroupComponent, { descendants: true }]
            }], lists: [{
                type: ContentChildren,
                args: [ListComponent, { descendants: true }]
            }], separators: [{
                type: ContentChildren,
                args: [SeparatorComponent, { descendants: true }]
            }], empty: [{
                type: ContentChild,
                args: [EmptyDirective]
            }], loader: [{
                type: ContentChild,
                args: [LoaderDirective]
            }], attrAriaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], id: [{
                type: HostBinding,
                args: ['id']
            }], onKeyUp: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,