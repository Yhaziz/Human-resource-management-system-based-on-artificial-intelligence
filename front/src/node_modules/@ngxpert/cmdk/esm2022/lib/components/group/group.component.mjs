import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, HostBinding, inject, Input, } from '@angular/core';
import { DynamicViewModule } from '@ngneat/overview';
import { ItemDirective } from '../../directives/item/item.directive';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@ngneat/overview";
let cmdkGroupId = 0;
export class GroupComponent {
    constructor() {
        this.showGroup = true;
        this._active = false;
        this.groupId = `cmdk-group-${cmdkGroupId++}`;
        this._cdr = inject(ChangeDetectorRef);
    }
    get filteredItems() {
        return this.items?.filter((item) => item.filtered);
    }
    get active() {
        return this._active;
    }
    set active(value) {
        this._active = value;
        this._cdr.markForCheck();
    }
    get filtered() {
        return this.filteredItems.length > 0;
    }
    get id() {
        return this.groupId;
    }
    get activeClass() {
        return this.active;
    }
    get hidden() {
        return !this.showGroup;
    }
    get dataValue() {
        return this.label?.toString().toLowerCase();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: GroupComponent, isStandalone: true, selector: "cmdk-group", inputs: { label: "label", ariaLabel: "ariaLabel" }, host: { properties: { "id": "this.id", "class.cmdk-group-active": "this.activeClass", "attr.cmdk-hidden": "this.hidden", "attr.data-value": "this.dataValue" }, classAttribute: "cmdk-group" }, queries: [{ propertyName: "items", predicate: ItemDirective, descendants: true }], ngImport: i0, template: "<div role=\"presentation\" *ngIf=\"label\" class=\"cmdk-group-label\">\n  <ng-container *dynamicView=\"label\"></ng-container>\n</div>\n<div class=\"cmdk-group-content\" role=\"group\" [attr.aria-label]=\"ariaLabel\">\n  <ng-content></ng-content>\n</div>\n", styles: [":host[cmdk-hidden=true]{display:none}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: DynamicViewModule }, { kind: "directive", type: i1.DynamicViewDirective, selector: "[dynamicView]", inputs: ["dynamicView", "dynamicViewInjector", "dynamicViewContext", "dynamicViewInputs"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'cmdk-group', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'cmdk-group',
                    }, standalone: true, imports: [NgIf, DynamicViewModule], template: "<div role=\"presentation\" *ngIf=\"label\" class=\"cmdk-group-label\">\n  <ng-container *dynamicView=\"label\"></ng-container>\n</div>\n<div class=\"cmdk-group-content\" role=\"group\" [attr.aria-label]=\"ariaLabel\">\n  <ng-content></ng-content>\n</div>\n", styles: [":host[cmdk-hidden=true]{display:none}\n"] }]
        }], propDecorators: { label: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], items: [{
                type: ContentChildren,
                args: [ItemDirective, { descendants: true }]
            }], id: [{
                type: HostBinding,
                args: ['id']
            }], activeClass: [{
                type: HostBinding,
                args: ['class.cmdk-group-active']
            }], hidden: [{
                type: HostBinding,
                args: ['attr.cmdk-hidden']
            }], dataValue: [{
                type: HostBinding,
                args: ['attr.data-value']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4cGVydC9jbWRrL3NyYy9saWIvY29tcG9uZW50cy9ncm91cC9ncm91cC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3hwZXJ0L2NtZGsvc3JjL2xpYi9jb21wb25lbnRzL2dyb3VwL2dyb3VwLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxlQUFlLEVBQ2YsV0FBVyxFQUNYLE1BQU0sRUFDTixLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFXLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXJFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBRXZDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQztBQWNwQixNQUFNLE9BQU8sY0FBYztJQVozQjtRQW1CRSxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ1QsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUNmLFlBQU8sR0FBRyxjQUFjLFdBQVcsRUFBRSxFQUFFLENBQUM7UUFDakQsU0FBSSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0tBcUNsQztJQW5DQyxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBSSxNQUFNLENBQUMsS0FBYztRQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFDSSxFQUFFO1FBQ0osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUNJLFdBQVc7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVELElBQ0ksTUFBTTtRQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUNJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDOUMsQ0FBQzsrR0E5Q1UsY0FBYzttR0FBZCxjQUFjLGdWQUlSLGFBQWEsZ0RDakNoQyxrUUFNQSxpR0RxQmMsSUFBSSw0RkFBRSxpQkFBaUI7OzRGQUV4QixjQUFjO2tCQVoxQixTQUFTOytCQUNJLFlBQVksbUJBRUwsdUJBQXVCLENBQUMsTUFBTSxRQUV6Qzt3QkFDRixLQUFLLEVBQUUsWUFBWTtxQkFDdEIsY0FFVyxJQUFJLFdBQ1AsQ0FBQyxJQUFJLEVBQUUsaUJBQWlCLENBQUM7OEJBRzNCLEtBQUs7c0JBQWIsS0FBSztnQkFDRyxTQUFTO3NCQUFqQixLQUFLO2dCQUdOLEtBQUs7c0JBREosZUFBZTt1QkFBQyxhQUFhLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO2dCQXlCakQsRUFBRTtzQkFETCxXQUFXO3VCQUFDLElBQUk7Z0JBTWIsV0FBVztzQkFEZCxXQUFXO3VCQUFDLHlCQUF5QjtnQkFNbEMsTUFBTTtzQkFEVCxXQUFXO3VCQUFDLGtCQUFrQjtnQkFNM0IsU0FBUztzQkFEWixXQUFXO3VCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEhvc3RCaW5kaW5nLFxuICBpbmplY3QsXG4gIElucHV0LFxuICBRdWVyeUxpc3QsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGVudCwgRHluYW1pY1ZpZXdNb2R1bGUgfSBmcm9tICdAbmduZWF0L292ZXJ2aWV3JztcbmltcG9ydCB7IEl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL2l0ZW0vaXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQ21ka0dyb3VwUHJvcHMgfSBmcm9tICcuLi8uLi90eXBlcyc7XG5pbXBvcnQgeyBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxubGV0IGNtZGtHcm91cElkID0gMDtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdjbWRrLWdyb3VwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZ3JvdXAuY29tcG9uZW50Lmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taG9zdC1tZXRhZGF0YS1wcm9wZXJ0eVxuICAgIGhvc3Q6IHtcbiAgICAgICAgY2xhc3M6ICdjbWRrLWdyb3VwJyxcbiAgICB9LFxuICAgIHN0eWxlVXJsczogWycuL2dyb3VwLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBpbXBvcnRzOiBbTmdJZiwgRHluYW1pY1ZpZXdNb2R1bGVdLFxufSlcbmV4cG9ydCBjbGFzcyBHcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIENtZGtHcm91cFByb3BzIHtcbiAgQElucHV0KCkgbGFiZWw/OiBDb250ZW50O1xuICBASW5wdXQoKSBhcmlhTGFiZWw/OiBzdHJpbmc7XG5cbiAgQENvbnRlbnRDaGlsZHJlbihJdGVtRGlyZWN0aXZlLCB7IGRlc2NlbmRhbnRzOiB0cnVlIH0pXG4gIGl0ZW1zITogUXVlcnlMaXN0PEl0ZW1EaXJlY3RpdmU+O1xuXG4gIHNob3dHcm91cCA9IHRydWU7XG4gIHByaXZhdGUgX2FjdGl2ZSA9IGZhbHNlO1xuICByZWFkb25seSBncm91cElkID0gYGNtZGstZ3JvdXAtJHtjbWRrR3JvdXBJZCsrfWA7XG4gIF9jZHIgPSBpbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuXG4gIGdldCBmaWx0ZXJlZEl0ZW1zKCkge1xuICAgIHJldHVybiB0aGlzLml0ZW1zPy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uZmlsdGVyZWQpO1xuICB9XG5cbiAgZ2V0IGFjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICB9XG4gIHNldCBhY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9hY3RpdmUgPSB2YWx1ZTtcbiAgICB0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBnZXQgZmlsdGVyZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyZWRJdGVtcy5sZW5ndGggPiAwO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdpZCcpXG4gIGdldCBpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5ncm91cElkO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jbWRrLWdyb3VwLWFjdGl2ZScpXG4gIGdldCBhY3RpdmVDbGFzcygpIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmU7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuY21kay1oaWRkZW4nKVxuICBnZXQgaGlkZGVuKCkge1xuICAgIHJldHVybiAhdGhpcy5zaG93R3JvdXA7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS12YWx1ZScpXG4gIGdldCBkYXRhVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubGFiZWw/LnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcbiAgfVxufVxuIiwiPGRpdiByb2xlPVwicHJlc2VudGF0aW9uXCIgKm5nSWY9XCJsYWJlbFwiIGNsYXNzPVwiY21kay1ncm91cC1sYWJlbFwiPlxuICA8bmctY29udGFpbmVyICpkeW5hbWljVmlldz1cImxhYmVsXCI+PC9uZy1jb250YWluZXI+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJjbWRrLWdyb3VwLWNvbnRlbnRcIiByb2xlPVwiZ3JvdXBcIiBbYXR0ci5hcmlhLWxhYmVsXT1cImFyaWFMYWJlbFwiPlxuICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbiJdfQ==