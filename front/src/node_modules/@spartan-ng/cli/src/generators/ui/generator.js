"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nx/devkit");
const enquirer_1 = require("enquirer");
const versions_1 = require("../base/versions");
function hlmUIGenerator(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const tasks = [];
        const availablePrimitives = yield Promise.resolve().then(() => require('./supported-ui-libraries.json'));
        const availablePrimitiveNames = [...Object.keys(availablePrimitives), 'collapsible', 'menubar', 'contextmenu'];
        let response = { primitives: [] };
        if (options.name && availablePrimitiveNames.includes(options.name)) {
            response.primitives.push(options.name);
        }
        else {
            response = yield (0, enquirer_1.prompt)({
                type: 'multiselect',
                required: true,
                name: 'primitives',
                message: 'Choose which primitives you want to copy',
                choices: ['all', ...availablePrimitiveNames],
            });
        }
        tasks.push(...(yield createPrimitiveLibraries(response, availablePrimitiveNames, availablePrimitives, tree, options)));
        return (0, devkit_1.runTasksInSerial)(...tasks);
    });
}
exports.default = hlmUIGenerator;
function createPrimitiveLibraries(response, availablePrimitiveNames, availablePrimitives, tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const allPrimitivesSelected = response.primitives.includes('all');
        const primitivesToCreate = allPrimitivesSelected ? availablePrimitiveNames : response.primitives;
        const tasks = [];
        if (!response.primitives.includes('all')) {
            yield addIconForDependentPrimitive(primitivesToCreate, [
                'accordion',
                'alert',
                'command',
                'menu',
                'checkbox',
                'pagination',
                'select',
                'sonner',
            ]);
            yield addButtonForDependentPrimitive(primitivesToCreate, ['alertdialog', 'command', 'pagination']);
        }
        yield replaceContextAndMenuBar(primitivesToCreate, allPrimitivesSelected);
        if (primitivesToCreate.includes('collapsible')) {
            tasks.push((0, devkit_1.addDependenciesToPackageJson)(tree, { '@spartan-ng/ui-collapsible-brain': versions_1.SPARTAN_COLLAPSIBLE_BRAIN_VERSION }, {}));
        }
        if (primitivesToCreate.length === 1 && primitivesToCreate[0] === 'collapsible') {
            return tasks;
        }
        for (const primitiveName of primitivesToCreate) {
            if (primitiveName === 'collapsible')
                continue;
            const internalName = availablePrimitives[primitiveName]['internalName'];
            const peerDependencies = availablePrimitives[primitiveName]['peerDependencies'];
            const installTask = yield (yield Promise.resolve(`${
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            `./libs/${internalName}/generator`}`).then(s => require(s))).generator(tree, {
                // get overwritten by each specific generator
                internalName: '',
                publicName: '',
                primitiveName: '',
                peerDependencies,
                skipBrainDependencies: options.skipBrainDependencies,
                directory: options.directory,
                tags: options.tags,
                rootProject: options.rootProject,
                angularCli: options.angularCli,
            });
            tasks.push(installTask);
        }
        return tasks;
    });
}
const addIconForDependentPrimitive = (primitivesToCreate, primitivesDependingOnIcon) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (primitivesToCreate.includes('icon')) {
        return;
    }
    if (primitivesDependingOnIcon.some((primitive) => primitivesToCreate.includes(primitive))) {
        const installIcon = (yield (0, enquirer_1.prompt)({
            type: 'confirm',
            name: 'installIcon',
            initial: true,
            message: 'Some of the primitives you are trying to install depend on the icon primitive. Do you want to add it to your project?',
        }))['installIcon'];
        if (installIcon) {
            primitivesToCreate.push('icon');
        }
    }
});
const addButtonForDependentPrimitive = (primitivesToCreate, primitivesDependingOnBtn) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    if (primitivesToCreate.includes('button')) {
        return;
    }
    if (primitivesDependingOnBtn.some((primitive) => primitivesToCreate.includes(primitive))) {
        const installBtn = (yield (0, enquirer_1.prompt)({
            type: 'confirm',
            name: 'installBtn',
            initial: true,
            message: 'Some of the primitives you are trying to install depend on the button primitive. Do you want to add it to your project?',
        }))['installBtn'];
        if (installBtn) {
            primitivesToCreate.push('button');
        }
    }
});
const replaceContextAndMenuBar = (primtivesToCreate_1, ...args_1) => tslib_1.__awaiter(void 0, [primtivesToCreate_1, ...args_1], void 0, function* (primtivesToCreate, silent = false) {
    const contextIndex = primtivesToCreate.indexOf('contextmenu');
    if (contextIndex >= 0) {
        if (!silent) {
            yield (0, enquirer_1.prompt)({
                type: 'confirm',
                name: 'contextMenu',
                message: 'The context menu is implemented as part of the menu-helm primitive. Adding menu primitive.',
            });
        }
        primtivesToCreate.splice(contextIndex, 1);
    }
    const menubarIndex = primtivesToCreate.indexOf('menubar');
    if (menubarIndex >= 0) {
        if (!silent) {
            yield (0, enquirer_1.prompt)({
                type: 'confirm',
                name: 'menubar',
                message: 'The menubar is implemented as part of the menu-helm primitive. Adding menu primitive.',
            });
        }
        primtivesToCreate.splice(menubarIndex, 1);
    }
});
//# sourceMappingURL=generator.js.map