import { ChangeDetectionStrategy, Component, ViewEncapsulation, computed, inject, signal } from '@angular/core';
import { BrnAccordionItemDirective } from './brn-accordion-item.directive';
import * as i0 from "@angular/core";
export class BrnAccordionContentComponent {
    constructor() {
        this._item = inject(BrnAccordionItemDirective);
        this.state = this._item.state;
        this.id = 'brn-accordion-content-' + this._item.id;
        this.ariaLabeledBy = 'brn-accordion-trigger-' + this._item.id;
        this._addInert = computed(() => (this.state() === 'closed' ? true : undefined));
        this._contentClass = signal('');
        if (!this._item) {
            throw Error('Accordion Content can only be used inside an AccordionItem. Add brnAccordionItem to parent.');
        }
    }
    setClassToCustomElement(classes) {
        this._contentClass.set(classes);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnAccordionContentComponent, isStandalone: true, selector: "brn-accordion-content, hlm-accordion-content", host: { attributes: { "role": "region" }, properties: { "attr.data-state": "state()", "attr.aria-labelledby": "ariaLabeledBy", "id": "id" } }, ngImport: i0, template: `
		<div [attr.inert]="_addInert()" style="overflow: hidden">
			<p [class]="_contentClass()">
				<ng-content />
			</p>
		</div>
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-accordion-content, hlm-accordion-content',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.aria-labelledby]': 'ariaLabeledBy',
                        role: 'region',
                        '[id]': 'id',
                    },
                    template: `
		<div [attr.inert]="_addInert()" style="overflow: hidden">
			<p [class]="_contentClass()">
				<ng-content />
			</p>
		</div>
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWFjY29yZGlvbi1jb250ZW50LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvYWNjb3JkaW9uL2JyYWluL3NyYy9saWIvYnJuLWFjY29yZGlvbi1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRWhILE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQXFCM0UsTUFBTSxPQUFPLDRCQUE0QjtJQVV4QztRQVRpQixVQUFLLEdBQUcsTUFBTSxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFM0MsVUFBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLE9BQUUsR0FBRyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM5QyxrQkFBYSxHQUFHLHdCQUF3QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBRXRELGNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDM0Usa0JBQWEsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFHN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixNQUFNLEtBQUssQ0FBQyw2RkFBNkYsQ0FBQyxDQUFDO1FBQzVHLENBQUM7SUFDRixDQUFDO0lBRU0sdUJBQXVCLENBQUMsT0FBZTtRQUM3QyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDOzhHQWxCVyw0QkFBNEI7a0dBQTVCLDRCQUE0Qix1UEFWOUI7Ozs7OztFQU1UOzsyRkFJVyw0QkFBNEI7a0JBbkJ4QyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSw4Q0FBOEM7b0JBQ3hELFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUU7d0JBQ0wsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIsd0JBQXdCLEVBQUUsZUFBZTt3QkFDekMsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsTUFBTSxFQUFFLElBQUk7cUJBQ1o7b0JBQ0QsUUFBUSxFQUFFOzs7Ozs7RUFNVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7aUJBQ3JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgVmlld0VuY2Fwc3VsYXRpb24sIGNvbXB1dGVkLCBpbmplY3QsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBDdXN0b21FbGVtZW50Q2xhc3NTZXR0YWJsZSB9IGZyb20gJ0BzcGFydGFuLW5nL3VpLWNvcmUnO1xuaW1wb3J0IHsgQnJuQWNjb3JkaW9uSXRlbURpcmVjdGl2ZSB9IGZyb20gJy4vYnJuLWFjY29yZGlvbi1pdGVtLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuXHRzZWxlY3RvcjogJ2Jybi1hY2NvcmRpb24tY29udGVudCwgaGxtLWFjY29yZGlvbi1jb250ZW50Jyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aG9zdDoge1xuXHRcdCdbYXR0ci5kYXRhLXN0YXRlXSc6ICdzdGF0ZSgpJyxcblx0XHQnW2F0dHIuYXJpYS1sYWJlbGxlZGJ5XSc6ICdhcmlhTGFiZWxlZEJ5Jyxcblx0XHRyb2xlOiAncmVnaW9uJyxcblx0XHQnW2lkXSc6ICdpZCcsXG5cdH0sXG5cdHRlbXBsYXRlOiBgXG5cdFx0PGRpdiBbYXR0ci5pbmVydF09XCJfYWRkSW5lcnQoKVwiIHN0eWxlPVwib3ZlcmZsb3c6IGhpZGRlblwiPlxuXHRcdFx0PHAgW2NsYXNzXT1cIl9jb250ZW50Q2xhc3MoKVwiPlxuXHRcdFx0XHQ8bmctY29udGVudCAvPlxuXHRcdFx0PC9wPlxuXHRcdDwvZGl2PlxuXHRgLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0ZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgQnJuQWNjb3JkaW9uQ29udGVudENvbXBvbmVudCBpbXBsZW1lbnRzIEN1c3RvbUVsZW1lbnRDbGFzc1NldHRhYmxlIHtcblx0cHJpdmF0ZSByZWFkb25seSBfaXRlbSA9IGluamVjdChCcm5BY2NvcmRpb25JdGVtRGlyZWN0aXZlKTtcblxuXHRwdWJsaWMgcmVhZG9ubHkgc3RhdGUgPSB0aGlzLl9pdGVtLnN0YXRlO1xuXHRwdWJsaWMgcmVhZG9ubHkgaWQgPSAnYnJuLWFjY29yZGlvbi1jb250ZW50LScgKyB0aGlzLl9pdGVtLmlkO1xuXHRwdWJsaWMgcmVhZG9ubHkgYXJpYUxhYmVsZWRCeSA9ICdicm4tYWNjb3JkaW9uLXRyaWdnZXItJyArIHRoaXMuX2l0ZW0uaWQ7XG5cblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9hZGRJbmVydCA9IGNvbXB1dGVkKCgpID0+ICh0aGlzLnN0YXRlKCkgPT09ICdjbG9zZWQnID8gdHJ1ZSA6IHVuZGVmaW5lZCkpO1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX2NvbnRlbnRDbGFzcyA9IHNpZ25hbCgnJyk7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0aWYgKCF0aGlzLl9pdGVtKSB7XG5cdFx0XHR0aHJvdyBFcnJvcignQWNjb3JkaW9uIENvbnRlbnQgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYW4gQWNjb3JkaW9uSXRlbS4gQWRkIGJybkFjY29yZGlvbkl0ZW0gdG8gcGFyZW50LicpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBzZXRDbGFzc1RvQ3VzdG9tRWxlbWVudChjbGFzc2VzOiBzdHJpbmcpIHtcblx0XHR0aGlzLl9jb250ZW50Q2xhc3Muc2V0KGNsYXNzZXMpO1xuXHR9XG59XG4iXX0=