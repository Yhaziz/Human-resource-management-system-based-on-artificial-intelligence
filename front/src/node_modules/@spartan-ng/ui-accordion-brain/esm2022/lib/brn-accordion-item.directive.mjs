import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Directive, computed, effect, inject, input, untracked } from '@angular/core';
import { BrnAccordionDirective } from './brn-accordion.directive';
import * as i0 from "@angular/core";
let itemIdGenerator = 0;
export class BrnAccordionItemDirective {
    constructor() {
        this._accordion = inject(BrnAccordionDirective);
        this.isOpened = input(false, { transform: coerceBooleanProperty });
        this.id = itemIdGenerator++;
        this.state = computed(() => (this._accordion.openItemIds().includes(this.id) ? 'open' : 'closed'));
        if (!this._accordion) {
            throw Error('Accordion trigger can only be used inside an Accordion. Add brnAccordion to ancestor.');
        }
        effect(() => {
            const isOpened = this.isOpened();
            untracked(() => {
                if (isOpened) {
                    this._accordion.openItem(this.id);
                }
                else {
                    this._accordion.closeItem(this.id);
                }
            });
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.5", type: BrnAccordionItemDirective, isStandalone: true, selector: "[brnAccordionItem]", inputs: { isOpened: { classPropertyName: "isOpened", publicName: "isOpened", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "attr.data-state": "state()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnAccordionItem]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWFjY29yZGlvbi1pdGVtLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvYWNjb3JkaW9uL2JyYWluL3NyYy9saWIvYnJuLWFjY29yZGlvbi1pdGVtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBRWxFLElBQUksZUFBZSxHQUFHLENBQUMsQ0FBQztBQVN4QixNQUFNLE9BQU8seUJBQXlCO0lBT3JDO1FBTmlCLGVBQVUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUM1QyxhQUFRLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFBRSxDQUFDLENBQUM7UUFFOUQsT0FBRSxHQUFHLGVBQWUsRUFBRSxDQUFDO1FBQ3ZCLFVBQUssR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUc3RyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ3RCLE1BQU0sS0FBSyxDQUFDLHVGQUF1RixDQUFDLENBQUM7UUFDdEcsQ0FBQztRQUNELE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDWCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakMsU0FBUyxDQUFDLEdBQUcsRUFBRTtnQkFDZCxJQUFJLFFBQVEsRUFBRSxDQUFDO29CQUNkLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDbkMsQ0FBQztxQkFBTSxDQUFDO29CQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDcEMsQ0FBQztZQUNGLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDOzhHQXJCVyx5QkFBeUI7a0dBQXpCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFQckMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsSUFBSSxFQUFFO3dCQUNMLG1CQUFtQixFQUFFLFNBQVM7cUJBQzlCO2lCQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgY29tcHV0ZWQsIGVmZmVjdCwgaW5qZWN0LCBpbnB1dCwgdW50cmFja2VkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCcm5BY2NvcmRpb25EaXJlY3RpdmUgfSBmcm9tICcuL2Jybi1hY2NvcmRpb24uZGlyZWN0aXZlJztcblxubGV0IGl0ZW1JZEdlbmVyYXRvciA9IDA7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1ticm5BY2NvcmRpb25JdGVtXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdGhvc3Q6IHtcblx0XHQnW2F0dHIuZGF0YS1zdGF0ZV0nOiAnc3RhdGUoKScsXG5cdH0sXG59KVxuZXhwb3J0IGNsYXNzIEJybkFjY29yZGlvbkl0ZW1EaXJlY3RpdmUge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9hY2NvcmRpb24gPSBpbmplY3QoQnJuQWNjb3JkaW9uRGlyZWN0aXZlKTtcblx0cHVibGljIHJlYWRvbmx5IGlzT3BlbmVkID0gaW5wdXQoZmFsc2UsIHsgdHJhbnNmb3JtOiBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSk7XG5cblx0cHVibGljIHJlYWRvbmx5IGlkID0gaXRlbUlkR2VuZXJhdG9yKys7XG5cdHB1YmxpYyByZWFkb25seSBzdGF0ZSA9IGNvbXB1dGVkKCgpID0+ICh0aGlzLl9hY2NvcmRpb24ub3Blbkl0ZW1JZHMoKS5pbmNsdWRlcyh0aGlzLmlkKSA/ICdvcGVuJyA6ICdjbG9zZWQnKSk7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0aWYgKCF0aGlzLl9hY2NvcmRpb24pIHtcblx0XHRcdHRocm93IEVycm9yKCdBY2NvcmRpb24gdHJpZ2dlciBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBhbiBBY2NvcmRpb24uIEFkZCBicm5BY2NvcmRpb24gdG8gYW5jZXN0b3IuJyk7XG5cdFx0fVxuXHRcdGVmZmVjdCgoKSA9PiB7XG5cdFx0XHRjb25zdCBpc09wZW5lZCA9IHRoaXMuaXNPcGVuZWQoKTtcblx0XHRcdHVudHJhY2tlZCgoKSA9PiB7XG5cdFx0XHRcdGlmIChpc09wZW5lZCkge1xuXHRcdFx0XHRcdHRoaXMuX2FjY29yZGlvbi5vcGVuSXRlbSh0aGlzLmlkKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLl9hY2NvcmRpb24uY2xvc2VJdGVtKHRoaXMuaWQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxufVxuIl19