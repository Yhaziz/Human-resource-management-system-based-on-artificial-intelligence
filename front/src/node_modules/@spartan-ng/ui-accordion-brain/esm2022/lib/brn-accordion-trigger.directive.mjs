import { Directive, ElementRef, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { rxHostPressedListener } from '@spartan-ng/ui-core';
import { fromEvent } from 'rxjs';
import { BrnAccordionItemDirective } from './brn-accordion-item.directive';
import { BrnAccordionDirective } from './brn-accordion.directive';
import * as i0 from "@angular/core";
export class BrnAccordionTriggerDirective {
    constructor() {
        this._accordion = inject(BrnAccordionDirective);
        this._item = inject(BrnAccordionItemDirective);
        this._elementRef = inject(ElementRef);
        this._hostPressedListener = rxHostPressedListener();
        this.state = this._item.state;
        this.id = 'brn-accordion-trigger-' + this._item.id;
        this.ariaControls = 'brn-accordion-content-' + this._item.id;
        if (!this._accordion) {
            throw Error('Accordion trigger can only be used inside an Accordion. Add brnAccordion to ancestor.');
        }
        if (!this._item) {
            throw Error('Accordion trigger can only be used inside an AccordionItem. Add brnAccordionItem to parent.');
        }
        this._hostPressedListener.subscribe(() => {
            this._accordion.toggleItem(this._item.id);
        });
        fromEvent(this._elementRef.nativeElement, 'focus')
            .pipe(takeUntilDestroyed())
            .subscribe(() => {
            this._accordion.setActiveItem(this);
        });
    }
    focus() {
        this._elementRef.nativeElement.focus();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnAccordionTriggerDirective, isStandalone: true, selector: "[brnAccordionTrigger]", host: { attributes: { "role": "heading", "aria-level": "3" }, properties: { "attr.data-state": "state()", "attr.aria-expanded": "state() === \"open\"", "attr.aria-controls": "ariaControls", "id": "id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnAccordionTrigger]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.aria-expanded]': 'state() === "open"',
                        '[attr.aria-controls]': 'ariaControls',
                        role: 'heading',
                        'aria-level': '3',
                        '[id]': 'id',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWFjY29yZGlvbi10cmlnZ2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvYWNjb3JkaW9uL2JyYWluL3NyYy9saWIvYnJuLWFjY29yZGlvbi10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDNUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQzs7QUFjbEUsTUFBTSxPQUFPLDRCQUE0QjtJQVV4QztRQVRpQixlQUFVLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFDM0MsVUFBSyxHQUFHLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBQzFDLGdCQUFXLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pDLHlCQUFvQixHQUFHLHFCQUFxQixFQUFFLENBQUM7UUFFaEQsVUFBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLE9BQUUsR0FBRyx3QkFBd0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUM5QyxpQkFBWSxHQUFHLHdCQUF3QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1FBR3ZFLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7WUFDdEIsTUFBTSxLQUFLLENBQUMsdUZBQXVGLENBQUMsQ0FBQztRQUN0RyxDQUFDO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNqQixNQUFNLEtBQUssQ0FBQyw2RkFBNkYsQ0FBQyxDQUFDO1FBQzVHLENBQUM7UUFDRCxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN4QyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLENBQUMsQ0FBQyxDQUFDO1FBRUgsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQzthQUNoRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQzthQUMxQixTQUFTLENBQUMsR0FBRyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sS0FBSztRQUNYLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hDLENBQUM7OEdBL0JXLDRCQUE0QjtrR0FBNUIsNEJBQTRCOzsyRkFBNUIsNEJBQTRCO2tCQVp4QyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUU7d0JBQ0wsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIsc0JBQXNCLEVBQUUsb0JBQW9CO3dCQUM1QyxzQkFBc0IsRUFBRSxjQUFjO3dCQUN0QyxJQUFJLEVBQUUsU0FBUzt3QkFDZixZQUFZLEVBQUUsR0FBRzt3QkFDakIsTUFBTSxFQUFFLElBQUk7cUJBQ1o7aUJBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgcnhIb3N0UHJlc3NlZExpc3RlbmVyIH0gZnJvbSAnQHNwYXJ0YW4tbmcvdWktY29yZSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEJybkFjY29yZGlvbkl0ZW1EaXJlY3RpdmUgfSBmcm9tICcuL2Jybi1hY2NvcmRpb24taXRlbS5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQnJuQWNjb3JkaW9uRGlyZWN0aXZlIH0gZnJvbSAnLi9icm4tYWNjb3JkaW9uLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1ticm5BY2NvcmRpb25UcmlnZ2VyXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdGhvc3Q6IHtcblx0XHQnW2F0dHIuZGF0YS1zdGF0ZV0nOiAnc3RhdGUoKScsXG5cdFx0J1thdHRyLmFyaWEtZXhwYW5kZWRdJzogJ3N0YXRlKCkgPT09IFwib3BlblwiJyxcblx0XHQnW2F0dHIuYXJpYS1jb250cm9sc10nOiAnYXJpYUNvbnRyb2xzJyxcblx0XHRyb2xlOiAnaGVhZGluZycsXG5cdFx0J2FyaWEtbGV2ZWwnOiAnMycsXG5cdFx0J1tpZF0nOiAnaWQnLFxuXHR9LFxufSlcbmV4cG9ydCBjbGFzcyBCcm5BY2NvcmRpb25UcmlnZ2VyRGlyZWN0aXZlIHtcblx0cHJpdmF0ZSByZWFkb25seSBfYWNjb3JkaW9uID0gaW5qZWN0KEJybkFjY29yZGlvbkRpcmVjdGl2ZSk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2l0ZW0gPSBpbmplY3QoQnJuQWNjb3JkaW9uSXRlbURpcmVjdGl2ZSk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2VsZW1lbnRSZWYgPSBpbmplY3QoRWxlbWVudFJlZik7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2hvc3RQcmVzc2VkTGlzdGVuZXIgPSByeEhvc3RQcmVzc2VkTGlzdGVuZXIoKTtcblxuXHRwdWJsaWMgcmVhZG9ubHkgc3RhdGUgPSB0aGlzLl9pdGVtLnN0YXRlO1xuXHRwdWJsaWMgcmVhZG9ubHkgaWQgPSAnYnJuLWFjY29yZGlvbi10cmlnZ2VyLScgKyB0aGlzLl9pdGVtLmlkO1xuXHRwdWJsaWMgcmVhZG9ubHkgYXJpYUNvbnRyb2xzID0gJ2Jybi1hY2NvcmRpb24tY29udGVudC0nICsgdGhpcy5faXRlbS5pZDtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRpZiAoIXRoaXMuX2FjY29yZGlvbikge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0FjY29yZGlvbiB0cmlnZ2VyIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIGFuIEFjY29yZGlvbi4gQWRkIGJybkFjY29yZGlvbiB0byBhbmNlc3Rvci4nKTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuX2l0ZW0pIHtcblx0XHRcdHRocm93IEVycm9yKCdBY2NvcmRpb24gdHJpZ2dlciBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBhbiBBY2NvcmRpb25JdGVtLiBBZGQgYnJuQWNjb3JkaW9uSXRlbSB0byBwYXJlbnQuJyk7XG5cdFx0fVxuXHRcdHRoaXMuX2hvc3RQcmVzc2VkTGlzdGVuZXIuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdHRoaXMuX2FjY29yZGlvbi50b2dnbGVJdGVtKHRoaXMuX2l0ZW0uaWQpO1xuXHRcdH0pO1xuXG5cdFx0ZnJvbUV2ZW50KHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2ZvY3VzJylcblx0XHRcdC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCgpKVxuXHRcdFx0LnN1YnNjcmliZSgoKSA9PiB7XG5cdFx0XHRcdHRoaXMuX2FjY29yZGlvbi5zZXRBY3RpdmVJdGVtKHRoaXMpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwdWJsaWMgZm9jdXMoKSB7XG5cdFx0dGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmZvY3VzKCk7XG5cdH1cbn1cbiJdfQ==