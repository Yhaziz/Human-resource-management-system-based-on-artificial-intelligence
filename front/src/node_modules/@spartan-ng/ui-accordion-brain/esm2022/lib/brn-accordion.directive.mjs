import { FocusKeyManager, FocusMonitor } from '@angular/cdk/a11y';
import { ContentChildren, Directive, ElementRef, Input, NgZone, computed, inject, signal, } from '@angular/core';
import { BrnAccordionTriggerDirective } from './brn-accordion-trigger.directive';
import * as i0 from "@angular/core";
const HORIZONTAL_KEYS_TO_PREVENT_DEFAULT = [
    'ArrowLeft',
    'ArrowRight',
    'PageDown',
    'PageUp',
    'Home',
    'End',
    ' ',
    'Enter',
];
const VERTICAL_KEYS_TO_PREVENT_DEFAULT = ['ArrowUp', 'ArrowDown', 'PageDown', 'PageUp', 'Home', 'End', ' ', 'Enter'];
export class BrnAccordionDirective {
    constructor() {
        this._el = inject(ElementRef);
        this._focusMonitor = inject(FocusMonitor);
        this._ngZone = inject(NgZone);
        this._focused = signal(false);
        this._openItemIds = signal([]);
        this.openItemIds = this._openItemIds.asReadonly();
        this.state = computed(() => (this._openItemIds().length > 0 ? 'open' : 'closed'));
        this.type = 'single';
        this.dir = null;
        this.orientation = 'vertical';
    }
    ngAfterContentInit() {
        if (!this.triggers) {
            return;
        }
        this._keyManager = new FocusKeyManager(this.triggers)
            .withHomeAndEnd()
            .withPageUpDown()
            .withWrap();
        if (this.orientation === 'horizontal') {
            this._keyManager.withHorizontalOrientation(this.dir ?? 'ltr').withVerticalOrientation(false);
        }
        this._el.nativeElement.addEventListener('keydown', (event) => {
            this._keyManager?.onKeydown(event);
            this.preventDefaultEvents(event);
        });
        this._focusMonitor.monitor(this._el, true).subscribe((origin) => this._focused.set(origin !== null));
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._el);
    }
    setActiveItem(item) {
        // public setActiveItem(item: number) {
        this._keyManager?.setActiveItem(item);
    }
    toggleItem(id) {
        if (this._openItemIds().includes(id)) {
            this.closeItem(id);
            return;
        }
        this.openItem(id);
    }
    openItem(id) {
        if (this.type === 'single') {
            this._openItemIds.set([id]);
            return;
        }
        this._openItemIds.update((ids) => [...ids, id]);
    }
    closeItem(id) {
        this._openItemIds.update((ids) => ids.filter((openId) => id !== openId));
    }
    preventDefaultEvents(event) {
        if (!this._focused())
            return;
        if (!('key' in event))
            return;
        const keys = this.orientation === 'horizontal' ? HORIZONTAL_KEYS_TO_PREVENT_DEFAULT : VERTICAL_KEYS_TO_PREVENT_DEFAULT;
        if (keys.includes(event.key) && event.code !== 'NumpadEnter') {
            event.preventDefault();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnAccordionDirective, isStandalone: true, selector: "[brnAccordion]", inputs: { type: "type", dir: "dir", orientation: "orientation" }, host: { properties: { "attr.data-state": "state()", "attr.data-orientation": "orientation" } }, queries: [{ propertyName: "triggers", predicate: BrnAccordionTriggerDirective, descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAccordionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnAccordion]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.data-orientation]': 'orientation',
                    },
                }]
        }], propDecorators: { triggers: [{
                type: ContentChildren,
                args: [BrnAccordionTriggerDirective, { descendants: true }]
            }], type: [{
                type: Input
            }], dir: [{
                type: Input
            }], orientation: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,