import { Directive, HostListener, computed, signal } from '@angular/core';
import * as i0 from "@angular/core";
export class BrnAvatarImageDirective {
    constructor() {
        this.error = signal(false);
        this.loaded = signal(false);
        this.canShow = computed(() => {
            return this.loaded() && !this.error();
        });
    }
    onError() {
        this.error.set(true);
    }
    onLoad() {
        this.loaded.set(true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAvatarImageDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnAvatarImageDirective, isStandalone: true, selector: "img[brnAvatarImage]", host: { listeners: { "error": "onError()", "load": "onLoad()" } }, exportAs: ["avatarImage"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnAvatarImageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[brnAvatarImage]',
                    standalone: true,
                    exportAs: 'avatarImage',
                }]
        }], propDecorators: { onError: [{
                type: HostListener,
                args: ['error']
            }], onLoad: [{
                type: HostListener,
                args: ['load']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWF2YXRhci1pbWFnZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpL2F2YXRhci9icmFpbi9zcmMvbGliL2ltYWdlL2Jybi1hdmF0YXItaW1hZ2UuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzFFLE1BQU0sT0FBTyx1QkFBdUI7SUFMcEM7UUFNa0IsVUFBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN0QixXQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBWXhDLFlBQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0tBQ0g7SUFaUSxPQUFPO1FBQ2QsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUdPLE1BQU07UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDOzhHQVpXLHVCQUF1QjtrR0FBdkIsdUJBQXVCOzsyRkFBdkIsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsYUFBYTtpQkFDdkI7OEJBTVEsT0FBTztzQkFEZCxZQUFZO3VCQUFDLE9BQU87Z0JBTWIsTUFBTTtzQkFEYixZQUFZO3VCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RMaXN0ZW5lciwgY29tcHV0ZWQsIHNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdpbWdbYnJuQXZhdGFySW1hZ2VdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0ZXhwb3J0QXM6ICdhdmF0YXJJbWFnZScsXG59KVxuZXhwb3J0IGNsYXNzIEJybkF2YXRhckltYWdlRGlyZWN0aXZlIHtcblx0cHJpdmF0ZSByZWFkb25seSBlcnJvciA9IHNpZ25hbChmYWxzZSk7XG5cdHByaXZhdGUgcmVhZG9ubHkgbG9hZGVkID0gc2lnbmFsKGZhbHNlKTtcblxuXHRASG9zdExpc3RlbmVyKCdlcnJvcicpXG5cdHByaXZhdGUgb25FcnJvcigpIHtcblx0XHR0aGlzLmVycm9yLnNldCh0cnVlKTtcblx0fVxuXG5cdEBIb3N0TGlzdGVuZXIoJ2xvYWQnKVxuXHRwcml2YXRlIG9uTG9hZCgpIHtcblx0XHR0aGlzLmxvYWRlZC5zZXQodHJ1ZSk7XG5cdH1cblxuXHRjYW5TaG93ID0gY29tcHV0ZWQoKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLmxvYWRlZCgpICYmICF0aGlzLmVycm9yKCk7XG5cdH0pO1xufVxuIl19