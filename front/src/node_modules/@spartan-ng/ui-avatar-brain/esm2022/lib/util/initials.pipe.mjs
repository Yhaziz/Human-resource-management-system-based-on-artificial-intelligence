import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
const toInitial = (capitalize = true) => (word) => {
    const initial = word.charAt(0);
    return capitalize ? initial.toLocaleUpperCase() : initial;
};
const firstAndLast = (initials) => `${initials[0]}${initials[initials.length - 1]}`;
export class InitialsPipe {
    transform(name, capitalize = true, firstAndLastOnly = true, delimiter = ' ') {
        if (!name)
            return '';
        const initials = name.trim().split(delimiter).filter(Boolean).map(toInitial(capitalize));
        if (firstAndLastOnly && initials.length > 1)
            return firstAndLast(initials);
        return initials.join('');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: InitialsPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.3.5", ngImport: i0, type: InitialsPipe, isStandalone: true, name: "initials" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: InitialsPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'initials',
                    standalone: true,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdGlhbHMucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvYXZhdGFyL2JyYWluL3NyYy9saWIvdXRpbC9pbml0aWFscy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQXNCLE1BQU0sZUFBZSxDQUFDOztBQUV6RCxNQUFNLFNBQVMsR0FDZCxDQUFDLFVBQVUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUN0QixDQUFDLElBQVksRUFBRSxFQUFFO0lBQ2hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0IsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7QUFDM0QsQ0FBQyxDQUFDO0FBRUgsTUFBTSxZQUFZLEdBQUcsQ0FBQyxRQUFrQixFQUFFLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBTTlGLE1BQU0sT0FBTyxZQUFZO0lBQ3hCLFNBQVMsQ0FBQyxJQUFZLEVBQUUsVUFBVSxHQUFHLElBQUksRUFBRSxnQkFBZ0IsR0FBRyxJQUFJLEVBQUUsU0FBUyxHQUFHLEdBQUc7UUFDbEYsSUFBSSxDQUFDLElBQUk7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVyQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFekYsSUFBSSxnQkFBZ0IsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUM7WUFBRSxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUzRSxPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs4R0FUVyxZQUFZOzRHQUFaLFlBQVk7OzJGQUFaLFlBQVk7a0JBSnhCLElBQUk7bUJBQUM7b0JBQ0wsSUFBSSxFQUFFLFVBQVU7b0JBQ2hCLFVBQVUsRUFBRSxJQUFJO2lCQUNoQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIHR5cGUgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5jb25zdCB0b0luaXRpYWwgPVxuXHQoY2FwaXRhbGl6ZSA9IHRydWUpID0+XG5cdCh3b3JkOiBzdHJpbmcpID0+IHtcblx0XHRjb25zdCBpbml0aWFsID0gd29yZC5jaGFyQXQoMCk7XG5cdFx0cmV0dXJuIGNhcGl0YWxpemUgPyBpbml0aWFsLnRvTG9jYWxlVXBwZXJDYXNlKCkgOiBpbml0aWFsO1xuXHR9O1xuXG5jb25zdCBmaXJzdEFuZExhc3QgPSAoaW5pdGlhbHM6IHN0cmluZ1tdKSA9PiBgJHtpbml0aWFsc1swXX0ke2luaXRpYWxzW2luaXRpYWxzLmxlbmd0aCAtIDFdfWA7XG5cbkBQaXBlKHtcblx0bmFtZTogJ2luaXRpYWxzJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgSW5pdGlhbHNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cdHRyYW5zZm9ybShuYW1lOiBzdHJpbmcsIGNhcGl0YWxpemUgPSB0cnVlLCBmaXJzdEFuZExhc3RPbmx5ID0gdHJ1ZSwgZGVsaW1pdGVyID0gJyAnKTogc3RyaW5nIHtcblx0XHRpZiAoIW5hbWUpIHJldHVybiAnJztcblxuXHRcdGNvbnN0IGluaXRpYWxzID0gbmFtZS50cmltKCkuc3BsaXQoZGVsaW1pdGVyKS5maWx0ZXIoQm9vbGVhbikubWFwKHRvSW5pdGlhbChjYXBpdGFsaXplKSk7XG5cblx0XHRpZiAoZmlyc3RBbmRMYXN0T25seSAmJiBpbml0aWFscy5sZW5ndGggPiAxKSByZXR1cm4gZmlyc3RBbmRMYXN0KGluaXRpYWxzKTtcblxuXHRcdHJldHVybiBpbml0aWFscy5qb2luKCcnKTtcblx0fVxufVxuIl19