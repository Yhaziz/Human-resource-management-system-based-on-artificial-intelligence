import { FocusMonitor } from '@angular/cdk/a11y';
import { NgStyle, isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, PLATFORM_ID, Renderer2, ViewChild, ViewEncapsulation, booleanAttribute, computed, effect, forwardRef, inject, input, signal, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { rxHostPressedListener } from '@spartan-ng/ui-core';
import * as i0 from "@angular/core";
export const BRN_CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => BrnCheckboxComponent),
    multi: true,
};
export function indeterminateBooleanAttribute(value) {
    if (value === 'indeterminate')
        return 'indeterminate';
    return booleanAttribute(value);
}
const CONTAINER_POST_FIX = '-checkbox';
export class BrnCheckboxComponent {
    // TODO should be changed to new model input when updated to Angular 17.2
    set checked(value) {
        this._checked.set(value);
    }
    set disabled(value) {
        this._disabled.set(value);
    }
    get disabled() {
        return this._disabled();
    }
    constructor() {
        this._renderer = inject(Renderer2);
        this._elementRef = inject(ElementRef);
        this._focusMonitor = inject(FocusMonitor);
        this._isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._focusVisible = signal(false);
        this.focusVisible = this._focusVisible.asReadonly();
        this._focused = signal(false);
        this.focused = this._focused.asReadonly();
        this._checked = signal(false);
        this.isChecked = this._checked.asReadonly();
        this._dataState = computed(() => {
            const checked = this._checked();
            if (checked === 'indeterminate')
                return 'indeterminate';
            return checked ? 'checked' : 'unchecked';
        });
        this._ariaChecked = computed(() => {
            const checked = this._checked();
            if (checked === 'indeterminate')
                return 'mixed';
            return checked ? 'true' : 'false';
        });
        this._value = computed(() => {
            const checked = this._checked();
            if (checked === 'indeterminate')
                return '';
            return checked ? 'on' : 'off';
        });
        /** Used to set the id on the underlying input element. */
        this.id = input(null);
        this.hostId = computed(() => (this.id() ? this.id() + CONTAINER_POST_FIX : null));
        /** Used to set the name attribute on the underlying input element. */
        this.name = input(null);
        this.hostName = computed(() => (this.name() ? this.name() + CONTAINER_POST_FIX : null));
        /** Used to set the aria-label attribute on the underlying input element. */
        this.ariaLabel = input(null, { alias: 'aria-label' });
        /** Used to set the aria-labelledby attribute on the underlying input element. */
        this.ariaLabelledby = input(null, { alias: 'aria-labelledby' });
        this.ariaDescribedby = input(null, { alias: 'aria-describedby' });
        this.required = input(false, { transform: booleanAttribute });
        // TODO should be changed to new model input when updated to Angular 17.2
        this._disabled = signal(false);
        // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-unused-vars,,@typescript-eslint/no-explicit-any
        this._onChange = (_) => { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this._onTouched = () => { };
        this.changed = new EventEmitter();
        rxHostPressedListener().subscribe(() => this.handleChange());
        effect(() => {
            const parent = this._renderer.parentNode(this._elementRef.nativeElement);
            if (!parent)
                return;
            // check if parent is a label and assume it is for this checkbox
            if (parent?.tagName === 'LABEL') {
                this._renderer.setAttribute(parent, 'data-disabled', this._disabled() ? 'true' : 'false');
                return;
            }
            if (!this._isBrowser)
                return;
            const label = parent?.querySelector(`label[for="${this.id()}"]`);
            if (!label)
                return;
            this._renderer.setAttribute(label, 'data-disabled', this._disabled() ? 'true' : 'false');
        });
    }
    handleChange() {
        if (this._disabled())
            return;
        if (!this.checkbox)
            return;
        const previousChecked = this._checked();
        this._checked.set(previousChecked === 'indeterminate' ? true : !previousChecked);
        this._onChange(!previousChecked);
        this.changed.emit(!previousChecked);
    }
    ngAfterContentInit() {
        this._focusMonitor.monitor(this._elementRef, true).subscribe((focusOrigin) => {
            if (focusOrigin)
                this._focused.set(true);
            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {
                this._focusVisible.set(true);
            }
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state
                // change (such as a form control's ng-touched) will cause a changed-after-checked error.
                // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                // telling the form control it has been touched until the next tick.
                Promise.resolve().then(() => {
                    this._focusVisible.set(false);
                    this._focused.set(false);
                    this._onTouched();
                });
            }
        });
        if (!this.checkbox)
            return;
        this.checkbox.nativeElement.indeterminate = this._checked() === 'indeterminate';
        if (this.checkbox.nativeElement.indeterminate) {
            this.checkbox.nativeElement.value = 'indeterminate';
        }
        else {
            this.checkbox.nativeElement.value = this._checked() ? 'on' : 'off';
        }
        this.checkbox.nativeElement.dispatchEvent(new Event('change'));
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._elementRef);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    writeValue(value) {
        if (value === 'indeterminate') {
            this.checked = 'indeterminate';
        }
        else {
            this.checked = !!value;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /** Implemented as a part of ControlValueAccessor. */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "17.3.5", type: BrnCheckboxComponent, isStandalone: true, selector: "brn-checkbox", inputs: { checked: { classPropertyName: "checked", publicName: "checked", isSignal: false, isRequired: false, transformFunction: indeterminateBooleanAttribute }, id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, name: { classPropertyName: "name", publicName: "name", isSignal: true, isRequired: false, transformFunction: null }, ariaLabel: { classPropertyName: "ariaLabel", publicName: "aria-label", isSignal: true, isRequired: false, transformFunction: null }, ariaLabelledby: { classPropertyName: "ariaLabelledby", publicName: "aria-labelledby", isSignal: true, isRequired: false, transformFunction: null }, ariaDescribedby: { classPropertyName: "ariaDescribedby", publicName: "aria-describedby", isSignal: true, isRequired: false, transformFunction: null }, required: { classPropertyName: "required", publicName: "required", isSignal: true, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: false, isRequired: false, transformFunction: booleanAttribute } }, outputs: { changed: "changed" }, host: { properties: { "attr.tabindex": "_disabled() ? \"-1\" : \"0\"", "attr.data-state": "_dataState()", "attr.data-focus-visible": "focusVisible()", "attr.data-focus": "focused()", "attr.data-disabled": "_disabled()", "attr.aria-labelledby": "null", "attr.aria-label": "null", "attr.aria-describedby": "null", "attr.id": "hostId()", "attr.name": "hostName()" } }, providers: [BRN_CHECKBOX_VALUE_ACCESSOR], viewQueries: [{ propertyName: "checkbox", first: true, predicate: ["checkBox"], descendants: true, static: true }], ngImport: i0, template: `
		<input
			#checkBox
			tabindex="-1"
			type="checkbox"
			role="checkbox"
			[ngStyle]="{
				position: 'absolute',
				width: '1px',
				height: '1px',
				padding: '0',
				margin: '-1px',
				overflow: 'hidden',
				clip: 'rect(0, 0, 0, 0)',
				whiteSpace: 'nowrap',
				borderWidth: '0'
			}"
			[id]="id() ?? ''"
			[name]="name() ?? ''"
			[value]="_value()"
			[checked]="isChecked()"
			[required]="required()"
			[attr.aria-label]="ariaLabel()"
			[attr.aria-labelledby]="ariaLabelledby()"
			[attr.aria-describedby]="ariaDescribedby()"
			[attr.aria-required]="required() || null"
			[attr.aria-checked]="_ariaChecked()"
		/>
		<ng-content />
	`, isInline: true, dependencies: [{ kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-checkbox',
                    standalone: true,
                    imports: [NgStyle],
                    template: `
		<input
			#checkBox
			tabindex="-1"
			type="checkbox"
			role="checkbox"
			[ngStyle]="{
				position: 'absolute',
				width: '1px',
				height: '1px',
				padding: '0',
				margin: '-1px',
				overflow: 'hidden',
				clip: 'rect(0, 0, 0, 0)',
				whiteSpace: 'nowrap',
				borderWidth: '0'
			}"
			[id]="id() ?? ''"
			[name]="name() ?? ''"
			[value]="_value()"
			[checked]="isChecked()"
			[required]="required()"
			[attr.aria-label]="ariaLabel()"
			[attr.aria-labelledby]="ariaLabelledby()"
			[attr.aria-describedby]="ariaDescribedby()"
			[attr.aria-required]="required() || null"
			[attr.aria-checked]="_ariaChecked()"
		/>
		<ng-content />
	`,
                    host: {
                        '[attr.tabindex]': '_disabled() ? "-1" : "0"',
                        '[attr.data-state]': '_dataState()',
                        '[attr.data-focus-visible]': 'focusVisible()',
                        '[attr.data-focus]': 'focused()',
                        '[attr.data-disabled]': '_disabled()',
                        '[attr.aria-labelledby]': 'null',
                        '[attr.aria-label]': 'null',
                        '[attr.aria-describedby]': 'null',
                        '[attr.id]': 'hostId()',
                        '[attr.name]': 'hostName()',
                    },
                    providers: [BRN_CHECKBOX_VALUE_ACCESSOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: () => [], propDecorators: { checked: [{
                type: Input,
                args: [{ transform: indeterminateBooleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], checkbox: [{
                type: ViewChild,
                args: ['checkBox', { static: true }]
            }], changed: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,