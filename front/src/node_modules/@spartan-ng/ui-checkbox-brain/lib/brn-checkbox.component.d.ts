import { ElementRef, EventEmitter, type AfterContentInit, type OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare const BRN_CHECKBOX_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly import("@angular/forms").ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare function indeterminateBooleanAttribute(value: unknown): boolean | 'indeterminate';
export declare class BrnCheckboxComponent implements AfterContentInit, OnDestroy {
    private readonly _renderer;
    private readonly _elementRef;
    private readonly _focusMonitor;
    private readonly _isBrowser;
    private readonly _focusVisible;
    readonly focusVisible: import("@angular/core").Signal<boolean>;
    private readonly _focused;
    readonly focused: import("@angular/core").Signal<boolean>;
    private readonly _checked;
    readonly isChecked: import("@angular/core").Signal<boolean | "indeterminate">;
    protected readonly _dataState: import("@angular/core").Signal<"indeterminate" | "checked" | "unchecked">;
    protected readonly _ariaChecked: import("@angular/core").Signal<"mixed" | "true" | "false">;
    protected readonly _value: import("@angular/core").Signal<"" | "on" | "off">;
    set checked(value: boolean | 'indeterminate');
    /** Used to set the id on the underlying input element. */
    readonly id: import("@angular/core").InputSignal<string | null>;
    protected readonly hostId: import("@angular/core").Signal<string | null>;
    /** Used to set the name attribute on the underlying input element. */
    readonly name: import("@angular/core").InputSignal<string | null>;
    protected readonly hostName: import("@angular/core").Signal<string | null>;
    /** Used to set the aria-label attribute on the underlying input element. */
    readonly ariaLabel: import("@angular/core").InputSignal<string | null>;
    /** Used to set the aria-labelledby attribute on the underlying input element. */
    readonly ariaLabelledby: import("@angular/core").InputSignal<string | null>;
    readonly ariaDescribedby: import("@angular/core").InputSignal<string | null>;
    readonly required: import("@angular/core").InputSignalWithTransform<boolean, unknown>;
    protected readonly _disabled: import("@angular/core").WritableSignal<boolean>;
    set disabled(value: boolean);
    get disabled(): boolean;
    protected _onChange: (_: any) => void;
    private _onTouched;
    checkbox?: ElementRef<HTMLInputElement>;
    readonly changed: EventEmitter<boolean | "indeterminate">;
    constructor();
    handleChange(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    /** Implemented as a part of ControlValueAccessor. */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnCheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnCheckboxComponent, "brn-checkbox", never, { "checked": { "alias": "checked"; "required": false; }; "id": { "alias": "id"; "required": false; "isSignal": true; }; "name": { "alias": "name"; "required": false; "isSignal": true; }; "ariaLabel": { "alias": "aria-label"; "required": false; "isSignal": true; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; "isSignal": true; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; "isSignal": true; }; "required": { "alias": "required"; "required": false; "isSignal": true; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "changed": "changed"; }, never, ["*"], true, never>;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_disabled: unknown;
}
