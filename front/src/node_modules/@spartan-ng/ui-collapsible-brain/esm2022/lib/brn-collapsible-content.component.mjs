import { Component, ElementRef, Input, computed, inject, signal } from '@angular/core';
import { BrnCollapsibleComponent } from './brn-collapsible.component';
import * as i0 from "@angular/core";
export class BrnCollapsibleContentComponent {
    set id(value) {
        if (!value || !this._collapsible)
            return;
        this._collapsible.contentId.set(value);
    }
    constructor() {
        this._collapsible = inject(BrnCollapsibleComponent, { optional: true });
        this._elementRef = inject(ElementRef);
        this._height = signal(0);
        this._width = signal(0);
        this.contentId = this._collapsible?.contentId ?? signal(undefined).asReadonly;
        this.state = this._collapsible?.state ?? signal('closed').asReadonly();
        this.computedStyles = computed(() => {
            const height = this._height();
            const width = this._width();
            return {
                [`--radix-collapsible-content-height`]: height ? `${height}px` : undefined,
                [`--radix-collapsible-content-width`]: width ? `${width}px` : undefined,
            };
        });
        if (!this._collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
    }
    ngAfterContentInit() {
        if (typeof this._elementRef.nativeElement.getBoundingClientRect !== 'function')
            return;
        const rect = this._elementRef.nativeElement.getBoundingClientRect();
        if (!rect)
            return;
        this._width.set(rect.width);
        this._height.set(rect.height);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnCollapsibleContentComponent, isStandalone: true, selector: "brn-collapsible-content", inputs: { id: "id" }, host: { properties: { "hidden": "state() === \"closed\"", "attr.data-state": "state()", "style": "computedStyles()", "id": "contentId()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible-content',
                    standalone: true,
                    host: {
                        '[hidden]': 'state() === "closed"',
                        '[attr.data-state]': 'state()',
                        '[style]': 'computedStyles()',
                        '[id]': 'contentId()',
                    },
                    template: `
		<ng-content />
	`,
                }]
        }], ctorParameters: () => [], propDecorators: { id: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWNvbGxhcHNpYmxlLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS9jb2xsYXBzaWJsZS9icmFpbi9zcmMvbGliL2Jybi1jb2xsYXBzaWJsZS1jb250ZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQzlHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQWV0RSxNQUFNLE9BQU8sOEJBQThCO0lBaUIxQyxJQUNJLEVBQUUsQ0FBQyxLQUFnQztRQUN0QyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7WUFBRSxPQUFPO1FBQ3pDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBQ0Q7UUFyQlEsaUJBQVksR0FBRyxNQUFNLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRSxnQkFBVyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixZQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLFdBQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0IsY0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsU0FBUyxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFFaEYsVUFBSyxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsS0FBSyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNsRSxtQkFBYyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUU7WUFDOUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzlCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM1QixPQUFPO2dCQUNOLENBQUMsb0NBQW9DLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVM7Z0JBQzFFLENBQUMsbUNBQW1DLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVM7YUFDdkUsQ0FBQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBUUYsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN4QixNQUFNLEtBQUssQ0FBQyxrRkFBa0YsQ0FBQyxDQUFDO1FBQ2pHLENBQUM7SUFDRixDQUFDO0lBRUQsa0JBQWtCO1FBQ2pCLElBQUksT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsS0FBSyxVQUFVO1lBQUUsT0FBTztRQUN2RixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ3BFLElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9CLENBQUM7OEdBbENXLDhCQUE4QjtrR0FBOUIsOEJBQThCLHVQQUpoQzs7RUFFVDs7MkZBRVcsOEJBQThCO2tCQWIxQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSx5QkFBeUI7b0JBQ25DLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUU7d0JBQ0wsVUFBVSxFQUFFLHNCQUFzQjt3QkFDbEMsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIsU0FBUyxFQUFFLGtCQUFrQjt3QkFDN0IsTUFBTSxFQUFFLGFBQWE7cUJBQ3JCO29CQUNELFFBQVEsRUFBRTs7RUFFVDtpQkFDRDt3REFtQkksRUFBRTtzQkFETCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBJbnB1dCwgY29tcHV0ZWQsIGluamVjdCwgc2lnbmFsLCB0eXBlIEFmdGVyQ29udGVudEluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJybkNvbGxhcHNpYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9icm4tY29sbGFwc2libGUuY29tcG9uZW50JztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnYnJuLWNvbGxhcHNpYmxlLWNvbnRlbnQnLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRob3N0OiB7XG5cdFx0J1toaWRkZW5dJzogJ3N0YXRlKCkgPT09IFwiY2xvc2VkXCInLFxuXHRcdCdbYXR0ci5kYXRhLXN0YXRlXSc6ICdzdGF0ZSgpJyxcblx0XHQnW3N0eWxlXSc6ICdjb21wdXRlZFN0eWxlcygpJyxcblx0XHQnW2lkXSc6ICdjb250ZW50SWQoKScsXG5cdH0sXG5cdHRlbXBsYXRlOiBgXG5cdFx0PG5nLWNvbnRlbnQgLz5cblx0YCxcbn0pXG5leHBvcnQgY2xhc3MgQnJuQ29sbGFwc2libGVDb250ZW50Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG5cdHByaXZhdGUgX2NvbGxhcHNpYmxlID0gaW5qZWN0KEJybkNvbGxhcHNpYmxlQ29tcG9uZW50LCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuXHRwcml2YXRlIF9lbGVtZW50UmVmID0gaW5qZWN0KEVsZW1lbnRSZWYpO1xuXHRwcml2YXRlIHJlYWRvbmx5IF9oZWlnaHQgPSBzaWduYWwoMCk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX3dpZHRoID0gc2lnbmFsKDApO1xuXHRwdWJsaWMgY29udGVudElkID0gdGhpcy5fY29sbGFwc2libGU/LmNvbnRlbnRJZCA/PyBzaWduYWwodW5kZWZpbmVkKS5hc1JlYWRvbmx5O1xuXG5cdHN0YXRlID0gdGhpcy5fY29sbGFwc2libGU/LnN0YXRlID8/IHNpZ25hbCgnY2xvc2VkJykuYXNSZWFkb25seSgpO1xuXHRjb21wdXRlZFN0eWxlcyA9IGNvbXB1dGVkKCgpID0+IHtcblx0XHRjb25zdCBoZWlnaHQgPSB0aGlzLl9oZWlnaHQoKTtcblx0XHRjb25zdCB3aWR0aCA9IHRoaXMuX3dpZHRoKCk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdFtgLS1yYWRpeC1jb2xsYXBzaWJsZS1jb250ZW50LWhlaWdodGBdOiBoZWlnaHQgPyBgJHtoZWlnaHR9cHhgIDogdW5kZWZpbmVkLFxuXHRcdFx0W2AtLXJhZGl4LWNvbGxhcHNpYmxlLWNvbnRlbnQtd2lkdGhgXTogd2lkdGggPyBgJHt3aWR0aH1weGAgOiB1bmRlZmluZWQsXG5cdFx0fTtcblx0fSk7XG5cblx0QElucHV0KClcblx0c2V0IGlkKHZhbHVlOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSB7XG5cdFx0aWYgKCF2YWx1ZSB8fCAhdGhpcy5fY29sbGFwc2libGUpIHJldHVybjtcblx0XHR0aGlzLl9jb2xsYXBzaWJsZS5jb250ZW50SWQuc2V0KHZhbHVlKTtcblx0fVxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRpZiAoIXRoaXMuX2NvbGxhcHNpYmxlKSB7XG5cdFx0XHR0aHJvdyBFcnJvcignQ29sbGFwc2libGUgdHJpZ2dlciBkaXJlY3RpdmUgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYSBicm4tY29sbGFwc2libGUgZWxlbWVudC4nKTtcblx0XHR9XG5cdH1cblxuXHRuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0aWYgKHR5cGVvZiB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSAnZnVuY3Rpb24nKSByZXR1cm47XG5cdFx0Y29uc3QgcmVjdCA9IHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHRpZiAoIXJlY3QpIHJldHVybjtcblx0XHR0aGlzLl93aWR0aC5zZXQocmVjdC53aWR0aCk7XG5cdFx0dGhpcy5faGVpZ2h0LnNldChyZWN0LmhlaWdodCk7XG5cdH1cbn1cbiJdfQ==