import { Directive, inject, signal } from '@angular/core';
import { BrnCollapsibleComponent } from './brn-collapsible.component';
import * as i0 from "@angular/core";
export class BrnCollapsibleTriggerDirective {
    constructor() {
        this._collapsible = inject(BrnCollapsibleComponent, { optional: true });
        this.state = this._collapsible?.state ?? signal(false).asReadonly();
        this.disabled = this._collapsible?.collapsibleDisabled ?? signal(undefined).asReadonly();
        this.ariaControls = this._collapsible?.contentId;
        if (!this._collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
    }
    toggleCollapsible() {
        this._collapsible?.toggle();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnCollapsibleTriggerDirective, isStandalone: true, selector: "button[brnCollapsibleTrigger]", host: { listeners: { "click": "toggleCollapsible()" }, properties: { "attr.data-state": "state()", "attr.disabled": "disabled()", "attr.aria-expanded": "state() === \"open\"", "attr.aria-controls": "ariaControls()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnCollapsibleTrigger]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.disabled]': 'disabled()',
                        '[attr.aria-expanded]': 'state() === "open"',
                        '[attr.aria-controls]': 'ariaControls()',
                        '(click)': 'toggleCollapsible()',
                    },
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWNvbGxhcHNpYmxlLXRyaWdnZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS9jb2xsYXBzaWJsZS9icmFpbi9zcmMvbGliL2Jybi1jb2xsYXBzaWJsZS10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7O0FBYXRFLE1BQU0sT0FBTyw4QkFBOEI7SUFLMUM7UUFKUSxpQkFBWSxHQUFHLE1BQU0sQ0FBQyx1QkFBdUIsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLFVBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDL0QsYUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3BGLGlCQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxTQUFTLENBQUM7UUFFM0MsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN4QixNQUFNLEtBQUssQ0FBQyxrRkFBa0YsQ0FBQyxDQUFDO1FBQ2pHLENBQUM7SUFDRixDQUFDO0lBRUQsaUJBQWlCO1FBQ2hCLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs4R0FiVyw4QkFBOEI7a0dBQTlCLDhCQUE4Qjs7MkZBQTlCLDhCQUE4QjtrQkFYMUMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUsK0JBQStCO29CQUN6QyxVQUFVLEVBQUUsSUFBSTtvQkFDaEIsSUFBSSxFQUFFO3dCQUNMLG1CQUFtQixFQUFFLFNBQVM7d0JBQzlCLGlCQUFpQixFQUFFLFlBQVk7d0JBQy9CLHNCQUFzQixFQUFFLG9CQUFvQjt3QkFDNUMsc0JBQXNCLEVBQUUsZ0JBQWdCO3dCQUN4QyxTQUFTLEVBQUUscUJBQXFCO3FCQUNoQztpQkFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgaW5qZWN0LCBzaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJybkNvbGxhcHNpYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9icm4tY29sbGFwc2libGUuY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnYnV0dG9uW2JybkNvbGxhcHNpYmxlVHJpZ2dlcl0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRob3N0OiB7XG5cdFx0J1thdHRyLmRhdGEtc3RhdGVdJzogJ3N0YXRlKCknLFxuXHRcdCdbYXR0ci5kaXNhYmxlZF0nOiAnZGlzYWJsZWQoKScsXG5cdFx0J1thdHRyLmFyaWEtZXhwYW5kZWRdJzogJ3N0YXRlKCkgPT09IFwib3BlblwiJyxcblx0XHQnW2F0dHIuYXJpYS1jb250cm9sc10nOiAnYXJpYUNvbnRyb2xzKCknLFxuXHRcdCcoY2xpY2spJzogJ3RvZ2dsZUNvbGxhcHNpYmxlKCknLFxuXHR9LFxufSlcbmV4cG9ydCBjbGFzcyBCcm5Db2xsYXBzaWJsZVRyaWdnZXJEaXJlY3RpdmUge1xuXHRwcml2YXRlIF9jb2xsYXBzaWJsZSA9IGluamVjdChCcm5Db2xsYXBzaWJsZUNvbXBvbmVudCwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcblx0c3RhdGUgPSB0aGlzLl9jb2xsYXBzaWJsZT8uc3RhdGUgPz8gc2lnbmFsKGZhbHNlKS5hc1JlYWRvbmx5KCk7XG5cdGRpc2FibGVkID0gdGhpcy5fY29sbGFwc2libGU/LmNvbGxhcHNpYmxlRGlzYWJsZWQgPz8gc2lnbmFsKHVuZGVmaW5lZCkuYXNSZWFkb25seSgpO1xuXHRhcmlhQ29udHJvbHMgPSB0aGlzLl9jb2xsYXBzaWJsZT8uY29udGVudElkO1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRpZiAoIXRoaXMuX2NvbGxhcHNpYmxlKSB7XG5cdFx0XHR0aHJvdyBFcnJvcignQ29sbGFwc2libGUgdHJpZ2dlciBkaXJlY3RpdmUgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgYSBicm4tY29sbGFwc2libGUgZWxlbWVudC4nKTtcblx0XHR9XG5cdH1cblxuXHR0b2dnbGVDb2xsYXBzaWJsZSgpIHtcblx0XHR0aGlzLl9jb2xsYXBzaWJsZT8udG9nZ2xlKCk7XG5cdH1cbn1cbiJdfQ==