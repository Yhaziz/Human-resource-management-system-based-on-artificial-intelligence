import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, ViewEncapsulation, booleanAttribute, inject, signal, } from '@angular/core';
import * as i0 from "@angular/core";
let collapsibleContentIdSequence = 0;
export class BrnCollapsibleComponent {
    constructor() {
        this._cdr = inject(ChangeDetectorRef);
        this.state = signal('closed');
        this.contentId = signal('brn-collapsible-content-' + collapsibleContentIdSequence++);
        this._disabled = signal(undefined);
        this.collapsibleDisabled = this._disabled.asReadonly();
    }
    set disabled(value) {
        this._disabled.set(value ? true : undefined);
    }
    toggle() {
        this.state.set(this.state() === 'closed' ? 'open' : 'closed');
        this._cdr.detectChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.5", type: BrnCollapsibleComponent, isStandalone: true, selector: "brn-collapsible", inputs: { disabled: ["disabled", "disabled", booleanAttribute] }, host: { properties: { "attr.data-state": "state()", "attr.disabled": "collapsibleDisabled()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.disabled]': 'collapsibleDisabled()',
                    },
                    template: `
		<ng-content />
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWNvbGxhcHNpYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvY29sbGFwc2libGUvYnJhaW4vc3JjL2xpYi9icm4tY29sbGFwc2libGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTix1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxLQUFLLEVBQ0wsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixNQUFNLEVBQ04sTUFBTSxHQUNOLE1BQU0sZUFBZSxDQUFDOztBQUV2QixJQUFJLDRCQUE0QixHQUFHLENBQUMsQ0FBQztBQWdCckMsTUFBTSxPQUFPLHVCQUF1QjtJQWJwQztRQWNTLFNBQUksR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN6QyxVQUFLLEdBQUcsTUFBTSxDQUFzQixRQUFRLENBQUMsQ0FBQztRQUM5QyxjQUFTLEdBQUcsTUFBTSxDQUFDLDBCQUEwQixHQUFHLDRCQUE0QixFQUFFLENBQUMsQ0FBQztRQUUvRCxjQUFTLEdBQUcsTUFBTSxDQUFtQixTQUFTLENBQUMsQ0FBQztRQUtqRSx3QkFBbUIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBTWxEO0lBVkEsSUFDSSxRQUFRLENBQUMsS0FBYztRQUMxQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUdNLE1BQU07UUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzlELElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs4R0FmVyx1QkFBdUI7a0dBQXZCLHVCQUF1QixnR0FNZixnQkFBZ0IsK0hBWjFCOztFQUVUOzsyRkFJVyx1QkFBdUI7a0JBYm5DLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRTt3QkFDTCxtQkFBbUIsRUFBRSxTQUFTO3dCQUM5QixpQkFBaUIsRUFBRSx1QkFBdUI7cUJBQzFDO29CQUNELFFBQVEsRUFBRTs7RUFFVDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7aUJBQ3JDOzhCQVFJLFFBQVE7c0JBRFgsS0FBSzt1QkFBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuXHRDaGFuZ2VEZXRlY3RvclJlZixcblx0Q29tcG9uZW50LFxuXHRJbnB1dCxcblx0Vmlld0VuY2Fwc3VsYXRpb24sXG5cdGJvb2xlYW5BdHRyaWJ1dGUsXG5cdGluamVjdCxcblx0c2lnbmFsLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxubGV0IGNvbGxhcHNpYmxlQ29udGVudElkU2VxdWVuY2UgPSAwO1xuZXhwb3J0IHR5cGUgQnJuQ29sbGFwc2libGVTdGF0ZSA9ICdvcGVuJyB8ICdjbG9zZWQnO1xuXG5AQ29tcG9uZW50KHtcblx0c2VsZWN0b3I6ICdicm4tY29sbGFwc2libGUnLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRob3N0OiB7XG5cdFx0J1thdHRyLmRhdGEtc3RhdGVdJzogJ3N0YXRlKCknLFxuXHRcdCdbYXR0ci5kaXNhYmxlZF0nOiAnY29sbGFwc2libGVEaXNhYmxlZCgpJyxcblx0fSxcblx0dGVtcGxhdGU6IGBcblx0XHQ8bmctY29udGVudCAvPlxuXHRgLFxuXHRjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcblx0ZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgQnJuQ29sbGFwc2libGVDb21wb25lbnQge1xuXHRwcml2YXRlIF9jZHIgPSBpbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuXHRzdGF0ZSA9IHNpZ25hbDxCcm5Db2xsYXBzaWJsZVN0YXRlPignY2xvc2VkJyk7XG5cdGNvbnRlbnRJZCA9IHNpZ25hbCgnYnJuLWNvbGxhcHNpYmxlLWNvbnRlbnQtJyArIGNvbGxhcHNpYmxlQ29udGVudElkU2VxdWVuY2UrKyk7XG5cblx0cHJpdmF0ZSByZWFkb25seSBfZGlzYWJsZWQgPSBzaWduYWw8dHJ1ZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX2Rpc2FibGVkLnNldCh2YWx1ZSA/IHRydWUgOiB1bmRlZmluZWQpO1xuXHR9XG5cdGNvbGxhcHNpYmxlRGlzYWJsZWQgPSB0aGlzLl9kaXNhYmxlZC5hc1JlYWRvbmx5KCk7XG5cblx0cHVibGljIHRvZ2dsZSgpIHtcblx0XHR0aGlzLnN0YXRlLnNldCh0aGlzLnN0YXRlKCkgPT09ICdjbG9zZWQnID8gJ29wZW4nIDogJ2Nsb3NlZCcpO1xuXHRcdHRoaXMuX2Nkci5kZXRlY3RDaGFuZ2VzKCk7XG5cdH1cbn1cbiJdfQ==