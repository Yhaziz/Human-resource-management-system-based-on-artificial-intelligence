import * as i0 from '@angular/core';
import { inject, ChangeDetectorRef, signal, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ElementRef, computed, Directive, NgModule } from '@angular/core';

let collapsibleContentIdSequence = 0;
class BrnCollapsibleComponent {
    constructor() {
        this._cdr = inject(ChangeDetectorRef);
        this.state = signal('closed');
        this.contentId = signal('brn-collapsible-content-' + collapsibleContentIdSequence++);
        this._disabled = signal(undefined);
        this.collapsibleDisabled = this._disabled.asReadonly();
    }
    set disabled(value) {
        this._disabled.set(value ? true : undefined);
    }
    toggle() {
        this.state.set(this.state() === 'closed' ? 'open' : 'closed');
        this._cdr.detectChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.5", type: BrnCollapsibleComponent, isStandalone: true, selector: "brn-collapsible", inputs: { disabled: ["disabled", "disabled", booleanAttribute] }, host: { properties: { "attr.data-state": "state()", "attr.disabled": "collapsibleDisabled()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.disabled]': 'collapsibleDisabled()',
                    },
                    template: `
		<ng-content />
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class BrnCollapsibleContentComponent {
    set id(value) {
        if (!value || !this._collapsible)
            return;
        this._collapsible.contentId.set(value);
    }
    constructor() {
        this._collapsible = inject(BrnCollapsibleComponent, { optional: true });
        this._elementRef = inject(ElementRef);
        this._height = signal(0);
        this._width = signal(0);
        this.contentId = this._collapsible?.contentId ?? signal(undefined).asReadonly;
        this.state = this._collapsible?.state ?? signal('closed').asReadonly();
        this.computedStyles = computed(() => {
            const height = this._height();
            const width = this._width();
            return {
                [`--radix-collapsible-content-height`]: height ? `${height}px` : undefined,
                [`--radix-collapsible-content-width`]: width ? `${width}px` : undefined,
            };
        });
        if (!this._collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
    }
    ngAfterContentInit() {
        if (typeof this._elementRef.nativeElement.getBoundingClientRect !== 'function')
            return;
        const rect = this._elementRef.nativeElement.getBoundingClientRect();
        if (!rect)
            return;
        this._width.set(rect.width);
        this._height.set(rect.height);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnCollapsibleContentComponent, isStandalone: true, selector: "brn-collapsible-content", inputs: { id: "id" }, host: { properties: { "hidden": "state() === \"closed\"", "attr.data-state": "state()", "style": "computedStyles()", "id": "contentId()" } }, ngImport: i0, template: `
		<ng-content />
	`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-collapsible-content',
                    standalone: true,
                    host: {
                        '[hidden]': 'state() === "closed"',
                        '[attr.data-state]': 'state()',
                        '[style]': 'computedStyles()',
                        '[id]': 'contentId()',
                    },
                    template: `
		<ng-content />
	`,
                }]
        }], ctorParameters: () => [], propDecorators: { id: [{
                type: Input
            }] } });

class BrnCollapsibleTriggerDirective {
    constructor() {
        this._collapsible = inject(BrnCollapsibleComponent, { optional: true });
        this.state = this._collapsible?.state ?? signal(false).asReadonly();
        this.disabled = this._collapsible?.collapsibleDisabled ?? signal(undefined).asReadonly();
        this.ariaControls = this._collapsible?.contentId;
        if (!this._collapsible) {
            throw Error('Collapsible trigger directive can only be used inside a brn-collapsible element.');
        }
    }
    toggleCollapsible() {
        this._collapsible?.toggle();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnCollapsibleTriggerDirective, isStandalone: true, selector: "button[brnCollapsibleTrigger]", host: { listeners: { "click": "toggleCollapsible()" }, properties: { "attr.data-state": "state()", "attr.disabled": "disabled()", "attr.aria-expanded": "state() === \"open\"", "attr.aria-controls": "ariaControls()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnCollapsibleTrigger]',
                    standalone: true,
                    host: {
                        '[attr.data-state]': 'state()',
                        '[attr.disabled]': 'disabled()',
                        '[attr.aria-expanded]': 'state() === "open"',
                        '[attr.aria-controls]': 'ariaControls()',
                        '(click)': 'toggleCollapsible()',
                    },
                }]
        }], ctorParameters: () => [] });

const BrnCollapsibleImports = [
    BrnCollapsibleComponent,
    BrnCollapsibleTriggerDirective,
    BrnCollapsibleContentComponent,
];
class BrnCollapsibleModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleModule, imports: [BrnCollapsibleComponent,
            BrnCollapsibleTriggerDirective,
            BrnCollapsibleContentComponent], exports: [BrnCollapsibleComponent,
            BrnCollapsibleTriggerDirective,
            BrnCollapsibleContentComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnCollapsibleModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnCollapsibleImports],
                    exports: [...BrnCollapsibleImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnCollapsibleComponent, BrnCollapsibleContentComponent, BrnCollapsibleImports, BrnCollapsibleModule, BrnCollapsibleTriggerDirective };
//# sourceMappingURL=spartan-ng-ui-collapsible-brain.mjs.map
