import { ChangeDetectorRef, ElementRef, inject } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { debounceTime, filter, fromEvent, merge, of, switchMap, tap } from 'rxjs';
export function rxHostListener(event) {
    const cdr = inject(ChangeDetectorRef);
    // Listen to event
    return fromEvent(inject(ElementRef).nativeElement, event).pipe(debounceTime(0), tap(() => cdr.markForCheck()), // Trigger CD like @HostListener would
    takeUntilDestroyed());
}
export function rxHostBinding(prop, stream) {
    // Listen to the stream
    stream
        .pipe(takeUntilDestroyed()) // Unsubscribe
        .subscribe(process(inject(ElementRef).nativeElement, prop)); // Process
}
function process(element, prop) {
    const isAttr = prop.startsWith('attr.');
    const isStyle = prop.startsWith('style.');
    const isClass = prop.startsWith('class.');
    const [key, unit = ''] = prop.replace('attr.', '').replace('style.', '').replace('class.', '').split('.');
    return (value) => {
        const parsed = unit && value != null ? `${value}${unit}` : value;
        if (isAttr) {
            if (value == null) {
                element.removeAttribute(key);
            }
            else {
                element.setAttribute(key, String(parsed));
            }
        }
        else if (isClass) {
            element.classList.toggle(key, !!value);
        }
        else if (isStyle) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            element.style[key] = parsed;
        }
        else {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            element[key] = parsed;
        }
    };
}
export function rxHostPressedListener() {
    return merge(rxHostListener('click'), rxHostListener('keyup').pipe(switchMap((x) => {
        return x.code === 'Space' || x.code === 'Enter' ? of(true) : of(null);
    }), filter(Boolean))).pipe(debounceTime(0));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicngtaG9zdC1pbnRlZ3JhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvY29yZS9zcmMvbGliL2JyYWluL3J4LWhvc3QtaW50ZWdyYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBbUIsTUFBTSxNQUFNLENBQUM7QUFFbkcsTUFBTSxVQUFVLGNBQWMsQ0FBa0IsS0FBYTtJQUM1RCxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUV0QyxrQkFBa0I7SUFDbEIsT0FBTyxTQUFTLENBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQ2hFLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDZixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsc0NBQXNDO0lBQ3JFLGtCQUFrQixFQUFFLENBQ3BCLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBSSxJQUFZLEVBQUUsTUFBcUI7SUFDbkUsdUJBQXVCO0lBQ3ZCLE1BQU07U0FDSixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLGNBQWM7U0FDekMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVO0FBQ3pFLENBQUM7QUFFRCxTQUFTLE9BQU8sQ0FBSSxPQUFvQixFQUFFLElBQVk7SUFDckQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN4QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzFDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUUxRyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDaEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFakUsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNaLElBQUksS0FBSyxJQUFJLElBQUksRUFBRSxDQUFDO2dCQUNuQixPQUFPLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzlCLENBQUM7aUJBQU0sQ0FBQztnQkFDUCxPQUFPLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMzQyxDQUFDO1FBQ0YsQ0FBQzthQUFNLElBQUksT0FBTyxFQUFFLENBQUM7WUFDcEIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDO2FBQU0sSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUNwQiw2REFBNkQ7WUFDN0QsYUFBYTtZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQzdCLENBQUM7YUFBTSxDQUFDO1lBQ1AsNkRBQTZEO1lBQzdELGFBQWE7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7SUFDRixDQUFDLENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLHFCQUFxQjtJQUNwQyxPQUFPLEtBQUssQ0FDWCxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQ3ZCLGNBQWMsQ0FBZ0IsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUMxQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNmLE9BQU8sQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLENBQUMsQ0FBQyxFQUNGLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDZixDQUNELENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRWxlbWVudFJlZiwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0YWtlVW50aWxEZXN0cm95ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUsIGZpbHRlciwgZnJvbUV2ZW50LCBtZXJnZSwgb2YsIHN3aXRjaE1hcCwgdGFwLCB0eXBlIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJ4SG9zdExpc3RlbmVyPFQgZXh0ZW5kcyBFdmVudD4oZXZlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8VD4ge1xuXHRjb25zdCBjZHIgPSBpbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuXG5cdC8vIExpc3RlbiB0byBldmVudFxuXHRyZXR1cm4gZnJvbUV2ZW50PFQ+KGluamVjdChFbGVtZW50UmVmKS5uYXRpdmVFbGVtZW50LCBldmVudCkucGlwZShcblx0XHRkZWJvdW5jZVRpbWUoMCksXG5cdFx0dGFwKCgpID0+IGNkci5tYXJrRm9yQ2hlY2soKSksIC8vIFRyaWdnZXIgQ0QgbGlrZSBASG9zdExpc3RlbmVyIHdvdWxkXG5cdFx0dGFrZVVudGlsRGVzdHJveWVkKCksIC8vIFVuc3Vic2NyaWJlXG5cdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByeEhvc3RCaW5kaW5nPFQ+KHByb3A6IHN0cmluZywgc3RyZWFtOiBPYnNlcnZhYmxlPFQ+KSB7XG5cdC8vIExpc3RlbiB0byB0aGUgc3RyZWFtXG5cdHN0cmVhbVxuXHRcdC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCgpKSAvLyBVbnN1YnNjcmliZVxuXHRcdC5zdWJzY3JpYmUocHJvY2VzcyhpbmplY3QoRWxlbWVudFJlZikubmF0aXZlRWxlbWVudCwgcHJvcCkpOyAvLyBQcm9jZXNzXG59XG5cbmZ1bmN0aW9uIHByb2Nlc3M8VD4oZWxlbWVudDogSFRNTEVsZW1lbnQsIHByb3A6IHN0cmluZyk6ICh2YWx1ZTogVCkgPT4gdm9pZCB7XG5cdGNvbnN0IGlzQXR0ciA9IHByb3Auc3RhcnRzV2l0aCgnYXR0ci4nKTtcblx0Y29uc3QgaXNTdHlsZSA9IHByb3Auc3RhcnRzV2l0aCgnc3R5bGUuJyk7XG5cdGNvbnN0IGlzQ2xhc3MgPSBwcm9wLnN0YXJ0c1dpdGgoJ2NsYXNzLicpO1xuXHRjb25zdCBba2V5LCB1bml0ID0gJyddID0gcHJvcC5yZXBsYWNlKCdhdHRyLicsICcnKS5yZXBsYWNlKCdzdHlsZS4nLCAnJykucmVwbGFjZSgnY2xhc3MuJywgJycpLnNwbGl0KCcuJyk7XG5cblx0cmV0dXJuICh2YWx1ZSkgPT4ge1xuXHRcdGNvbnN0IHBhcnNlZCA9IHVuaXQgJiYgdmFsdWUgIT0gbnVsbCA/IGAke3ZhbHVlfSR7dW5pdH1gIDogdmFsdWU7XG5cblx0XHRpZiAoaXNBdHRyKSB7XG5cdFx0XHRpZiAodmFsdWUgPT0gbnVsbCkge1xuXHRcdFx0XHRlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCBTdHJpbmcocGFyc2VkKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChpc0NsYXNzKSB7XG5cdFx0XHRlbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoa2V5LCAhIXZhbHVlKTtcblx0XHR9IGVsc2UgaWYgKGlzU3R5bGUpIHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcblx0XHRcdC8vIEB0cy1pZ25vcmVcblx0XHRcdGVsZW1lbnQuc3R5bGVba2V5XSA9IHBhcnNlZDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0ZWxlbWVudFtrZXldID0gcGFyc2VkO1xuXHRcdH1cblx0fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ4SG9zdFByZXNzZWRMaXN0ZW5lcigpIHtcblx0cmV0dXJuIG1lcmdlKFxuXHRcdHJ4SG9zdExpc3RlbmVyKCdjbGljaycpLFxuXHRcdHJ4SG9zdExpc3RlbmVyPEtleWJvYXJkRXZlbnQ+KCdrZXl1cCcpLnBpcGUoXG5cdFx0XHRzd2l0Y2hNYXAoKHgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHguY29kZSA9PT0gJ1NwYWNlJyB8fCB4LmNvZGUgPT09ICdFbnRlcicgPyBvZih0cnVlKSA6IG9mKG51bGwpO1xuXHRcdFx0fSksXG5cdFx0XHRmaWx0ZXIoQm9vbGVhbiksXG5cdFx0KSxcblx0KS5waXBlKGRlYm91bmNlVGltZSgwKSk7XG59XG4iXX0=