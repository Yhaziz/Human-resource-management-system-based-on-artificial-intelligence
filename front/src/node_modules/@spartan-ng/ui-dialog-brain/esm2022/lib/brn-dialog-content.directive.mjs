import { Directive, Input, TemplateRef, computed, inject } from '@angular/core';
import { provideExposesStateProviderExisting } from '@spartan-ng/ui-core';
import { BrnDialogRef } from './brn-dialog-ref';
import { BrnDialogComponent } from './brn-dialog.component';
import * as i0 from "@angular/core";
export class BrnDialogContentDirective {
    constructor() {
        this._brnDialog = inject(BrnDialogComponent, { optional: true });
        this._brnDialogRef = inject(BrnDialogRef, { optional: true });
        this._template = inject(TemplateRef);
        this.state = computed(() => this._brnDialog?.state() ?? this._brnDialogRef?.state() ?? 'closed');
        if (!this._brnDialog)
            return;
        this._brnDialog.registerTemplate(this._template);
    }
    set class(newClass) {
        if (!this._brnDialog)
            return;
        this._brnDialog.setPanelClass(newClass);
    }
    set context(context) {
        if (!this._brnDialog)
            return;
        this._brnDialog.setContext(context);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnDialogContentDirective, isStandalone: true, selector: "[brnDialogContent]", inputs: { class: "class", context: "context" }, providers: [provideExposesStateProviderExisting(() => BrnDialogContentDirective)], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnDialogContent]',
                    standalone: true,
                    providers: [provideExposesStateProviderExisting(() => BrnDialogContentDirective)],
                }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: Input
            }], context: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWRpYWxvZy1jb250ZW50LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvZGlhbG9nL2JyYWluL3NyYy9saWIvYnJuLWRpYWxvZy1jb250ZW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBTzVELE1BQU0sT0FBTyx5QkFBeUI7SUFNckM7UUFMaUIsZUFBVSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzVELGtCQUFhLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELGNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsVUFBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssRUFBRSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxFQUFFLElBQUksUUFBUSxDQUFDLENBQUM7UUFHM0csSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFDSSxLQUFLLENBQUMsUUFBbUM7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVO1lBQUUsT0FBTztRQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsSUFDSSxPQUFPLENBQUMsT0FBVTtRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPO1FBQzdCLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3JDLENBQUM7OEdBckJXLHlCQUF5QjtrR0FBekIseUJBQXlCLGlIQUYxQixDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLENBQUM7OzJGQUVyRSx5QkFBeUI7a0JBTHJDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLFNBQVMsRUFBRSxDQUFDLG1DQUFtQyxDQUFDLEdBQUcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO2lCQUNqRjt3REFhSSxLQUFLO3NCQURSLEtBQUs7Z0JBT0YsT0FBTztzQkFEVixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgVGVtcGxhdGVSZWYsIGNvbXB1dGVkLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHByb3ZpZGVFeHBvc2VzU3RhdGVQcm92aWRlckV4aXN0aW5nIH0gZnJvbSAnQHNwYXJ0YW4tbmcvdWktY29yZSc7XG5pbXBvcnQgeyBCcm5EaWFsb2dSZWYgfSBmcm9tICcuL2Jybi1kaWFsb2ctcmVmJztcbmltcG9ydCB7IEJybkRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vYnJuLWRpYWxvZy5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbYnJuRGlhbG9nQ29udGVudF0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRwcm92aWRlcnM6IFtwcm92aWRlRXhwb3Nlc1N0YXRlUHJvdmlkZXJFeGlzdGluZygoKSA9PiBCcm5EaWFsb2dDb250ZW50RGlyZWN0aXZlKV0sXG59KVxuZXhwb3J0IGNsYXNzIEJybkRpYWxvZ0NvbnRlbnREaXJlY3RpdmU8VD4ge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9icm5EaWFsb2cgPSBpbmplY3QoQnJuRGlhbG9nQ29tcG9uZW50LCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuXHRwcml2YXRlIHJlYWRvbmx5IF9icm5EaWFsb2dSZWYgPSBpbmplY3QoQnJuRGlhbG9nUmVmLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuXHRwcml2YXRlIHJlYWRvbmx5IF90ZW1wbGF0ZSA9IGluamVjdChUZW1wbGF0ZVJlZik7XG5cdHB1YmxpYyByZWFkb25seSBzdGF0ZSA9IGNvbXB1dGVkKCgpID0+IHRoaXMuX2JybkRpYWxvZz8uc3RhdGUoKSA/PyB0aGlzLl9icm5EaWFsb2dSZWY/LnN0YXRlKCkgPz8gJ2Nsb3NlZCcpO1xuXG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdGlmICghdGhpcy5fYnJuRGlhbG9nKSByZXR1cm47XG5cdFx0dGhpcy5fYnJuRGlhbG9nLnJlZ2lzdGVyVGVtcGxhdGUodGhpcy5fdGVtcGxhdGUpO1xuXHR9XG5cblx0QElucHV0KClcblx0c2V0IGNsYXNzKG5ld0NsYXNzOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSB7XG5cdFx0aWYgKCF0aGlzLl9icm5EaWFsb2cpIHJldHVybjtcblx0XHR0aGlzLl9icm5EaWFsb2cuc2V0UGFuZWxDbGFzcyhuZXdDbGFzcyk7XG5cdH1cblxuXHRASW5wdXQoKVxuXHRzZXQgY29udGV4dChjb250ZXh0OiBUKSB7XG5cdFx0aWYgKCF0aGlzLl9icm5EaWFsb2cpIHJldHVybjtcblx0XHR0aGlzLl9icm5EaWFsb2cuc2V0Q29udGV4dChjb250ZXh0KTtcblx0fVxufVxuIl19