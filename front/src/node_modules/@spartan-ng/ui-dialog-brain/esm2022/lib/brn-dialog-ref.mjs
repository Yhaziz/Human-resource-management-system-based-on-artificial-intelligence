import { Subject, take } from 'rxjs';
import { cssClassesToArray } from './brn-dialog.service';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export class BrnDialogRef {
    get open() {
        return this.state() === 'open';
    }
    constructor(_cdkDialogRef, _open, state, dialogId, _options) {
        this._cdkDialogRef = _cdkDialogRef;
        this._open = _open;
        this.state = state;
        this.dialogId = dialogId;
        this._options = _options;
        this._closing$ = new Subject();
        this.closing$ = this._closing$.asObservable();
        this.closed$ = this._cdkDialogRef.closed.pipe(take(1));
    }
    close(result, delay = this._options?.closeDelay ?? 0) {
        if (!this.open || this._options?.disableClose)
            return;
        this._closing$.next();
        this._open.set(false);
        if (this._previousTimeout) {
            clearTimeout(this._previousTimeout);
        }
        this._previousTimeout = setTimeout(() => {
            this._cdkDialogRef.close(result);
        }, delay);
    }
    setPanelClass(paneClass) {
        this._cdkDialogRef.config.panelClass = cssClassesToArray(paneClass);
    }
    setOverlayClass(overlayClass) {
        this._cdkDialogRef.config.backdropClass = cssClassesToArray(overlayClass);
    }
    setAriaDescribedBy(ariaDescribedBy) {
        this._cdkDialogRef.config.ariaDescribedBy = ariaDescribedBy;
    }
    setAriaLabelledBy(ariaLabelledBy) {
        this._cdkDialogRef.config.ariaLabelledBy = ariaLabelledBy;
    }
    setAriaLabel(ariaLabel) {
        this._cdkDialogRef.config.ariaLabel = ariaLabel;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWRpYWxvZy1yZWYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpL2RpYWxvZy9icmFpbi9zcmMvbGliL2Jybi1kaWFsb2ctcmVmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR3JDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXpELDhEQUE4RDtBQUM5RCxNQUFNLE9BQU8sWUFBWTtJQVF4QixJQUFXLElBQUk7UUFDZCxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxNQUFNLENBQUM7SUFDaEMsQ0FBQztJQUVELFlBQ2tCLGFBQXNDLEVBQ3RDLEtBQThCLEVBQy9CLEtBQTZCLEVBQzdCLFFBQWdCLEVBQ2YsUUFBMkI7UUFKM0Isa0JBQWEsR0FBYixhQUFhLENBQXlCO1FBQ3RDLFVBQUssR0FBTCxLQUFLLENBQXlCO1FBQy9CLFVBQUssR0FBTCxLQUFLLENBQXdCO1FBQzdCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDZixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQWhCNUIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFDakMsYUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFekMsWUFBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQWMvRCxDQUFDO0lBRUcsS0FBSyxDQUFDLE1BQXFCLEVBQUUsUUFBZ0IsSUFBSSxDQUFDLFFBQVEsRUFBRSxVQUFVLElBQUksQ0FBQztRQUNqRixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLFlBQVk7WUFBRSxPQUFPO1FBRXRELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUMzQixZQUFZLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDckMsQ0FBQztRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ3ZDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNYLENBQUM7SUFFTSxhQUFhLENBQUMsU0FBb0M7UUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTSxlQUFlLENBQUMsWUFBdUM7UUFDN0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsYUFBYSxHQUFHLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFTSxrQkFBa0IsQ0FBQyxlQUEwQztRQUNuRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO0lBQzdELENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxjQUF5QztRQUNqRSxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO0lBQzNELENBQUM7SUFFTSxZQUFZLENBQUMsU0FBb0M7UUFDdkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztJQUNqRCxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9kaWFsb2cnO1xuaW1wb3J0IHR5cGUgeyBTaWduYWwsIFdyaXRhYmxlU2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0LCB0YWtlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgdHlwZSB7IEJybkRpYWxvZ09wdGlvbnMgfSBmcm9tICcuL2Jybi1kaWFsb2ctb3B0aW9ucyc7XG5pbXBvcnQgdHlwZSB7IEJybkRpYWxvZ1N0YXRlIH0gZnJvbSAnLi9icm4tZGlhbG9nLXN0YXRlJztcbmltcG9ydCB7IGNzc0NsYXNzZXNUb0FycmF5IH0gZnJvbSAnLi9icm4tZGlhbG9nLnNlcnZpY2UnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZXhwb3J0IGNsYXNzIEJybkRpYWxvZ1JlZjxEaWFsb2dSZXN1bHQgPSBhbnk+IHtcblx0cHJpdmF0ZSByZWFkb25seSBfY2xvc2luZyQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXHRwdWJsaWMgcmVhZG9ubHkgY2xvc2luZyQgPSB0aGlzLl9jbG9zaW5nJC5hc09ic2VydmFibGUoKTtcblxuXHRwdWJsaWMgcmVhZG9ubHkgY2xvc2VkJCA9IHRoaXMuX2Nka0RpYWxvZ1JlZi5jbG9zZWQucGlwZSh0YWtlKDEpKTtcblxuXHRwcml2YXRlIF9wcmV2aW91c1RpbWVvdXQ6IFJldHVyblR5cGU8dHlwZW9mIHNldFRpbWVvdXQ+IHwgdW5kZWZpbmVkO1xuXG5cdHB1YmxpYyBnZXQgb3BlbigpIHtcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZSgpID09PSAnb3Blbic7XG5cdH1cblxuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIHJlYWRvbmx5IF9jZGtEaWFsb2dSZWY6IERpYWxvZ1JlZjxEaWFsb2dSZXN1bHQ+LFxuXHRcdHByaXZhdGUgcmVhZG9ubHkgX29wZW46IFdyaXRhYmxlU2lnbmFsPGJvb2xlYW4+LFxuXHRcdHB1YmxpYyByZWFkb25seSBzdGF0ZTogU2lnbmFsPEJybkRpYWxvZ1N0YXRlPixcblx0XHRwdWJsaWMgcmVhZG9ubHkgZGlhbG9nSWQ6IG51bWJlcixcblx0XHRwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zPzogQnJuRGlhbG9nT3B0aW9ucyxcblx0KSB7fVxuXG5cdHB1YmxpYyBjbG9zZShyZXN1bHQ/OiBEaWFsb2dSZXN1bHQsIGRlbGF5OiBudW1iZXIgPSB0aGlzLl9vcHRpb25zPy5jbG9zZURlbGF5ID8/IDApIHtcblx0XHRpZiAoIXRoaXMub3BlbiB8fCB0aGlzLl9vcHRpb25zPy5kaXNhYmxlQ2xvc2UpIHJldHVybjtcblxuXHRcdHRoaXMuX2Nsb3NpbmckLm5leHQoKTtcblx0XHR0aGlzLl9vcGVuLnNldChmYWxzZSk7XG5cblx0XHRpZiAodGhpcy5fcHJldmlvdXNUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5fcHJldmlvdXNUaW1lb3V0KTtcblx0XHR9XG5cblx0XHR0aGlzLl9wcmV2aW91c1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRoaXMuX2Nka0RpYWxvZ1JlZi5jbG9zZShyZXN1bHQpO1xuXHRcdH0sIGRlbGF5KTtcblx0fVxuXG5cdHB1YmxpYyBzZXRQYW5lbENsYXNzKHBhbmVDbGFzczogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xuXHRcdHRoaXMuX2Nka0RpYWxvZ1JlZi5jb25maWcucGFuZWxDbGFzcyA9IGNzc0NsYXNzZXNUb0FycmF5KHBhbmVDbGFzcyk7XG5cdH1cblxuXHRwdWJsaWMgc2V0T3ZlcmxheUNsYXNzKG92ZXJsYXlDbGFzczogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xuXHRcdHRoaXMuX2Nka0RpYWxvZ1JlZi5jb25maWcuYmFja2Ryb3BDbGFzcyA9IGNzc0NsYXNzZXNUb0FycmF5KG92ZXJsYXlDbGFzcyk7XG5cdH1cblxuXHRwdWJsaWMgc2V0QXJpYURlc2NyaWJlZEJ5KGFyaWFEZXNjcmliZWRCeTogc3RyaW5nIHwgbnVsbCB8IHVuZGVmaW5lZCkge1xuXHRcdHRoaXMuX2Nka0RpYWxvZ1JlZi5jb25maWcuYXJpYURlc2NyaWJlZEJ5ID0gYXJpYURlc2NyaWJlZEJ5O1xuXHR9XG5cblx0cHVibGljIHNldEFyaWFMYWJlbGxlZEJ5KGFyaWFMYWJlbGxlZEJ5OiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKSB7XG5cdFx0dGhpcy5fY2RrRGlhbG9nUmVmLmNvbmZpZy5hcmlhTGFiZWxsZWRCeSA9IGFyaWFMYWJlbGxlZEJ5O1xuXHR9XG5cblx0cHVibGljIHNldEFyaWFMYWJlbChhcmlhTGFiZWw6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQpIHtcblx0XHR0aGlzLl9jZGtEaWFsb2dSZWYuY29uZmlnLmFyaWFMYWJlbCA9IGFyaWFMYWJlbDtcblx0fVxufVxuIl19