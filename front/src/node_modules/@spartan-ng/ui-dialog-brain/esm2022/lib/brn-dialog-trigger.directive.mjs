import { Directive, Input, inject, input, signal } from '@angular/core';
import { BrnDialogRef } from './brn-dialog-ref';
import { BrnDialogComponent } from './brn-dialog.component';
import * as i0 from "@angular/core";
let idSequence = 0;
export class BrnDialogTriggerDirective {
    constructor() {
        this._brnDialog = inject(BrnDialogComponent, { optional: true });
        this._brnDialogRef = inject(BrnDialogRef, { optional: true });
        this.id = input(`brn-dialog-trigger-${idSequence++}`);
        this.state = this._brnDialogRef?.state ?? signal('closed');
        this.dialogId = `brn-dialog-${this._brnDialogRef?.dialogId ?? idSequence++}`;
    }
    set brnDialogTriggerFor(brnDialog) {
        this._brnDialog = brnDialog;
    }
    open() {
        this._brnDialog?.open();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.5", type: BrnDialogTriggerDirective, isStandalone: true, selector: "button[brnDialogTrigger],button[brnDialogTriggerFor]", inputs: { id: { classPropertyName: "id", publicName: "id", isSignal: true, isRequired: false, transformFunction: null }, brnDialogTriggerFor: { classPropertyName: "brnDialogTriggerFor", publicName: "brnDialogTriggerFor", isSignal: false, isRequired: false, transformFunction: null } }, host: { attributes: { "aria-haspopup": "dialog" }, listeners: { "click": "open()" }, properties: { "id": "id()", "attr.aria-expanded": "state() === 'open' ? 'true': 'false'", "attr.data-state": "state()", "attr.aria-controls": "dialogId" } }, exportAs: ["brnDialogTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnDialogTrigger],button[brnDialogTriggerFor]',
                    standalone: true,
                    host: {
                        '[id]': 'id()',
                        '(click)': 'open()',
                        'aria-haspopup': 'dialog',
                        '[attr.aria-expanded]': "state() === 'open' ? 'true': 'false'",
                        '[attr.data-state]': 'state()',
                        '[attr.aria-controls]': 'dialogId',
                    },
                    exportAs: 'brnDialogTrigger',
                }]
        }], propDecorators: { brnDialogTriggerFor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWRpYWxvZy10cmlnZ2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvZGlhbG9nL2JyYWluL3NyYy9saWIvYnJuLWRpYWxvZy10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBRTVELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQWVuQixNQUFNLE9BQU8seUJBQXlCO0lBYnRDO1FBY1csZUFBVSxHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELGtCQUFhLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTVELE9BQUUsR0FBRyxLQUFLLENBQUMsc0JBQXNCLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqRCxVQUFLLEdBQTJCLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM5RSxhQUFRLEdBQUcsY0FBYyxJQUFJLENBQUMsYUFBYSxFQUFFLFFBQVEsSUFBSSxVQUFVLEVBQUUsRUFBRSxDQUFDO0tBVXhGO0lBUkEsSUFDSSxtQkFBbUIsQ0FBQyxTQUE2QjtRQUNwRCxJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSTtRQUNILElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzs4R0FoQlcseUJBQXlCO2tHQUF6Qix5QkFBeUI7OzJGQUF6Qix5QkFBeUI7a0JBYnJDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHNEQUFzRDtvQkFDaEUsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRTt3QkFDTCxNQUFNLEVBQUUsTUFBTTt3QkFDZCxTQUFTLEVBQUUsUUFBUTt3QkFDbkIsZUFBZSxFQUFFLFFBQVE7d0JBQ3pCLHNCQUFzQixFQUFFLHNDQUFzQzt3QkFDOUQsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIsc0JBQXNCLEVBQUUsVUFBVTtxQkFDbEM7b0JBQ0QsUUFBUSxFQUFFLGtCQUFrQjtpQkFDNUI7OEJBV0ksbUJBQW1CO3NCQUR0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgaW5qZWN0LCBpbnB1dCwgc2lnbmFsLCB0eXBlIFNpZ25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJuRGlhbG9nUmVmIH0gZnJvbSAnLi9icm4tZGlhbG9nLXJlZic7XG5pbXBvcnQgdHlwZSB7IEJybkRpYWxvZ1N0YXRlIH0gZnJvbSAnLi9icm4tZGlhbG9nLXN0YXRlJztcbmltcG9ydCB7IEJybkRpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vYnJuLWRpYWxvZy5jb21wb25lbnQnO1xuXG5sZXQgaWRTZXF1ZW5jZSA9IDA7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ2J1dHRvblticm5EaWFsb2dUcmlnZ2VyXSxidXR0b25bYnJuRGlhbG9nVHJpZ2dlckZvcl0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRob3N0OiB7XG5cdFx0J1tpZF0nOiAnaWQoKScsXG5cdFx0JyhjbGljayknOiAnb3BlbigpJyxcblx0XHQnYXJpYS1oYXNwb3B1cCc6ICdkaWFsb2cnLFxuXHRcdCdbYXR0ci5hcmlhLWV4cGFuZGVkXSc6IFwic3RhdGUoKSA9PT0gJ29wZW4nID8gJ3RydWUnOiAnZmFsc2UnXCIsXG5cdFx0J1thdHRyLmRhdGEtc3RhdGVdJzogJ3N0YXRlKCknLFxuXHRcdCdbYXR0ci5hcmlhLWNvbnRyb2xzXSc6ICdkaWFsb2dJZCcsXG5cdH0sXG5cdGV4cG9ydEFzOiAnYnJuRGlhbG9nVHJpZ2dlcicsXG59KVxuZXhwb3J0IGNsYXNzIEJybkRpYWxvZ1RyaWdnZXJEaXJlY3RpdmUge1xuXHRwcm90ZWN0ZWQgX2JybkRpYWxvZyA9IGluamVjdChCcm5EaWFsb2dDb21wb25lbnQsIHsgb3B0aW9uYWw6IHRydWUgfSk7XG5cdHByb3RlY3RlZCByZWFkb25seSBfYnJuRGlhbG9nUmVmID0gaW5qZWN0KEJybkRpYWxvZ1JlZiwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcblxuXHRwdWJsaWMgcmVhZG9ubHkgaWQgPSBpbnB1dChgYnJuLWRpYWxvZy10cmlnZ2VyLSR7aWRTZXF1ZW5jZSsrfWApO1xuXG5cdHB1YmxpYyByZWFkb25seSBzdGF0ZTogU2lnbmFsPEJybkRpYWxvZ1N0YXRlPiA9IHRoaXMuX2JybkRpYWxvZ1JlZj8uc3RhdGUgPz8gc2lnbmFsKCdjbG9zZWQnKTtcblx0cHVibGljIHJlYWRvbmx5IGRpYWxvZ0lkID0gYGJybi1kaWFsb2ctJHt0aGlzLl9icm5EaWFsb2dSZWY/LmRpYWxvZ0lkID8/IGlkU2VxdWVuY2UrK31gO1xuXG5cdEBJbnB1dCgpXG5cdHNldCBicm5EaWFsb2dUcmlnZ2VyRm9yKGJybkRpYWxvZzogQnJuRGlhbG9nQ29tcG9uZW50KSB7XG5cdFx0dGhpcy5fYnJuRGlhbG9nID0gYnJuRGlhbG9nO1xuXHR9XG5cblx0b3BlbigpIHtcblx0XHR0aGlzLl9icm5EaWFsb2c/Lm9wZW4oKTtcblx0fVxufVxuIl19