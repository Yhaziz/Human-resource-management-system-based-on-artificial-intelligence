import { OverlayPositionBuilder, ScrollStrategyOptions, } from '@angular/cdk/overlay';
import { ChangeDetectionStrategy, Component, EventEmitter, Injector, Input, Output, ViewContainerRef, ViewEncapsulation, booleanAttribute, computed, effect, inject, numberAttribute, runInInjectionContext, signal, } from '@angular/core';
import { take } from 'rxjs';
import { DEFAULT_BRN_DIALOG_OPTIONS } from './brn-dialog-options';
import { BrnDialogService } from './brn-dialog.service';
import * as i0 from "@angular/core";
export class BrnDialogComponent {
    constructor() {
        this._dialogService = inject(BrnDialogService);
        this._vcr = inject(ViewContainerRef);
        this.positionBuilder = inject(OverlayPositionBuilder);
        this.ssos = inject(ScrollStrategyOptions);
        this._injector = inject(Injector);
        this._context = {};
        this._options = {
            ...DEFAULT_BRN_DIALOG_OPTIONS,
        };
        this._dialogRef = signal(undefined);
        this.state = computed(() => this._dialogRef()?.state() ?? 'closed');
        this.closed = new EventEmitter();
        this.stateChanged = new EventEmitter();
    }
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set newState(state) {
        if (state === 'open') {
            this.open();
        }
        if (state === 'closed') {
            this.close(this._options['closeDelay']);
        }
    }
    set role(role) {
        this._options['role'] = role;
    }
    set hasBackdrop(hasBackdrop) {
        this._options['hasBackdrop'] = hasBackdrop;
    }
    set positionStrategy(positionStrategy) {
        this._options['positionStrategy'] = positionStrategy;
    }
    set scrollStrategy(scrollStrategy) {
        if (scrollStrategy === 'close') {
            this._options['scrollStrategy'] = this.ssos.close();
        }
        else if (scrollStrategy === 'reposition') {
            this._options['scrollStrategy'] = this.ssos.reposition();
        }
        else {
            this._options['scrollStrategy'] = scrollStrategy;
        }
    }
    set restoreFocus(restoreFocus) {
        this._options['restoreFocus'] = restoreFocus;
    }
    set closeOnOutsidePointerEvents(closeOnOutsidePointerEvents) {
        this._options['closeOnOutsidePointerEvents'] = closeOnOutsidePointerEvents;
    }
    set closeOnBackdropClick(closeOnBackdropClick) {
        this._options['closeOnBackdropClick'] = closeOnBackdropClick;
    }
    set attachTo(attachTo) {
        this._options['attachTo'] = attachTo;
    }
    set attachPositions(attachPositions) {
        this._options['attachPositions'] = attachPositions;
    }
    set autoFocus(autoFocus) {
        this._options['autoFocus'] = autoFocus;
    }
    set closeDelay(closeDelay) {
        this._options['closeDelay'] = closeDelay;
    }
    set disableClose(disableClose) {
        this._options['disableClose'] = disableClose;
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set ariaDescribedBy(ariaDescribedBy) {
        this.setAriaDescribedBy(ariaDescribedBy);
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set ariaLabelledBy(ariaLabelledBy) {
        this.setAriaLabelledBy(ariaLabelledBy);
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set ariaLabel(ariaLabel) {
        this.setAriaLabel(ariaLabel);
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set ariaModal(isModal) {
        this.setAriaModal(isModal);
    }
    open() {
        if (!this._contentTemplate || this._dialogRef())
            return;
        this._dialogStateEffectRef?.destroy();
        const dialogRef = this._dialogService.open(this._contentTemplate, this._vcr, this._context, this._options);
        this._dialogRef.set(dialogRef);
        runInInjectionContext(this._injector, () => {
            this._dialogStateEffectRef = effect(() => this.stateChanged.emit(dialogRef.state()));
        });
        dialogRef.closed$.pipe(take(1)).subscribe((result) => {
            this._dialogRef.set(undefined);
            this.closed.emit(result);
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    close(result, delay) {
        this._dialogRef()?.close(result, delay ?? this._options.closeDelay);
    }
    registerTemplate(template) {
        this._contentTemplate = template;
    }
    setOverlayClass(overlayClass) {
        this._options['backdropClass'] = overlayClass ?? '';
        this._dialogRef()?.setOverlayClass(overlayClass);
    }
    setPanelClass(panelClass) {
        this._options['panelClass'] = panelClass ?? '';
        this._dialogRef()?.setPanelClass(panelClass);
    }
    setContext(context) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        this._context = { ...this._context, ...context };
    }
    setAriaDescribedBy(ariaDescribedBy) {
        this._options = { ...this._options, ariaDescribedBy };
        this._dialogRef()?.setAriaDescribedBy(ariaDescribedBy);
    }
    setAriaLabelledBy(ariaLabelledBy) {
        this._options = { ...this._options, ariaLabelledBy };
        this._dialogRef()?.setAriaLabelledBy(ariaLabelledBy);
    }
    setAriaLabel(ariaLabel) {
        this._options = { ...this._options, ariaLabel };
        this._dialogRef()?.setAriaLabel(ariaLabel);
    }
    setAriaModal(ariaModal) {
        this._options = { ...this._options, ariaModal };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.5", type: BrnDialogComponent, isStandalone: true, selector: "brn-dialog", inputs: { newState: ["state", "newState"], role: "role", hasBackdrop: ["hasBackdrop", "hasBackdrop", booleanAttribute], positionStrategy: "positionStrategy", scrollStrategy: "scrollStrategy", restoreFocus: "restoreFocus", closeOnOutsidePointerEvents: ["closeOnOutsidePointerEvents", "closeOnOutsidePointerEvents", booleanAttribute], closeOnBackdropClick: ["closeOnBackdropClick", "closeOnBackdropClick", booleanAttribute], attachTo: "attachTo", attachPositions: "attachPositions", autoFocus: "autoFocus", closeDelay: ["closeDelay", "closeDelay", numberAttribute], disableClose: ["disableClose", "disableClose", booleanAttribute], ariaDescribedBy: ["aria-describedby", "ariaDescribedBy"], ariaLabelledBy: ["aria-labelledby", "ariaLabelledBy"], ariaLabel: ["aria-label", "ariaLabel"], ariaModal: ["aria-modal", "ariaModal", booleanAttribute] }, outputs: { closed: "closed", stateChanged: "stateChanged" }, exportAs: ["brnDialog"], ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-dialog',
                    standalone: true,
                    template: `
		<ng-content />
	`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'brnDialog',
                }]
        }], propDecorators: { closed: [{
                type: Output
            }], stateChanged: [{
                type: Output
            }], newState: [{
                type: Input,
                args: ['state']
            }], role: [{
                type: Input
            }], hasBackdrop: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], positionStrategy: [{
                type: Input
            }], scrollStrategy: [{
                type: Input
            }], restoreFocus: [{
                type: Input
            }], closeOnOutsidePointerEvents: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], closeOnBackdropClick: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], attachTo: [{
                type: Input
            }], attachPositions: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], closeDelay: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], disableClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], ariaDescribedBy: [{
                type: Input,
                args: ['aria-describedby']
            }], ariaLabelledBy: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaModal: [{
                type: Input,
                args: [{
                        alias: 'aria-modal',
                        transform: booleanAttribute,
                    }]
            }] } });
//# sourceMappingURL=data:application/json;base64,