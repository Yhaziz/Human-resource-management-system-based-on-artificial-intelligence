import { DIALOG_DATA, Dialog } from '@angular/cdk/dialog';
import { OverlayPositionBuilder, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { Injectable, Injector, RendererFactory2, computed, effect, inject, runInInjectionContext, signal, } from '@angular/core';
import { Subject, filter, takeUntil } from 'rxjs';
import { BrnDialogRef } from './brn-dialog-ref';
import * as i0 from "@angular/core";
let dialogSequence = 0;
export const cssClassesToArray = (classes, defaultClass = '') => {
    if (typeof classes === 'string') {
        const splitClasses = classes.trim().split(' ');
        if (splitClasses.length === 0) {
            return [defaultClass];
        }
        return splitClasses;
    }
    return classes ?? [];
};
/** @deprecated `injectBrnDialogCtx` will no longer be supported once components are stable. Use `injectBrnDialogContext` instead.  */
export const injectBrnDialogCtx = () => {
    return inject(DIALOG_DATA);
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const injectBrnDialogContext = (options = {}) => {
    return inject(DIALOG_DATA, options);
};
export class BrnDialogService {
    constructor() {
        this._cdkDialog = inject(Dialog);
        this._rendererFactory = inject(RendererFactory2);
        this._renderer = this._rendererFactory.createRenderer(null, null);
        this._positionBuilder = inject(OverlayPositionBuilder);
        this._sso = inject(ScrollStrategyOptions);
        this._injector = inject(Injector);
    }
    open(content, vcr, context, options) {
        if (options?.id && this._cdkDialog.getDialogById(options.id)) {
            throw new Error(`Dialog with ID: ${options.id} already exists`);
        }
        const positionStrategy = options?.positionStrategy ??
            (options?.attachTo && options?.attachPositions && options?.attachPositions?.length > 0
                ? this._positionBuilder?.flexibleConnectedTo(options.attachTo).withPositions(options.attachPositions ?? [])
                : this._positionBuilder.global().centerHorizontally().centerVertically());
        let brnDialogRef;
        let effectRef;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const contextOrData = {
            ...context,
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            close: (result = undefined) => brnDialogRef.close(result, options?.closeDelay),
        };
        const destroyed$ = new Subject();
        const open = signal(true);
        const state = computed(() => (open() ? 'open' : 'closed'));
        const dialogId = dialogSequence++;
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        const cdkDialogRef = this._cdkDialog.open(content, {
            id: options?.id ?? `brn-dialog-${dialogId}`,
            role: options?.role,
            viewContainerRef: vcr,
            templateContext: () => ({
                $implicit: contextOrData,
            }),
            data: contextOrData,
            hasBackdrop: options?.hasBackdrop,
            panelClass: cssClassesToArray(options?.panelClass),
            backdropClass: cssClassesToArray(options?.backdropClass, 'bg-transparent'),
            positionStrategy,
            scrollStrategy: options?.scrollStrategy ?? this._sso?.block(),
            restoreFocus: options?.restoreFocus,
            disableClose: true,
            autoFocus: options?.autoFocus ?? 'first-tabbable',
            ariaDescribedBy: options?.ariaDescribedBy ?? `brn-dialog-description-${dialogId}`,
            ariaLabelledBy: options?.ariaLabelledBy ?? `brn-dialog-title-${dialogId}`,
            ariaLabel: options?.ariaLabel,
            ariaModal: options?.ariaModal,
            providers: (cdkDialogRef) => {
                brnDialogRef = new BrnDialogRef(cdkDialogRef, open, state, dialogId, options);
                runInInjectionContext(this._injector, () => {
                    effectRef = effect(() => {
                        if (overlay) {
                            this._renderer.setAttribute(overlay, 'data-state', state());
                        }
                        if (backdrop) {
                            this._renderer.setAttribute(backdrop, 'data-state', state());
                        }
                    });
                });
                const providers = [
                    {
                        provide: BrnDialogRef,
                        useValue: brnDialogRef,
                    },
                ];
                if (options?.providers) {
                    if (typeof options.providers === 'function') {
                        providers.push(...options.providers());
                    }
                    if (Array.isArray(options.providers)) {
                        providers.push(...options.providers);
                    }
                }
                return providers;
            },
        });
        const overlay = cdkDialogRef.overlayRef.overlayElement;
        const backdrop = cdkDialogRef.overlayRef.backdropElement;
        if (options?.closeOnOutsidePointerEvents) {
            cdkDialogRef.outsidePointerEvents.pipe(takeUntil(destroyed$)).subscribe(() => {
                brnDialogRef.close(undefined, options?.closeDelay);
            });
        }
        if (options?.closeOnBackdropClick) {
            cdkDialogRef.backdropClick.pipe(takeUntil(destroyed$)).subscribe(() => {
                brnDialogRef.close(undefined, options?.closeDelay);
            });
        }
        if (!options?.disableClose) {
            cdkDialogRef.keydownEvents
                .pipe(filter((e) => e.key === 'Escape'), takeUntil(destroyed$))
                .subscribe(() => {
                brnDialogRef.close(undefined, options?.closeDelay);
            });
        }
        cdkDialogRef.closed.pipe(takeUntil(destroyed$)).subscribe(() => {
            effectRef?.destroy();
            destroyed$.next();
        });
        return brnDialogRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnDialogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,