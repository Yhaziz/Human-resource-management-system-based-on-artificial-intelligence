import type { AutoFocusTarget } from '@angular/cdk/dialog';
import { OverlayPositionBuilder, ScrollStrategyOptions, type ConnectedPosition, type FlexibleConnectedPositionStrategyOrigin, type PositionStrategy, type ScrollStrategy } from '@angular/cdk/overlay';
import { EventEmitter, type ElementRef, type TemplateRef } from '@angular/core';
import { type BrnDialogOptions } from './brn-dialog-options';
import type { BrnDialogState } from './brn-dialog-state';
import * as i0 from "@angular/core";
export declare class BrnDialogComponent {
    private readonly _dialogService;
    private readonly _vcr;
    readonly positionBuilder: OverlayPositionBuilder;
    readonly ssos: ScrollStrategyOptions;
    private readonly _injector;
    private _context;
    protected _options: Partial<BrnDialogOptions>;
    private _contentTemplate;
    private _dialogRef;
    private _dialogStateEffectRef?;
    readonly state: import("@angular/core").Signal<BrnDialogState>;
    readonly closed: EventEmitter<any>;
    readonly stateChanged: EventEmitter<BrnDialogState>;
    set newState(state: BrnDialogState);
    set role(role: 'dialog' | 'alertdialog');
    set hasBackdrop(hasBackdrop: boolean);
    set positionStrategy(positionStrategy: PositionStrategy);
    set scrollStrategy(scrollStrategy: ScrollStrategy | 'close' | 'reposition');
    set restoreFocus(restoreFocus: boolean | string | ElementRef);
    set closeOnOutsidePointerEvents(closeOnOutsidePointerEvents: boolean);
    set closeOnBackdropClick(closeOnBackdropClick: boolean);
    set attachTo(attachTo: FlexibleConnectedPositionStrategyOrigin | null | undefined);
    set attachPositions(attachPositions: ConnectedPosition[]);
    set autoFocus(autoFocus: AutoFocusTarget | string);
    set closeDelay(closeDelay: number);
    set disableClose(disableClose: boolean);
    set ariaDescribedBy(ariaDescribedBy: string | null | undefined);
    set ariaLabelledBy(ariaLabelledBy: string | null | undefined);
    set ariaLabel(ariaLabel: string | null | undefined);
    set ariaModal(isModal: boolean);
    open<DialogContext>(): void;
    close(result: any, delay?: number): void;
    registerTemplate(template: TemplateRef<unknown>): void;
    setOverlayClass(overlayClass: string | null | undefined): void;
    setPanelClass(panelClass: string | null | undefined): void;
    setContext(context: unknown): void;
    setAriaDescribedBy(ariaDescribedBy: string | null | undefined): void;
    setAriaLabelledBy(ariaLabelledBy: string | null | undefined): void;
    setAriaLabel(ariaLabel: string | null | undefined): void;
    setAriaModal(ariaModal: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnDialogComponent, "brn-dialog", ["brnDialog"], { "newState": { "alias": "state"; "required": false; }; "role": { "alias": "role"; "required": false; }; "hasBackdrop": { "alias": "hasBackdrop"; "required": false; }; "positionStrategy": { "alias": "positionStrategy"; "required": false; }; "scrollStrategy": { "alias": "scrollStrategy"; "required": false; }; "restoreFocus": { "alias": "restoreFocus"; "required": false; }; "closeOnOutsidePointerEvents": { "alias": "closeOnOutsidePointerEvents"; "required": false; }; "closeOnBackdropClick": { "alias": "closeOnBackdropClick"; "required": false; }; "attachTo": { "alias": "attachTo"; "required": false; }; "attachPositions": { "alias": "attachPositions"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; "closeDelay": { "alias": "closeDelay"; "required": false; }; "disableClose": { "alias": "disableClose"; "required": false; }; "ariaDescribedBy": { "alias": "aria-describedby"; "required": false; }; "ariaLabelledBy": { "alias": "aria-labelledby"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaModal": { "alias": "aria-modal"; "required": false; }; }, { "closed": "closed"; "stateChanged": "stateChanged"; }, never, ["*"], true, never>;
    static ngAcceptInputType_hasBackdrop: unknown;
    static ngAcceptInputType_closeOnOutsidePointerEvents: unknown;
    static ngAcceptInputType_closeOnBackdropClick: unknown;
    static ngAcceptInputType_closeDelay: unknown;
    static ngAcceptInputType_disableClose: unknown;
    static ngAcceptInputType_ariaModal: unknown;
}
