import { Overlay, OverlayPositionBuilder, } from '@angular/cdk/overlay';
import { TemplatePortal } from '@angular/cdk/portal';
import { Injectable, NgZone, TemplateRef, inject, signal, } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { BehaviorSubject, Subject, filter, map, of, switchMap } from 'rxjs';
import { createHoverObservable } from './createHoverObservable';
import * as i0 from "@angular/core";
const topFirstPositions = [
    {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom',
    },
    {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top',
    },
];
const bottomFirstPositions = [
    {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top',
    },
    {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom',
    },
];
export class BrnHoverCardContentService {
    constructor() {
        this._overlay = inject(Overlay);
        this._zone = inject(NgZone);
        this._psBuilder = inject(OverlayPositionBuilder);
        this._content = signal(null);
        this._state = signal('closed');
        this._config = {};
        this._destroyed$ = new Subject();
        this._positionChangesObservables$ = new BehaviorSubject(undefined);
        this._overlayHoveredObservables$ = new BehaviorSubject(undefined);
        this.positionChanges$ = this._positionChangesObservables$.pipe(switchMap((positionChangeObservable) => (positionChangeObservable ? positionChangeObservable : of(undefined))), filter((change) => change !== undefined && change !== null));
        this.hovered$ = this._overlayHoveredObservables$.pipe(switchMap((overlayHoveredObservable) => (overlayHoveredObservable ? overlayHoveredObservable : of(false))));
        this.state = this._state.asReadonly();
        this.side = toSignal(this.positionChanges$.pipe(map((change) => 
        // todo: better translation or adjusting hlm to take that into account
        change.connectionPair.originY === 'center'
            ? change.connectionPair.originX === 'start'
                ? 'left'
                : 'right'
            : change.connectionPair.originY)), { initialValue: 'bottom' });
    }
    setConfig(config) {
        this._config = config;
        if (config['attachTo']) {
            this._positionStrategy = this._psBuilder
                .flexibleConnectedTo(config['attachTo'])
                .withPositions(config['attachPositions'] ?? config['align'] === 'top' ? topFirstPositions : bottomFirstPositions)
                .withDefaultOffsetY(config['sideOffset'] ?? 0);
            this._config = {
                ...this._config,
                positionStrategy: this._positionStrategy,
                scrollStrategy: this._overlay.scrollStrategies.reposition(),
            };
            this._positionChangesObservables$.next(this._positionStrategy.positionChanges);
        }
        this._overlayRef = this._overlay.create(this._config);
    }
    setContent(value, vcr) {
        this._content.set(new TemplatePortal(value instanceof TemplateRef ? value : value.template, vcr));
        if (!this._overlayRef) {
            this._overlayRef = this._overlay.create(this._config);
        }
    }
    setState(newState) {
        this._state.set(newState);
    }
    show() {
        const content = this._content();
        if (!content || !this._overlayRef)
            return;
        this._overlayRef?.detach();
        this._overlayRef?.attach(content);
        this._destroyed$ = new Subject();
        this._overlayHoveredObservables$.next(createHoverObservable(this._overlayRef.hostElement, this._zone, this._destroyed$));
    }
    hide() {
        this._overlayRef?.detach();
        this._destroyed$.next();
        this._destroyed$.complete();
        this._destroyed$ = new Subject();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnHoverCardContentService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnHoverCardContentService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnHoverCardContentService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,