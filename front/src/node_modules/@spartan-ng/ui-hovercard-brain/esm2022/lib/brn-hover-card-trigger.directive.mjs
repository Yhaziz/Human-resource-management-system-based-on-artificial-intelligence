/**
 * We are building on shoulders of giants here and use the implementation provided by the incredible TaigaUI
 * team: https://github.com/taiga-family/taiga-ui/blob/main/projects/core/directives/dropdown/dropdown-hover.directive.ts
 * Check them out! Give them a try! Leave a star! Their work is incredible!
 */
import { FocusMonitor } from '@angular/cdk/a11y';
import { Directive, ElementRef, Input, NgZone, ViewContainerRef, inject, } from '@angular/core';
import { Subject, delay, distinctUntilChanged, fromEvent, map, merge, of, share, switchMap, takeUntil, tap, } from 'rxjs';
import { BrnHoverCardContentService } from './brn-hover-card-content.service';
import { createHoverObservable } from './createHoverObservable';
import * as i0 from "@angular/core";
export function isElement(node) {
    return !!node && `nodeType` in node && node.nodeType === Node.ELEMENT_NODE;
}
export class BrnHoverCardTriggerDirective {
    constructor() {
        this._destroy$ = new Subject();
        this._vcr = inject(ViewContainerRef);
        this._zone = inject(NgZone);
        this._el = inject(ElementRef);
        this._contentService = inject(BrnHoverCardContentService);
        this._focusMonitor = inject(FocusMonitor);
        this.focused$ = this._focusMonitor.monitor(this._el).pipe(map((e) => e !== null));
        this.hovered$ = merge(fromEvent(this._el.nativeElement, 'click').pipe(map(() => false)), createHoverObservable(this._el.nativeElement, this._zone, this._destroy$), this._contentService.hovered$, this.focused$).pipe(distinctUntilChanged());
        this.showing$ = this.hovered$.pipe(
        // we set the state to open here because we are about to open show the content
        tap((visible) => visible && this._contentService.setState('open')), switchMap((visible) => {
            // we are delaying based on the configure-able input
            return of(visible).pipe(delay(visible ? this.showDelay : this.hideDelay));
        }), switchMap((visible) => {
            // don't do anything when we are in the process of showing the content
            if (visible)
                return of(visible);
            // we set the state to closed here to trigger any animations for the element leaving
            this._contentService.setState('closed');
            // then delay to wait for the leaving animation to finish
            return of(visible).pipe(delay(this.animationDelay));
        }), distinctUntilChanged(), share(), takeUntil(this._destroy$));
        this.showDelay = 300;
        this.hideDelay = 500;
        this.animationDelay = 100;
        this.sideOffset = 5;
        this.align = 'bottom';
    }
    set brnHoverCardTriggerFor(value) {
        this._contentService.setContent(value, this._vcr);
    }
    ngOnInit() {
        this._contentService.setConfig({ attachTo: this._el, align: this.align, sideOffset: this.sideOffset });
        this.showing$.subscribe((isHovered) => {
            if (isHovered) {
                this._contentService.show();
            }
            else {
                this._contentService.hide();
            }
        });
    }
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnHoverCardTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnHoverCardTriggerDirective, isStandalone: true, selector: "[brnHoverCardTrigger]:not(ng-container),[brnHoverCardTriggerFor]:not(ng-container)", inputs: { showDelay: "showDelay", hideDelay: "hideDelay", animationDelay: "animationDelay", sideOffset: "sideOffset", align: "align", brnHoverCardTriggerFor: "brnHoverCardTriggerFor" }, exportAs: ["brnHoverCardTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnHoverCardTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnHoverCardTrigger]:not(ng-container),[brnHoverCardTriggerFor]:not(ng-container)',
                    standalone: true,
                    exportAs: 'brnHoverCardTrigger',
                }]
        }], propDecorators: { showDelay: [{
                type: Input
            }], hideDelay: [{
                type: Input
            }], animationDelay: [{
                type: Input
            }], sideOffset: [{
                type: Input
            }], align: [{
                type: Input
            }], brnHoverCardTriggerFor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,