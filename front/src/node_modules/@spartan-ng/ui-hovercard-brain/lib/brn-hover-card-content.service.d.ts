import { type ConnectedOverlayPositionChange, type ConnectedPosition, type OverlayConfig } from '@angular/cdk/overlay';
import { TemplateRef, type ElementRef, type Signal, type ViewContainerRef } from '@angular/core';
import { type Observable } from 'rxjs';
import type { BrnHoverCardContentDirective } from './brn-hover-card-content.directive';
import * as i0 from "@angular/core";
export type BrnHoverCardOptions = Partial<{
    attachTo: ElementRef;
    attachPositions: ConnectedPosition[];
    align: 'top' | 'bottom';
    sideOffset: number;
} & OverlayConfig>;
export declare class BrnHoverCardContentService {
    private readonly _overlay;
    private readonly _zone;
    private readonly _psBuilder;
    private readonly _content;
    private readonly _state;
    private _config;
    private _overlayRef?;
    private _positionStrategy?;
    private _destroyed$;
    private _positionChangesObservables$;
    private _overlayHoveredObservables$;
    readonly positionChanges$: Observable<ConnectedOverlayPositionChange>;
    readonly hovered$: Observable<boolean>;
    readonly state: Signal<"open" | "closed">;
    readonly side: Signal<'top' | 'bottom' | 'left' | 'right'>;
    setConfig(config: BrnHoverCardOptions): void;
    setContent(value: TemplateRef<unknown> | BrnHoverCardContentDirective, vcr: ViewContainerRef): void;
    setState(newState: 'open' | 'closed'): void;
    show(): void;
    hide(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnHoverCardContentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BrnHoverCardContentService>;
}
