import { isPlatformBrowser } from '@angular/common';
import { Directive, ElementRef, Input, PLATFORM_ID, inject, signal } from '@angular/core';
import { NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
let nextId = 0;
export class BrnLabelDirective {
    constructor() {
        this._id = signal(`brn-label-${nextId++}`);
        this._ngControl = inject(NgControl, { optional: true });
        this._isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._element = inject(ElementRef).nativeElement;
        this._dataDisabled = signal('auto');
        this.dataDisabled = this._dataDisabled.asReadonly();
    }
    set id(id) {
        this._id.set(id || this._id());
    }
    get id() {
        return this._id();
    }
    ngOnInit() {
        if (!this._isBrowser)
            return;
        this._changes = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.attributeName !== 'data-disabled')
                    return;
                // eslint-disable-next-line
                const state = mutation.target.attributes.getNamedItem(mutation.attributeName)?.value === 'true';
                this._dataDisabled.set(state ?? 'auto');
            });
        });
        this._changes?.observe(this._element, {
            attributes: true,
            childList: true,
            characterData: true,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnLabelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnLabelDirective, isStandalone: true, selector: "[brnLabel]", inputs: { id: "id" }, host: { properties: { "id": "_id()", "class.ng-invalid": "this._ngControl?.invalid || null", "class.ng-dirty": "this._ngControl?.dirty || null", "class.ng-valid": "this._ngControl?.valid || null", "class.ng-touched": "this._ngControl?.touched || null" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnLabel]',
                    standalone: true,
                    host: {
                        '[id]': '_id()',
                        '[class.ng-invalid]': 'this._ngControl?.invalid || null',
                        '[class.ng-dirty]': 'this._ngControl?.dirty || null',
                        '[class.ng-valid]': 'this._ngControl?.valid || null',
                        '[class.ng-touched]': 'this._ngControl?.touched || null',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWxhYmVsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvbGFiZWwvYnJhaW4vc3JjL2xpYi9icm4tbGFiZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBZSxNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBRTNDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztBQWFmLE1BQU0sT0FBTyxpQkFBaUI7SUFYOUI7UUFZb0IsUUFBRyxHQUFHLE1BQU0sQ0FBQyxhQUFhLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0QyxlQUFVLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBVXJELGVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNwRCxhQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUU1QyxrQkFBYSxHQUFHLE1BQU0sQ0FBbUIsTUFBTSxDQUFDLENBQUM7UUFDbEQsaUJBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDO0tBa0IvRDtJQTlCQSxJQUNJLEVBQUUsQ0FBQyxFQUFVO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBQ0QsSUFBSSxFQUFFO1FBQ0wsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDbkIsQ0FBQztJQVFELFFBQVE7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVU7WUFBRSxPQUFPO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLFNBQTJCLEVBQUUsRUFBRTtZQUNwRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFO2dCQUM5QyxJQUFJLFFBQVEsQ0FBQyxhQUFhLEtBQUssZUFBZTtvQkFBRSxPQUFPO2dCQUN2RCwyQkFBMkI7Z0JBQzNCLE1BQU0sS0FBSyxHQUFJLFFBQVEsQ0FBQyxNQUFjLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxLQUFLLE1BQU0sQ0FBQztnQkFDekcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3JDLFVBQVUsRUFBRSxJQUFJO1lBQ2hCLFNBQVMsRUFBRSxJQUFJO1lBQ2YsYUFBYSxFQUFFLElBQUk7U0FDbkIsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs4R0FqQ1csaUJBQWlCO2tHQUFqQixpQkFBaUI7OzJGQUFqQixpQkFBaUI7a0JBWDdCLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixJQUFJLEVBQUU7d0JBQ0wsTUFBTSxFQUFFLE9BQU87d0JBQ2Ysb0JBQW9CLEVBQUUsa0NBQWtDO3dCQUN4RCxrQkFBa0IsRUFBRSxnQ0FBZ0M7d0JBQ3BELGtCQUFrQixFQUFFLGdDQUFnQzt3QkFDcEQsb0JBQW9CLEVBQUUsa0NBQWtDO3FCQUN4RDtpQkFDRDs4QkFNSSxFQUFFO3NCQURMLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBQTEFURk9STV9JRCwgaW5qZWN0LCBzaWduYWwsIHR5cGUgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmxldCBuZXh0SWQgPSAwO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbYnJuTGFiZWxdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aG9zdDoge1xuXHRcdCdbaWRdJzogJ19pZCgpJyxcblx0XHQnW2NsYXNzLm5nLWludmFsaWRdJzogJ3RoaXMuX25nQ29udHJvbD8uaW52YWxpZCB8fCBudWxsJyxcblx0XHQnW2NsYXNzLm5nLWRpcnR5XSc6ICd0aGlzLl9uZ0NvbnRyb2w/LmRpcnR5IHx8IG51bGwnLFxuXHRcdCdbY2xhc3MubmctdmFsaWRdJzogJ3RoaXMuX25nQ29udHJvbD8udmFsaWQgfHwgbnVsbCcsXG5cdFx0J1tjbGFzcy5uZy10b3VjaGVkXSc6ICd0aGlzLl9uZ0NvbnRyb2w/LnRvdWNoZWQgfHwgbnVsbCcsXG5cdH0sXG59KVxuZXhwb3J0IGNsYXNzIEJybkxhYmVsRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9pZCA9IHNpZ25hbChgYnJuLWxhYmVsLSR7bmV4dElkKyt9YCk7XG5cdHByb3RlY3RlZCByZWFkb25seSBfbmdDb250cm9sID0gaW5qZWN0KE5nQ29udHJvbCwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcblxuXHRASW5wdXQoKVxuXHRzZXQgaWQoaWQ6IHN0cmluZykge1xuXHRcdHRoaXMuX2lkLnNldChpZCB8fCB0aGlzLl9pZCgpKTtcblx0fVxuXHRnZXQgaWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lkKCk7XG5cdH1cblxuXHRwcml2YXRlIHJlYWRvbmx5IF9pc0Jyb3dzZXIgPSBpc1BsYXRmb3JtQnJvd3NlcihpbmplY3QoUExBVEZPUk1fSUQpKTtcblx0cHJpdmF0ZSByZWFkb25seSBfZWxlbWVudCA9IGluamVjdChFbGVtZW50UmVmKS5uYXRpdmVFbGVtZW50O1xuXHRwcml2YXRlIF9jaGFuZ2VzPzogTXV0YXRpb25PYnNlcnZlcjtcblx0cHJpdmF0ZSByZWFkb25seSBfZGF0YURpc2FibGVkID0gc2lnbmFsPGJvb2xlYW4gfCAnYXV0byc+KCdhdXRvJyk7XG5cdHB1YmxpYyByZWFkb25seSBkYXRhRGlzYWJsZWQgPSB0aGlzLl9kYXRhRGlzYWJsZWQuYXNSZWFkb25seSgpO1xuXG5cdG5nT25Jbml0KCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5faXNCcm93c2VyKSByZXR1cm47XG5cdFx0dGhpcy5fY2hhbmdlcyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnM6IE11dGF0aW9uUmVjb3JkW10pID0+IHtcblx0XHRcdG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbjogTXV0YXRpb25SZWNvcmQpID0+IHtcblx0XHRcdFx0aWYgKG11dGF0aW9uLmF0dHJpYnV0ZU5hbWUgIT09ICdkYXRhLWRpc2FibGVkJykgcmV0dXJuO1xuXHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0XHRcdFx0Y29uc3Qgc3RhdGUgPSAobXV0YXRpb24udGFyZ2V0IGFzIGFueSkuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0obXV0YXRpb24uYXR0cmlidXRlTmFtZSk/LnZhbHVlID09PSAndHJ1ZSc7XG5cdFx0XHRcdHRoaXMuX2RhdGFEaXNhYmxlZC5zZXQoc3RhdGUgPz8gJ2F1dG8nKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdHRoaXMuX2NoYW5nZXM/Lm9ic2VydmUodGhpcy5fZWxlbWVudCwge1xuXHRcdFx0YXR0cmlidXRlczogdHJ1ZSxcblx0XHRcdGNoaWxkTGlzdDogdHJ1ZSxcblx0XHRcdGNoYXJhY3RlckRhdGE6IHRydWUsXG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==