import { CdkContextMenuTrigger } from '@angular/cdk/menu';
import { Directive, Input, effect, inject, signal } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/menu";
export class BrnContextMenuTriggerDirective {
    set align(value) {
        this._align.set(value);
    }
    set brnCtxMenuTriggerFor(value) {
        this._cdkTrigger.menuTemplateRef = value;
    }
    constructor() {
        this._cdkTrigger = inject(CdkContextMenuTrigger, { host: true });
        this._align = signal(undefined);
        // once the trigger opens we wait until the next tick and then grab the last position
        // used to position the menu. we store this in our trigger which the brnMenu directive has
        // access to through DI
        this._cdkTrigger.opened.pipe(takeUntilDestroyed()).subscribe(() => setTimeout(() => 
        // eslint-disable-next-line
        (this._cdkTrigger['_spartanLastPosition'] = // eslint-disable-next-line
            this._cdkTrigger.overlayRef._positionStrategy._lastPosition)));
        effect(() => {
            const align = this._align();
            if (!align)
                return;
            this._cdkTrigger.menuPosition = [
                {
                    originX: align,
                    originY: 'bottom',
                    overlayX: align,
                    overlayY: 'top',
                },
                {
                    originX: align,
                    originY: 'top',
                    overlayX: align,
                    overlayY: 'bottom',
                },
            ];
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnContextMenuTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnContextMenuTriggerDirective, isStandalone: true, selector: "[brnCtxMenuTriggerFor]", inputs: { align: "align", brnCtxMenuTriggerFor: "brnCtxMenuTriggerFor" }, hostDirectives: [{ directive: i1.CdkContextMenuTrigger }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnContextMenuTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnCtxMenuTriggerFor]',
                    standalone: true,
                    hostDirectives: [CdkContextMenuTrigger],
                }]
        }], ctorParameters: () => [], propDecorators: { align: [{
                type: Input
            }], brnCtxMenuTriggerFor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLWNvbnRleHQtbWVudS10cmlnZ2VyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvbWVudS9icmFpbi9zcmMvbGliL2Jybi1jb250ZXh0LW1lbnUtdHJpZ2dlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQW9CLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7QUFTaEUsTUFBTSxPQUFPLDhCQUE4QjtJQUcxQyxJQUNJLEtBQUssQ0FBQyxLQUFzQjtRQUMvQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFDSSxvQkFBb0IsQ0FBQyxLQUFrQztRQUMxRCxJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7SUFDMUMsQ0FBQztJQUVEO1FBWmlCLGdCQUFXLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDNUQsV0FBTSxHQUFHLE1BQU0sQ0FBa0IsU0FBUyxDQUFDLENBQUM7UUFZNUQscUZBQXFGO1FBQ3JGLDBGQUEwRjtRQUMxRix1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQ2pFLFVBQVUsQ0FDVCxHQUFHLEVBQUU7UUFDSiwyQkFBMkI7UUFDM0IsQ0FBRSxJQUFJLENBQUMsV0FBbUIsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLDJCQUEyQjtZQUM5RSxJQUFJLENBQUMsV0FBbUIsQ0FBQyxVQUFVLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDLENBQ3ZFLENBQ0QsQ0FBQztRQUVGLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDWCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDNUIsSUFBSSxDQUFDLEtBQUs7Z0JBQUUsT0FBTztZQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBRztnQkFDL0I7b0JBQ0MsT0FBTyxFQUFFLEtBQUs7b0JBQ2QsT0FBTyxFQUFFLFFBQVE7b0JBQ2pCLFFBQVEsRUFBRSxLQUFLO29CQUNmLFFBQVEsRUFBRSxLQUFLO2lCQUNmO2dCQUNEO29CQUNDLE9BQU8sRUFBRSxLQUFLO29CQUNkLE9BQU8sRUFBRSxLQUFLO29CQUNkLFFBQVEsRUFBRSxLQUFLO29CQUNmLFFBQVEsRUFBRSxRQUFRO2lCQUNsQjthQUNELENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7OEdBNUNXLDhCQUE4QjtrR0FBOUIsOEJBQThCOzsyRkFBOUIsOEJBQThCO2tCQUwxQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFVBQVUsRUFBRSxJQUFJO29CQUNoQixjQUFjLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDdkM7d0RBS0ksS0FBSztzQkFEUixLQUFLO2dCQU1GLG9CQUFvQjtzQkFEdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENka0NvbnRleHRNZW51VHJpZ2dlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9tZW51JztcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIGVmZmVjdCwgaW5qZWN0LCBzaWduYWwsIHR5cGUgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcblxuZXhwb3J0IHR5cGUgQnJuQ3R4TWVudUFsaWduID0gJ3N0YXJ0JyB8ICdjZW50ZXInIHwgJ2VuZCcgfCB1bmRlZmluZWQ7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ1ticm5DdHhNZW51VHJpZ2dlckZvcl0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRob3N0RGlyZWN0aXZlczogW0Nka0NvbnRleHRNZW51VHJpZ2dlcl0sXG59KVxuZXhwb3J0IGNsYXNzIEJybkNvbnRleHRNZW51VHJpZ2dlckRpcmVjdGl2ZSB7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2Nka1RyaWdnZXIgPSBpbmplY3QoQ2RrQ29udGV4dE1lbnVUcmlnZ2VyLCB7IGhvc3Q6IHRydWUgfSk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2FsaWduID0gc2lnbmFsPEJybkN0eE1lbnVBbGlnbj4odW5kZWZpbmVkKTtcblx0QElucHV0KClcblx0c2V0IGFsaWduKHZhbHVlOiBCcm5DdHhNZW51QWxpZ24pIHtcblx0XHR0aGlzLl9hbGlnbi5zZXQodmFsdWUpO1xuXHR9XG5cblx0QElucHV0KClcblx0c2V0IGJybkN0eE1lbnVUcmlnZ2VyRm9yKHZhbHVlOiBUZW1wbGF0ZVJlZjx1bmtub3duPiB8IG51bGwpIHtcblx0XHR0aGlzLl9jZGtUcmlnZ2VyLm1lbnVUZW1wbGF0ZVJlZiA9IHZhbHVlO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0Ly8gb25jZSB0aGUgdHJpZ2dlciBvcGVucyB3ZSB3YWl0IHVudGlsIHRoZSBuZXh0IHRpY2sgYW5kIHRoZW4gZ3JhYiB0aGUgbGFzdCBwb3NpdGlvblxuXHRcdC8vIHVzZWQgdG8gcG9zaXRpb24gdGhlIG1lbnUuIHdlIHN0b3JlIHRoaXMgaW4gb3VyIHRyaWdnZXIgd2hpY2ggdGhlIGJybk1lbnUgZGlyZWN0aXZlIGhhc1xuXHRcdC8vIGFjY2VzcyB0byB0aHJvdWdoIERJXG5cdFx0dGhpcy5fY2RrVHJpZ2dlci5vcGVuZWQucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQoKSkuc3Vic2NyaWJlKCgpID0+XG5cdFx0XHRzZXRUaW1lb3V0KFxuXHRcdFx0XHQoKSA9PlxuXHRcdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXHRcdFx0XHRcdCgodGhpcy5fY2RrVHJpZ2dlciBhcyBhbnkpWydfc3BhcnRhbkxhc3RQb3NpdGlvbiddID0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cdFx0XHRcdFx0XHQodGhpcy5fY2RrVHJpZ2dlciBhcyBhbnkpLm92ZXJsYXlSZWYuX3Bvc2l0aW9uU3RyYXRlZ3kuX2xhc3RQb3NpdGlvbiksXG5cdFx0XHQpLFxuXHRcdCk7XG5cblx0XHRlZmZlY3QoKCkgPT4ge1xuXHRcdFx0Y29uc3QgYWxpZ24gPSB0aGlzLl9hbGlnbigpO1xuXHRcdFx0aWYgKCFhbGlnbikgcmV0dXJuO1xuXHRcdFx0dGhpcy5fY2RrVHJpZ2dlci5tZW51UG9zaXRpb24gPSBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRvcmlnaW5YOiBhbGlnbixcblx0XHRcdFx0XHRvcmlnaW5ZOiAnYm90dG9tJyxcblx0XHRcdFx0XHRvdmVybGF5WDogYWxpZ24sXG5cdFx0XHRcdFx0b3ZlcmxheVk6ICd0b3AnLFxuXHRcdFx0XHR9LFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0b3JpZ2luWDogYWxpZ24sXG5cdFx0XHRcdFx0b3JpZ2luWTogJ3RvcCcsXG5cdFx0XHRcdFx0b3ZlcmxheVg6IGFsaWduLFxuXHRcdFx0XHRcdG92ZXJsYXlZOiAnYm90dG9tJyxcblx0XHRcdFx0fSxcblx0XHRcdF07XG5cdFx0fSk7XG5cdH1cbn1cbiJdfQ==