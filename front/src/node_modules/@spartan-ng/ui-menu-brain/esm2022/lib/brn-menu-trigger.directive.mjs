import { CdkMenuTrigger } from '@angular/cdk/menu';
import { Directive, Input, effect, inject, signal } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/menu";
export class BrnMenuTriggerDirective {
    set align(value) {
        this._align.set(value);
    }
    constructor() {
        this._cdkTrigger = inject(CdkMenuTrigger, { host: true });
        this._align = signal(undefined);
        // once the trigger opens we wait until the next tick and then grab the last position
        // used to position the menu. we store this in our trigger which the brnMenu directive has
        // access to through DI
        this._cdkTrigger.opened.pipe(takeUntilDestroyed()).subscribe(() => setTimeout(() => 
        // eslint-disable-next-line
        (this._cdkTrigger['_spartanLastPosition'] = // eslint-disable-next-line
            this._cdkTrigger.overlayRef._positionStrategy._lastPosition)));
        effect(() => {
            const align = this._align();
            if (!align)
                return;
            this._cdkTrigger.menuPosition = [
                {
                    originX: align,
                    originY: 'bottom',
                    overlayX: align,
                    overlayY: 'top',
                },
                {
                    originX: align,
                    originY: 'top',
                    overlayX: align,
                    overlayY: 'bottom',
                },
            ];
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnMenuTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnMenuTriggerDirective, isStandalone: true, selector: "[brnMenuTriggerFor]", inputs: { align: "align" }, hostDirectives: [{ directive: i1.CdkMenuTrigger, inputs: ["cdkMenuTriggerFor", "brnMenuTriggerFor"] }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnMenuTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnMenuTriggerFor]',
                    standalone: true,
                    hostDirectives: [{ directive: CdkMenuTrigger, inputs: ['cdkMenuTriggerFor: brnMenuTriggerFor'] }],
                }]
        }], ctorParameters: () => [], propDecorators: { align: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLW1lbnUtdHJpZ2dlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpL21lbnUvYnJhaW4vc3JjL2xpYi9icm4tbWVudS10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQVNoRSxNQUFNLE9BQU8sdUJBQXVCO0lBSW5DLElBQ0ksS0FBSyxDQUFDLEtBQW1CO1FBQzVCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUFFRDtRQVJpQixnQkFBVyxHQUFHLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyRCxXQUFNLEdBQUcsTUFBTSxDQUFlLFNBQVMsQ0FBQyxDQUFDO1FBUXpELHFGQUFxRjtRQUNyRiwwRkFBMEY7UUFDMUYsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNqRSxVQUFVLENBQ1QsR0FBRyxFQUFFO1FBQ0osMkJBQTJCO1FBQzNCLENBQUUsSUFBSSxDQUFDLFdBQW1CLENBQUMsc0JBQXNCLENBQUMsR0FBRywyQkFBMkI7WUFDOUUsSUFBSSxDQUFDLFdBQW1CLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxDQUN2RSxDQUNELENBQUM7UUFFRixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1gsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxLQUFLO2dCQUFFLE9BQU87WUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLEdBQUc7Z0JBQy9CO29CQUNDLE9BQU8sRUFBRSxLQUFLO29CQUNkLE9BQU8sRUFBRSxRQUFRO29CQUNqQixRQUFRLEVBQUUsS0FBSztvQkFDZixRQUFRLEVBQUUsS0FBSztpQkFDZjtnQkFDRDtvQkFDQyxPQUFPLEVBQUUsS0FBSztvQkFDZCxPQUFPLEVBQUUsS0FBSztvQkFDZCxRQUFRLEVBQUUsS0FBSztvQkFDZixRQUFRLEVBQUUsUUFBUTtpQkFDbEI7YUFDRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDOzhHQXhDVyx1QkFBdUI7a0dBQXZCLHVCQUF1Qjs7MkZBQXZCLHVCQUF1QjtrQkFMbkMsU0FBUzttQkFBQztvQkFDVixRQUFRLEVBQUUscUJBQXFCO29CQUMvQixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsY0FBYyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxDQUFDLHNDQUFzQyxDQUFDLEVBQUUsQ0FBQztpQkFDakc7d0RBTUksS0FBSztzQkFEUixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2RrTWVudVRyaWdnZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvbWVudSc7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBlZmZlY3QsIGluamVjdCwgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyB0YWtlVW50aWxEZXN0cm95ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5cbmV4cG9ydCB0eXBlIEJybk1lbnVBbGlnbiA9ICdzdGFydCcgfCAnY2VudGVyJyB8ICdlbmQnIHwgdW5kZWZpbmVkO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbYnJuTWVudVRyaWdnZXJGb3JdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aG9zdERpcmVjdGl2ZXM6IFt7IGRpcmVjdGl2ZTogQ2RrTWVudVRyaWdnZXIsIGlucHV0czogWydjZGtNZW51VHJpZ2dlckZvcjogYnJuTWVudVRyaWdnZXJGb3InXSB9XSxcbn0pXG5leHBvcnQgY2xhc3MgQnJuTWVudVRyaWdnZXJEaXJlY3RpdmUge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9jZGtUcmlnZ2VyID0gaW5qZWN0KENka01lbnVUcmlnZ2VyLCB7IGhvc3Q6IHRydWUgfSk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2FsaWduID0gc2lnbmFsPEJybk1lbnVBbGlnbj4odW5kZWZpbmVkKTtcblxuXHRASW5wdXQoKVxuXHRzZXQgYWxpZ24odmFsdWU6IEJybk1lbnVBbGlnbikge1xuXHRcdHRoaXMuX2FsaWduLnNldCh2YWx1ZSk7XG5cdH1cblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHQvLyBvbmNlIHRoZSB0cmlnZ2VyIG9wZW5zIHdlIHdhaXQgdW50aWwgdGhlIG5leHQgdGljayBhbmQgdGhlbiBncmFiIHRoZSBsYXN0IHBvc2l0aW9uXG5cdFx0Ly8gdXNlZCB0byBwb3NpdGlvbiB0aGUgbWVudS4gd2Ugc3RvcmUgdGhpcyBpbiBvdXIgdHJpZ2dlciB3aGljaCB0aGUgYnJuTWVudSBkaXJlY3RpdmUgaGFzXG5cdFx0Ly8gYWNjZXNzIHRvIHRocm91Z2ggRElcblx0XHR0aGlzLl9jZGtUcmlnZ2VyLm9wZW5lZC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCgpKS5zdWJzY3JpYmUoKCkgPT5cblx0XHRcdHNldFRpbWVvdXQoXG5cdFx0XHRcdCgpID0+XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cdFx0XHRcdFx0KCh0aGlzLl9jZGtUcmlnZ2VyIGFzIGFueSlbJ19zcGFydGFuTGFzdFBvc2l0aW9uJ10gPSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblx0XHRcdFx0XHRcdCh0aGlzLl9jZGtUcmlnZ2VyIGFzIGFueSkub3ZlcmxheVJlZi5fcG9zaXRpb25TdHJhdGVneS5fbGFzdFBvc2l0aW9uKSxcblx0XHRcdCksXG5cdFx0KTtcblxuXHRcdGVmZmVjdCgoKSA9PiB7XG5cdFx0XHRjb25zdCBhbGlnbiA9IHRoaXMuX2FsaWduKCk7XG5cdFx0XHRpZiAoIWFsaWduKSByZXR1cm47XG5cdFx0XHR0aGlzLl9jZGtUcmlnZ2VyLm1lbnVQb3NpdGlvbiA9IFtcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG9yaWdpblg6IGFsaWduLFxuXHRcdFx0XHRcdG9yaWdpblk6ICdib3R0b20nLFxuXHRcdFx0XHRcdG92ZXJsYXlYOiBhbGlnbixcblx0XHRcdFx0XHRvdmVybGF5WTogJ3RvcCcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRvcmlnaW5YOiBhbGlnbixcblx0XHRcdFx0XHRvcmlnaW5ZOiAndG9wJyxcblx0XHRcdFx0XHRvdmVybGF5WDogYWxpZ24sXG5cdFx0XHRcdFx0b3ZlcmxheVk6ICdib3R0b20nLFxuXHRcdFx0XHR9LFxuXHRcdFx0XTtcblx0XHR9KTtcblx0fVxufVxuIl19