import * as i0 from '@angular/core';
import { Directive, inject, ElementRef, Input, signal, effect, untracked, numberAttribute, forwardRef, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';
import { BrnDialogCloseDirective, BrnDialogContentDirective, BrnDialogTriggerDirective, BrnDialogComponent } from '@spartan-ng/ui-dialog-brain';
import { provideExposesStateProviderExisting } from '@spartan-ng/ui-core';

class BrnPopoverCloseDirective extends BrnDialogCloseDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverCloseDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnPopoverCloseDirective, isStandalone: true, selector: "button[brnPopoverClose]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnPopoverClose]',
                    standalone: true,
                }]
        }] });

class BrnPopoverContentDirective extends BrnDialogContentDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverContentDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnPopoverContentDirective, isStandalone: true, selector: "[brnPopoverContent]", providers: [provideExposesStateProviderExisting(() => BrnPopoverContentDirective)], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnPopoverContent]',
                    standalone: true,
                    providers: [provideExposesStateProviderExisting(() => BrnPopoverContentDirective)],
                }]
        }] });

class BrnPopoverTriggerDirective extends BrnDialogTriggerDirective {
    constructor() {
        super();
        this._host = inject(ElementRef, { host: true });
        if (!this._brnDialog)
            return;
        this._brnDialog.attachTo = this._host.nativeElement;
        this._brnDialog.closeOnOutsidePointerEvents = true;
    }
    set brnPopoverTriggerFor(brnDialog) {
        brnDialog.attachTo = this._host.nativeElement;
        brnDialog.closeOnOutsidePointerEvents = true;
        super.brnDialogTriggerFor = brnDialog;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnPopoverTriggerDirective, isStandalone: true, selector: "button[brnPopoverTrigger],button[brnPopoverTriggerFor]", inputs: { brnPopoverTriggerFor: "brnPopoverTriggerFor" }, host: { attributes: { "aria-haspopup": "dialog" }, properties: { "id": "id()", "attr.aria-expanded": "state() === 'open' ? 'true': 'false'", "attr.data-state": "state()", "attr.aria-controls": "dialogId" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnPopoverTrigger],button[brnPopoverTriggerFor]',
                    standalone: true,
                    host: {
                        '[id]': 'id()',
                        'aria-haspopup': 'dialog',
                        '[attr.aria-expanded]': "state() === 'open' ? 'true': 'false'",
                        '[attr.data-state]': 'state()',
                        '[attr.aria-controls]': 'dialogId',
                    },
                }]
        }], ctorParameters: () => [], propDecorators: { brnPopoverTriggerFor: [{
                type: Input
            }] } });

class BrnPopoverComponent extends BrnDialogComponent {
    set sideOffset(value) {
        this._sideOffset.set(value);
    }
    set align(value) {
        this._align.set(value);
    }
    constructor() {
        super();
        this._sideOffset = signal(0);
        this._align = signal('center');
        this.hasBackdrop = false;
        this.ariaDescribedBy = '';
        this.ariaLabelledBy = '';
        this.scrollStrategy = this.ssos.reposition();
        effect(() => {
            const align = this._align();
            this.attachPositions = [
                {
                    originX: align,
                    originY: 'bottom',
                    overlayX: align,
                    overlayY: 'top',
                },
                {
                    originX: align,
                    originY: 'top',
                    overlayX: align,
                    overlayY: 'bottom',
                },
            ];
            this.applySideOffset(untracked(this._sideOffset));
        });
        effect(() => {
            this.applySideOffset(this._sideOffset());
        });
    }
    applySideOffset(sideOffset) {
        this.attachPositions = (this._options['attachPositions'] ?? []).map((position) => ({
            ...position,
            offsetY: position.originY === 'top' ? -sideOffset : sideOffset,
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.5", type: BrnPopoverComponent, isStandalone: true, selector: "brn-popover", inputs: { sideOffset: ["sideOffset", "sideOffset", numberAttribute], align: "align" }, providers: [
            {
                provide: BrnDialogComponent,
                useExisting: forwardRef(() => BrnPopoverComponent),
            },
        ], exportAs: ["brnPopover"], usesInheritance: true, ngImport: i0, template: `
		<ng-content />
	`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-popover',
                    standalone: true,
                    template: `
		<ng-content />
	`,
                    providers: [
                        {
                            provide: BrnDialogComponent,
                            useExisting: forwardRef(() => BrnPopoverComponent),
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'brnPopover',
                }]
        }], ctorParameters: () => [], propDecorators: { sideOffset: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], align: [{
                type: Input
            }] } });

const BrnPopoverImports = [
    BrnPopoverComponent,
    BrnPopoverTriggerDirective,
    BrnPopoverCloseDirective,
    BrnPopoverContentDirective,
];
class BrnPopoverModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverModule, imports: [BrnPopoverComponent,
            BrnPopoverTriggerDirective,
            BrnPopoverCloseDirective,
            BrnPopoverContentDirective], exports: [BrnPopoverComponent,
            BrnPopoverTriggerDirective,
            BrnPopoverCloseDirective,
            BrnPopoverContentDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPopoverModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnPopoverImports],
                    exports: [...BrnPopoverImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnPopoverCloseDirective, BrnPopoverComponent, BrnPopoverContentDirective, BrnPopoverImports, BrnPopoverModule, BrnPopoverTriggerDirective };
//# sourceMappingURL=spartan-ng-ui-popover-brain.mjs.map
