import { coerceNumberProperty } from '@angular/cdk/coercion';
import { Component, Input, computed, signal } from '@angular/core';
import * as i0 from "@angular/core";
export class BrnProgressComponent {
    constructor() {
        this._value = signal(undefined);
        this.$value = this._value.asReadonly();
        this._max = signal(100);
        this.$max = this._max.asReadonly();
        this.getValueLabel = (value, max) => `${Math.round((value / max) * 100)}%`;
        this.progressState = computed(() => {
            return this._value() == null || this._value() === undefined
                ? 'indeterminate'
                : this._value() === this._max()
                    ? 'complete'
                    : 'loading';
        });
    }
    set value(newValue) {
        if (newValue === undefined || newValue === null || newValue === 'null' || newValue === 'undefined') {
            this._value.set(null);
            return;
        }
        newValue = coerceNumberProperty(newValue);
        if (newValue > this._max() || newValue < 0) {
            throw Error('Value must be 0 or greater and less or equal to max');
        }
        this._value.set(newValue);
    }
    set max(value) {
        const newValue = coerceNumberProperty(value);
        if (newValue < 0) {
            throw Error('max must be greater than 0');
        }
        this._max.set(newValue);
    }
    isNumber() {
        return typeof this._value() === 'number';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnProgressComponent, isStandalone: true, selector: "brn-progress", inputs: { value: "value", max: "max", getValueLabel: "getValueLabel" }, host: { attributes: { "role": "progressbar" }, properties: { "attr.aria-valuemax": "_max()", "attr.aria-valuemin": "0", "attr.aria-valuenow": "isNumber() ? _value() : undefined", "attr.aria-valuetext": "_value() ? getValueLabel(_value(),_max()) : undefined", "attr.data-state": "progressState()", "attr.data-value": "_value() ?? undefined", "attr.data-max": "_max()" } }, ngImport: i0, template: '<ng-content/>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-progress',
                    standalone: true,
                    template: '<ng-content/>',
                    host: {
                        role: 'progressbar',
                        '[attr.aria-valuemax]': '_max()',
                        '[attr.aria-valuemin]': '0',
                        '[attr.aria-valuenow]': 'isNumber() ? _value() : undefined',
                        '[attr.aria-valuetext]': '_value() ? getValueLabel(_value(),_max()) : undefined',
                        '[attr.data-state]': 'progressState()',
                        '[attr.data-value]': '_value() ?? undefined',
                        '[attr.data-max]': '_max()',
                    },
                }]
        }], propDecorators: { value: [{
                type: Input
            }], max: [{
                type: Input
            }], getValueLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLXByb2dyZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvdWkvcHJvZ3Jlc3MvYnJhaW4vc3JjL2xpYi9icm4tcHJvZ3Jlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBb0IsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQWlCbkUsTUFBTSxPQUFPLG9CQUFvQjtJQWZqQztRQWdCb0IsV0FBTSxHQUFHLE1BQU0sQ0FBNEIsU0FBUyxDQUFDLENBQUM7UUFDekQsV0FBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFlL0IsU0FBSSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QixTQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQVU5QyxrQkFBYSxHQUEyQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBTTlHLGtCQUFhLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLFNBQVM7Z0JBQzFELENBQUMsQ0FBQyxlQUFlO2dCQUNqQixDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQzlCLENBQUMsQ0FBQyxVQUFVO29CQUNaLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDZixDQUFDLENBQUMsQ0FBQztLQUNIO0lBdENBLElBQ0ksS0FBSyxDQUFDLFFBQXFCO1FBQzlCLElBQUksUUFBUSxLQUFLLFNBQVMsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxNQUFNLElBQUksUUFBUSxLQUFLLFdBQVcsRUFBRSxDQUFDO1lBQ3BHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RCLE9BQU87UUFDUixDQUFDO1FBRUQsUUFBUSxHQUFHLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDNUMsTUFBTSxLQUFLLENBQUMscURBQXFELENBQUMsQ0FBQztRQUNwRSxDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUlELElBQ0ksR0FBRyxDQUFDLEtBQWtCO1FBQ3pCLE1BQU0sUUFBUSxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2xCLE1BQU0sS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7UUFDM0MsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFJRCxRQUFRO1FBQ1AsT0FBTyxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxRQUFRLENBQUM7SUFDMUMsQ0FBQzs4R0FoQ1csb0JBQW9CO2tHQUFwQixvQkFBb0Isb2dCQVp0QixlQUFlOzsyRkFZYixvQkFBb0I7a0JBZmhDLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFVBQVUsRUFBRSxJQUFJO29CQUNoQixRQUFRLEVBQUUsZUFBZTtvQkFDekIsSUFBSSxFQUFFO3dCQUNMLElBQUksRUFBRSxhQUFhO3dCQUNuQixzQkFBc0IsRUFBRSxRQUFRO3dCQUNoQyxzQkFBc0IsRUFBRSxHQUFHO3dCQUMzQixzQkFBc0IsRUFBRSxtQ0FBbUM7d0JBQzNELHVCQUF1QixFQUFFLHVEQUF1RDt3QkFDaEYsbUJBQW1CLEVBQUUsaUJBQWlCO3dCQUN0QyxtQkFBbUIsRUFBRSx1QkFBdUI7d0JBQzVDLGlCQUFpQixFQUFFLFFBQVE7cUJBQzNCO2lCQUNEOzhCQUtJLEtBQUs7c0JBRFIsS0FBSztnQkFpQkYsR0FBRztzQkFETixLQUFLO2dCQVNOLGFBQWE7c0JBRFosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZU51bWJlclByb3BlcnR5LCB0eXBlIE51bWJlcklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIGNvbXB1dGVkLCBzaWduYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG5cdHNlbGVjdG9yOiAnYnJuLXByb2dyZXNzJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0dGVtcGxhdGU6ICc8bmctY29udGVudC8+Jyxcblx0aG9zdDoge1xuXHRcdHJvbGU6ICdwcm9ncmVzc2JhcicsXG5cdFx0J1thdHRyLmFyaWEtdmFsdWVtYXhdJzogJ19tYXgoKScsXG5cdFx0J1thdHRyLmFyaWEtdmFsdWVtaW5dJzogJzAnLFxuXHRcdCdbYXR0ci5hcmlhLXZhbHVlbm93XSc6ICdpc051bWJlcigpID8gX3ZhbHVlKCkgOiB1bmRlZmluZWQnLFxuXHRcdCdbYXR0ci5hcmlhLXZhbHVldGV4dF0nOiAnX3ZhbHVlKCkgPyBnZXRWYWx1ZUxhYmVsKF92YWx1ZSgpLF9tYXgoKSkgOiB1bmRlZmluZWQnLFxuXHRcdCdbYXR0ci5kYXRhLXN0YXRlXSc6ICdwcm9ncmVzc1N0YXRlKCknLFxuXHRcdCdbYXR0ci5kYXRhLXZhbHVlXSc6ICdfdmFsdWUoKSA/PyB1bmRlZmluZWQnLFxuXHRcdCdbYXR0ci5kYXRhLW1heF0nOiAnX21heCgpJyxcblx0fSxcbn0pXG5leHBvcnQgY2xhc3MgQnJuUHJvZ3Jlc3NDb21wb25lbnQge1xuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX3ZhbHVlID0gc2lnbmFsPG51bWJlciB8IG51bGwgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cdHB1YmxpYyByZWFkb25seSAkdmFsdWUgPSB0aGlzLl92YWx1ZS5hc1JlYWRvbmx5KCk7XG5cdEBJbnB1dCgpXG5cdHNldCB2YWx1ZShuZXdWYWx1ZTogTnVtYmVySW5wdXQpIHtcblx0XHRpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBuZXdWYWx1ZSA9PT0gbnVsbCB8fCBuZXdWYWx1ZSA9PT0gJ251bGwnIHx8IG5ld1ZhbHVlID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0dGhpcy5fdmFsdWUuc2V0KG51bGwpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdG5ld1ZhbHVlID0gY29lcmNlTnVtYmVyUHJvcGVydHkobmV3VmFsdWUpO1xuXHRcdGlmIChuZXdWYWx1ZSA+IHRoaXMuX21heCgpIHx8IG5ld1ZhbHVlIDwgMCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ1ZhbHVlIG11c3QgYmUgMCBvciBncmVhdGVyIGFuZCBsZXNzIG9yIGVxdWFsIHRvIG1heCcpO1xuXHRcdH1cblx0XHR0aGlzLl92YWx1ZS5zZXQobmV3VmFsdWUpO1xuXHR9XG5cblx0cHJvdGVjdGVkIHJlYWRvbmx5IF9tYXggPSBzaWduYWwoMTAwKTtcblx0cHVibGljIHJlYWRvbmx5ICRtYXggPSB0aGlzLl9tYXguYXNSZWFkb25seSgpO1xuXHRASW5wdXQoKVxuXHRzZXQgbWF4KHZhbHVlOiBOdW1iZXJJbnB1dCkge1xuXHRcdGNvbnN0IG5ld1ZhbHVlID0gY29lcmNlTnVtYmVyUHJvcGVydHkodmFsdWUpO1xuXHRcdGlmIChuZXdWYWx1ZSA8IDApIHtcblx0XHRcdHRocm93IEVycm9yKCdtYXggbXVzdCBiZSBncmVhdGVyIHRoYW4gMCcpO1xuXHRcdH1cblx0XHR0aGlzLl9tYXguc2V0KG5ld1ZhbHVlKTtcblx0fVxuXHRASW5wdXQoKVxuXHRnZXRWYWx1ZUxhYmVsOiAodmFsdWU6IG51bWJlciwgbWF4OiBudW1iZXIpID0+IHN0cmluZyA9ICh2YWx1ZSwgbWF4KSA9PiBgJHtNYXRoLnJvdW5kKCh2YWx1ZSAvIG1heCkgKiAxMDApfSVgO1xuXG5cdGlzTnVtYmVyKCkge1xuXHRcdHJldHVybiB0eXBlb2YgdGhpcy5fdmFsdWUoKSA9PT0gJ251bWJlcic7XG5cdH1cblxuXHRwcm9ncmVzc1N0YXRlID0gY29tcHV0ZWQoKCkgPT4ge1xuXHRcdHJldHVybiB0aGlzLl92YWx1ZSgpID09IG51bGwgfHwgdGhpcy5fdmFsdWUoKSA9PT0gdW5kZWZpbmVkXG5cdFx0XHQ/ICdpbmRldGVybWluYXRlJ1xuXHRcdFx0OiB0aGlzLl92YWx1ZSgpID09PSB0aGlzLl9tYXgoKVxuXHRcdFx0XHQ/ICdjb21wbGV0ZSdcblx0XHRcdFx0OiAnbG9hZGluZyc7XG5cdH0pO1xufVxuIl19