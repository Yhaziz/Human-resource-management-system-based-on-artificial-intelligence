import * as i0 from '@angular/core';
import { signal, computed, Component, Input, inject, NgModule } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';

class BrnProgressComponent {
    constructor() {
        this._value = signal(undefined);
        this.$value = this._value.asReadonly();
        this._max = signal(100);
        this.$max = this._max.asReadonly();
        this.getValueLabel = (value, max) => `${Math.round((value / max) * 100)}%`;
        this.progressState = computed(() => {
            return this._value() == null || this._value() === undefined
                ? 'indeterminate'
                : this._value() === this._max()
                    ? 'complete'
                    : 'loading';
        });
    }
    set value(newValue) {
        if (newValue === undefined || newValue === null || newValue === 'null' || newValue === 'undefined') {
            this._value.set(null);
            return;
        }
        newValue = coerceNumberProperty(newValue);
        if (newValue > this._max() || newValue < 0) {
            throw Error('Value must be 0 or greater and less or equal to max');
        }
        this._value.set(newValue);
    }
    set max(value) {
        const newValue = coerceNumberProperty(value);
        if (newValue < 0) {
            throw Error('max must be greater than 0');
        }
        this._max.set(newValue);
    }
    isNumber() {
        return typeof this._value() === 'number';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnProgressComponent, isStandalone: true, selector: "brn-progress", inputs: { value: "value", max: "max", getValueLabel: "getValueLabel" }, host: { attributes: { "role": "progressbar" }, properties: { "attr.aria-valuemax": "_max()", "attr.aria-valuemin": "0", "attr.aria-valuenow": "isNumber() ? _value() : undefined", "attr.aria-valuetext": "_value() ? getValueLabel(_value(),_max()) : undefined", "attr.data-state": "progressState()", "attr.data-value": "_value() ?? undefined", "attr.data-max": "_max()" } }, ngImport: i0, template: '<ng-content/>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-progress',
                    standalone: true,
                    template: '<ng-content/>',
                    host: {
                        role: 'progressbar',
                        '[attr.aria-valuemax]': '_max()',
                        '[attr.aria-valuemin]': '0',
                        '[attr.aria-valuenow]': 'isNumber() ? _value() : undefined',
                        '[attr.aria-valuetext]': '_value() ? getValueLabel(_value(),_max()) : undefined',
                        '[attr.data-state]': 'progressState()',
                        '[attr.data-value]': '_value() ?? undefined',
                        '[attr.data-max]': '_max()',
                    },
                }]
        }], propDecorators: { value: [{
                type: Input
            }], max: [{
                type: Input
            }], getValueLabel: [{
                type: Input
            }] } });

class BrnProgressIndicatorComponent {
    constructor() {
        this._parent = inject(BrnProgressComponent);
        this.progressState = this._parent.progressState;
        this.max = this._parent.$max;
        this.value = this._parent.$value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressIndicatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnProgressIndicatorComponent, isStandalone: true, selector: "brn-progress-indicator", host: { properties: { "attr.data-state": "progressState()", "attr.data-value": "value() ?? undefined", "attr.data-max": "max()" } }, ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressIndicatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-progress-indicator',
                    standalone: true,
                    template: '',
                    host: {
                        '[attr.data-state]': 'progressState()',
                        '[attr.data-value]': 'value() ?? undefined',
                        '[attr.data-max]': 'max()',
                    },
                }]
        }] });

const BrnProgressImports = [BrnProgressComponent, BrnProgressIndicatorComponent];
class BrnProgressModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressModule, imports: [BrnProgressComponent, BrnProgressIndicatorComponent], exports: [BrnProgressComponent, BrnProgressIndicatorComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnProgressModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...BrnProgressImports],
                    exports: [...BrnProgressImports],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { BrnProgressComponent, BrnProgressImports, BrnProgressIndicatorComponent, BrnProgressModule };
//# sourceMappingURL=spartan-ng-ui-progress-brain.mjs.map
