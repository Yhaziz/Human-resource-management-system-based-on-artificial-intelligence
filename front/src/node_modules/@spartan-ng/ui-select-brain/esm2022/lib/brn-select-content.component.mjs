import { CdkListbox } from '@angular/cdk/listbox';
import { NgTemplateOutlet } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, DestroyRef, ElementRef, ViewChild, effect, inject, signal, } from '@angular/core';
import { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';
import { BrnSelectOptionDirective } from './brn-select-option.directive';
import { BrnSelectScrollDownDirective } from './brn-select-scroll-down.directive';
import { BrnSelectScrollUpDirective } from './brn-select-scroll-up.directive';
import { BrnSelectService } from './brn-select.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/listbox";
export class BrnSelectContentComponent {
    constructor() {
        this._el = inject(ElementRef);
        this._cdkListbox = inject(CdkListbox, { host: true });
        this.destroyRef = inject(DestroyRef);
        this._selectService = inject(BrnSelectService);
        this.labelledBy = this._selectService.labelId;
        this.id = this._selectService.id;
        this.canScrollUp = signal(false);
        this.canScrollDown = signal(false);
        this.initialSelectedOptions$ = toObservable(this._selectService.initialSelectedOptions);
        this._cdkListbox.valueChange
            .asObservable()
            .pipe(takeUntilDestroyed())
            .subscribe((val) => this._selectService.listBoxValueChangeEvent$.next(val));
        effect(() => {
            this._cdkListbox.multiple = this._selectService.multiple();
            this._selectService.isExpanded() && setTimeout(() => this.updateArrowDisplay());
        });
    }
    ngAfterViewInit() {
        this.setInitiallySelectedOptions();
    }
    setInitiallySelectedOptions() {
        this.initialSelectedOptions$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe((selectedOptions) => {
            // Reapplying cdkLibstbox multiple because seems this is running before effect that
            // updates cdklistbox, reapplying multiple true so we can set the multiple initial options
            if (this._selectService.multiple()) {
                this._cdkListbox.multiple = true;
            }
            this._selectService.possibleOptions().forEach((cdkOption) => {
                if (selectedOptions.includes(cdkOption)) {
                    cdkOption?.select();
                }
                else {
                    cdkOption?.deselect();
                }
            });
            selectedOptions.forEach((cdkOption) => cdkOption?.select());
        });
    }
    updateArrowDisplay() {
        this.canScrollUp.set(this.viewport.nativeElement.scrollTop > 0);
        const maxScroll = this.viewport.nativeElement.scrollHeight - this.viewport.nativeElement.clientHeight;
        this.canScrollDown.set(Math.ceil(this.viewport.nativeElement.scrollTop) < maxScroll);
    }
    handleScroll() {
        this.updateArrowDisplay();
    }
    focusList() {
        this._cdkListbox.focus();
    }
    moveFocusUp() {
        this.viewport.nativeElement.scrollBy({ top: -100, behavior: 'smooth' });
        if (this.viewport.nativeElement.scrollTop === 0) {
            this.scrollUpBtn.stopEmittingEvents();
        }
    }
    moveFocusDown() {
        this.viewport.nativeElement.scrollBy({ top: 100, behavior: 'smooth' });
        const viewportSize = this._el.nativeElement.scrollHeight;
        const viewportScrollPosition = this.viewport.nativeElement.scrollTop;
        if (viewportSize + viewportScrollPosition + 100 > this.viewport.nativeElement.scrollHeight + 50) {
            this.scrollDownBtn.stopEmittingEvents();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.5", type: BrnSelectContentComponent, isStandalone: true, selector: "brn-select-content, hlm-select-content:not(noHlm)", host: { properties: { "attr.aria-labelledBy": "labelledBy()", "attr.aria-controlledBy": "id() +'--trigger'", "id": "id() + '--content'", "attr.dir": "_selectService.dir()" } }, queries: [{ propertyName: "scrollUpBtn", first: true, predicate: BrnSelectScrollUpDirective, descendants: true }, { propertyName: "scrollDownBtn", first: true, predicate: BrnSelectScrollDownDirective, descendants: true }, { propertyName: "_options", predicate: BrnSelectOptionDirective, descendants: true }], viewQueries: [{ propertyName: "viewport", first: true, predicate: ["viewport"], descendants: true }], hostDirectives: [{ directive: i1.CdkListbox }], ngImport: i0, template: `
		<ng-template #scrollUp>
			<ng-content select="hlm-select-scroll-up" />
			<ng-content select="brnSelectScrollUp" />
		</ng-template>
		<ng-container *ngTemplateOutlet="canScrollUp() && scrollUpBtn ? scrollUp : null" />
		<div
			data-brn-select-viewport
			#viewport
			(scroll)="handleScroll()"
			style="flex: 1 1 0%;
			position: relative;
			width:100%;
			overflow:auto;
			min-height: 36px;
      padding-bottom: 2px;
      margin-bottom: -2px;"
		>
			<ng-content />
		</div>
		<ng-template #scrollDown>
			<ng-content select="brnSelectScrollDown" />
			<ng-content select="hlm-select-scroll-down" />
		</ng-template>
		<ng-container *ngTemplateOutlet="canScrollDown() && scrollDownBtn ? scrollDown : null" />
	`, isInline: true, styles: [":host{display:flex;box-sizing:border-box;flex-direction:column;outline:none;pointer-events:auto}[data-brn-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch}[data-brn-select-viewport]::-webkit-scrollbar{display:none}\n"], dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'brn-select-content, hlm-select-content:not(noHlm)', standalone: true, imports: [BrnSelectScrollUpDirective, BrnSelectScrollDownDirective, NgTemplateOutlet], hostDirectives: [CdkListbox], changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[attr.aria-labelledBy]': 'labelledBy()',
                        '[attr.aria-controlledBy]': "id() +'--trigger'",
                        '[id]': "id() + '--content'",
                        '[attr.dir]': '_selectService.dir()',
                    }, template: `
		<ng-template #scrollUp>
			<ng-content select="hlm-select-scroll-up" />
			<ng-content select="brnSelectScrollUp" />
		</ng-template>
		<ng-container *ngTemplateOutlet="canScrollUp() && scrollUpBtn ? scrollUp : null" />
		<div
			data-brn-select-viewport
			#viewport
			(scroll)="handleScroll()"
			style="flex: 1 1 0%;
			position: relative;
			width:100%;
			overflow:auto;
			min-height: 36px;
      padding-bottom: 2px;
      margin-bottom: -2px;"
		>
			<ng-content />
		</div>
		<ng-template #scrollDown>
			<ng-content select="brnSelectScrollDown" />
			<ng-content select="hlm-select-scroll-down" />
		</ng-template>
		<ng-container *ngTemplateOutlet="canScrollDown() && scrollDownBtn ? scrollDown : null" />
	`, styles: [":host{display:flex;box-sizing:border-box;flex-direction:column;outline:none;pointer-events:auto}[data-brn-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch}[data-brn-select-viewport]::-webkit-scrollbar{display:none}\n"] }]
        }], ctorParameters: () => [], propDecorators: { viewport: [{
                type: ViewChild,
                args: ['viewport']
            }], scrollUpBtn: [{
                type: ContentChild,
                args: [BrnSelectScrollUpDirective, { static: false }]
            }], scrollDownBtn: [{
                type: ContentChild,
                args: [BrnSelectScrollDownDirective, { static: false }]
            }], _options: [{
                type: ContentChildren,
                args: [BrnSelectOptionDirective, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,