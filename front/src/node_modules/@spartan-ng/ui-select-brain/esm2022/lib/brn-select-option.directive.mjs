import { CdkOption } from '@angular/cdk/listbox';
import { Directive, ElementRef, Input, computed, inject, signal } from '@angular/core';
import { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';
import { BrnSelectService } from './brn-select.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/listbox";
export class BrnSelectOptionDirective {
    constructor() {
        this._cdkSelectOption = inject(CdkOption, { host: true });
        this._selectService = inject(BrnSelectService);
        this._selected = signal(false);
        this._focused = signal(false);
        this.elementRef = inject(ElementRef);
        this.selected = computed(() => this._selected());
        this.focused = computed(() => this._focused());
        this.checkedState = computed(() => (this._selected() ? 'checked' : 'unchecked'));
        this.dir = computed(() => this._selectService.dir());
        this._disabled = false;
        this._selectService.registerOption(this._cdkSelectOption);
        toObservable(this._selectService.value)
            .pipe(takeUntilDestroyed())
            .subscribe((selectedValues) => {
            if (Array.isArray(selectedValues)) {
                const itemFound = selectedValues.find((val) => val === this._cdkSelectOption.value);
                this._selected.set(!!itemFound);
            }
            else {
                this._selected.set(this._cdkSelectOption.value === selectedValues);
            }
        });
    }
    ngOnDestroy() {
        this._selectService.deregisterOption(this._cdkSelectOption);
    }
    set value(value) {
        this._cdkSelectOption.value = value;
    }
    set disabled(value) {
        this._disabled = value;
    }
    get disabled() {
        return this._disabled;
    }
    hover() {
        this.focus();
    }
    focus() {
        this._cdkSelectOption.focus();
        this._focused.set(true);
    }
    blur() {
        this._focused.set(false);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectOptionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnSelectOptionDirective, isStandalone: true, selector: "[brnOption]", inputs: { value: "value", disabled: "disabled" }, host: { listeners: { "mouseenter": "hover()", "blur": "blur()" }, properties: { "attr.dir": "_selectService.dir()" } }, hostDirectives: [{ directive: i1.CdkOption }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectOptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnOption]',
                    standalone: true,
                    hostDirectives: [CdkOption],
                    host: {
                        '(mouseenter)': 'hover()',
                        '(blur)': 'blur()',
                        '[attr.dir]': '_selectService.dir()',
                    },
                }]
        }], ctorParameters: () => [], propDecorators: { value: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLXNlbGVjdC1vcHRpb24uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS9zZWxlY3QvYnJhaW4vc3JjL2xpYi9icm4tc2VsZWN0LW9wdGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDdkcsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFZeEQsTUFBTSxPQUFPLHdCQUF3QjtJQWFwQztRQVppQixxQkFBZ0IsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbkQsbUJBQWMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUU1QyxjQUFTLEdBQUcsTUFBTSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBQ25DLGFBQVEsR0FBRyxNQUFNLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDbkMsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVoQyxhQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLFlBQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDMUMsaUJBQVksR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUM1RSxRQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQWlDeEQsY0FBUyxHQUFHLEtBQUssQ0FBQztRQTlCekIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFMUQsWUFBWSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO2FBQ3JDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO2FBQzFCLFNBQVMsQ0FBQyxDQUFDLGNBQWlDLEVBQUUsRUFBRTtZQUNoRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQztnQkFDbkMsTUFBTSxTQUFTLEdBQUksY0FBaUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNqQyxDQUFDO2lCQUFNLENBQUM7Z0JBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssS0FBSyxjQUFjLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0YsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNWLElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQ0ksS0FBSyxDQUFDLEtBQXFCO1FBQzlCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUNJLFFBQVEsQ0FBQyxLQUFjO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFDRCxJQUFJLFFBQVE7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDdkIsQ0FBQztJQUdTLEtBQUs7UUFDZCxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRU0sS0FBSztRQUNYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU0sSUFBSTtRQUNWLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7OEdBekRXLHdCQUF3QjtrR0FBeEIsd0JBQXdCOzsyRkFBeEIsd0JBQXdCO2tCQVZwQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxhQUFhO29CQUN2QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsY0FBYyxFQUFFLENBQUMsU0FBUyxDQUFDO29CQUMzQixJQUFJLEVBQUU7d0JBQ0wsY0FBYyxFQUFFLFNBQVM7d0JBQ3pCLFFBQVEsRUFBRSxRQUFRO3dCQUNsQixZQUFZLEVBQUUsc0JBQXNCO3FCQUNwQztpQkFDRDt3REFrQ0ksS0FBSztzQkFEUixLQUFLO2dCQU1GLFFBQVE7c0JBRFgsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRm9jdXNhYmxlT3B0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgQ2RrT3B0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2xpc3Rib3gnO1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCwgY29tcHV0ZWQsIGluamVjdCwgc2lnbmFsLCB0eXBlIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkLCB0b09ic2VydmFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBCcm5TZWxlY3RTZXJ2aWNlIH0gZnJvbSAnLi9icm4tc2VsZWN0LnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcblx0c2VsZWN0b3I6ICdbYnJuT3B0aW9uXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdGhvc3REaXJlY3RpdmVzOiBbQ2RrT3B0aW9uXSxcblx0aG9zdDoge1xuXHRcdCcobW91c2VlbnRlciknOiAnaG92ZXIoKScsXG5cdFx0JyhibHVyKSc6ICdibHVyKCknLFxuXHRcdCdbYXR0ci5kaXJdJzogJ19zZWxlY3RTZXJ2aWNlLmRpcigpJyxcblx0fSxcbn0pXG5leHBvcnQgY2xhc3MgQnJuU2VsZWN0T3B0aW9uRGlyZWN0aXZlIGltcGxlbWVudHMgRm9jdXNhYmxlT3B0aW9uLCBPbkRlc3Ryb3kge1xuXHRwcml2YXRlIHJlYWRvbmx5IF9jZGtTZWxlY3RPcHRpb24gPSBpbmplY3QoQ2RrT3B0aW9uLCB7IGhvc3Q6IHRydWUgfSk7XG5cdHByb3RlY3RlZCByZWFkb25seSBfc2VsZWN0U2VydmljZSA9IGluamVjdChCcm5TZWxlY3RTZXJ2aWNlKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IF9zZWxlY3RlZCA9IHNpZ25hbDxib29sZWFuPihmYWxzZSk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2ZvY3VzZWQgPSBzaWduYWw8Ym9vbGVhbj4oZmFsc2UpO1xuXHRwdWJsaWMgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdChFbGVtZW50UmVmKTtcblxuXHRwdWJsaWMgcmVhZG9ubHkgc2VsZWN0ZWQgPSBjb21wdXRlZCgoKSA9PiB0aGlzLl9zZWxlY3RlZCgpKTtcblx0cHVibGljIHJlYWRvbmx5IGZvY3VzZWQgPSBjb21wdXRlZCgoKSA9PiB0aGlzLl9mb2N1c2VkKCkpO1xuXHRwdWJsaWMgcmVhZG9ubHkgY2hlY2tlZFN0YXRlID0gY29tcHV0ZWQoKCkgPT4gKHRoaXMuX3NlbGVjdGVkKCkgPyAnY2hlY2tlZCcgOiAndW5jaGVja2VkJykpO1xuXHRwdWJsaWMgcmVhZG9ubHkgZGlyID0gY29tcHV0ZWQoKCkgPT4gdGhpcy5fc2VsZWN0U2VydmljZS5kaXIoKSk7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5fc2VsZWN0U2VydmljZS5yZWdpc3Rlck9wdGlvbih0aGlzLl9jZGtTZWxlY3RPcHRpb24pO1xuXG5cdFx0dG9PYnNlcnZhYmxlKHRoaXMuX3NlbGVjdFNlcnZpY2UudmFsdWUpXG5cdFx0XHQucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQoKSlcblx0XHRcdC5zdWJzY3JpYmUoKHNlbGVjdGVkVmFsdWVzOiBzdHJpbmcgfCBzdHJpbmdbXSkgPT4ge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShzZWxlY3RlZFZhbHVlcykpIHtcblx0XHRcdFx0XHRjb25zdCBpdGVtRm91bmQgPSAoc2VsZWN0ZWRWYWx1ZXMgYXMgQXJyYXk8dW5rbm93bj4pLmZpbmQoKHZhbCkgPT4gdmFsID09PSB0aGlzLl9jZGtTZWxlY3RPcHRpb24udmFsdWUpO1xuXHRcdFx0XHRcdHRoaXMuX3NlbGVjdGVkLnNldCghIWl0ZW1Gb3VuZCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5fc2VsZWN0ZWQuc2V0KHRoaXMuX2Nka1NlbGVjdE9wdGlvbi52YWx1ZSA9PT0gc2VsZWN0ZWRWYWx1ZXMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0fVxuXG5cdG5nT25EZXN0cm95KCkge1xuXHRcdHRoaXMuX3NlbGVjdFNlcnZpY2UuZGVyZWdpc3Rlck9wdGlvbih0aGlzLl9jZGtTZWxlY3RPcHRpb24pO1xuXHR9XG5cblx0QElucHV0KClcblx0c2V0IHZhbHVlKHZhbHVlOiB1bmtub3duIHwgbnVsbCkge1xuXHRcdHRoaXMuX2Nka1NlbGVjdE9wdGlvbi52YWx1ZSA9IHZhbHVlO1xuXHR9XG5cblx0QElucHV0KClcblx0c2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKSB7XG5cdFx0dGhpcy5fZGlzYWJsZWQgPSB2YWx1ZTtcblx0fVxuXHRnZXQgZGlzYWJsZWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuXHR9XG5cdHByaXZhdGUgX2Rpc2FibGVkID0gZmFsc2U7XG5cblx0cHJvdGVjdGVkIGhvdmVyKCk6IHZvaWQge1xuXHRcdHRoaXMuZm9jdXMoKTtcblx0fVxuXG5cdHB1YmxpYyBmb2N1cygpOiB2b2lkIHtcblx0XHR0aGlzLl9jZGtTZWxlY3RPcHRpb24uZm9jdXMoKTtcblx0XHR0aGlzLl9mb2N1c2VkLnNldCh0cnVlKTtcblx0fVxuXG5cdHB1YmxpYyBibHVyKCk6IHZvaWQge1xuXHRcdHRoaXMuX2ZvY3VzZWQuc2V0KGZhbHNlKTtcblx0fVxufVxuIl19