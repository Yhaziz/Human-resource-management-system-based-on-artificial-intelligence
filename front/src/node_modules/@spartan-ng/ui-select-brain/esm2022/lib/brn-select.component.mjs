import { CdkListbox, CdkListboxModule } from '@angular/cdk/listbox';
import { CdkConnectedOverlay, OverlayModule, } from '@angular/cdk/overlay';
import { JsonPipe } from '@angular/common';
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, Input, Output, ViewChild, computed, inject, input, signal, } from '@angular/core';
import { takeUntilDestroyed, toObservable, toSignal } from '@angular/core/rxjs-interop';
import { NgControl } from '@angular/forms';
import { provideExposedSideProviderExisting, provideExposesStateProviderExisting, } from '@spartan-ng/ui-core';
import { BrnLabelDirective } from '@spartan-ng/ui-label-brain';
import { Subject, delay, map, of, skip, switchMap } from 'rxjs';
import { BrnSelectContentComponent } from './brn-select-content.component';
import { BrnSelectOptionDirective } from './brn-select-option.directive';
import { BrnSelectTriggerDirective } from './brn-select-trigger.directive';
import { BrnSelectService } from './brn-select.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
let nextId = 0;
export class BrnSelectComponent {
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set multiple(multiple) {
        this._selectService.state.update((state) => ({ ...state, multiple }));
    }
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set placeholder(placeholder) {
        this._selectService.state.update((state) => ({ ...state, placeholder }));
    }
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set disabled(disabled) {
        this._selectService.state.update((state) => ({ ...state, disabled }));
    }
    constructor() {
        this._selectService = inject(BrnSelectService);
        this.triggerWidth = this._selectService.triggerWidth;
        this._multiple = this._selectService.multiple;
        this._placeholder = this._selectService.placeholder;
        this._disabled = this._selectService.disabled;
        this.dir = input('ltr');
        this.openedChange = new EventEmitter();
        this.closeDelay = input(100);
        this.isExpanded = this._selectService.isExpanded;
        this._delayedExpanded = toSignal(toObservable(this.isExpanded).pipe(switchMap((expanded) => (!expanded ? of(expanded).pipe(delay(this.closeDelay())) : of(expanded))), takeUntilDestroyed()), { initialValue: false });
        this.state = computed(() => (this.isExpanded() ? 'open' : 'closed'));
        this._positionChanges$ = new Subject();
        this.side = toSignal(this._positionChanges$.pipe(map((change) => 
        // todo: better translation or adjusting hlm to take that into account
        change.connectionPair.originY === 'center'
            ? change.connectionPair.originX === 'start'
                ? 'left'
                : 'right'
            : change.connectionPair.originY)), { initialValue: 'bottom' });
        this.backupLabelId = computed(() => this._selectService.labelId());
        this.labelProvided = signal(false);
        this.ngControl = inject(NgControl, { optional: true, self: true });
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this._onChange = () => { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this._onTouched = () => { };
        /*
         * This position config ensures that the top "start" corner of the overlay
         * is aligned with with the top "start" of the origin by default (overlapping
         * the trigger completely). If the panel cannot fit below the trigger, it
         * will fall back to a position above the trigger.
         */
        this._positions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'end',
                originY: 'bottom',
                overlayX: 'end',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
            {
                originX: 'end',
                originY: 'top',
                overlayX: 'end',
                overlayY: 'bottom',
            },
        ];
        this._selectService.state.update((state) => ({
            ...state,
            id: `brn-select-${nextId++}`,
        }));
        if (this.ngControl != null) {
            this.ngControl.valueAccessor = this;
        }
        // Watch for Listbox Selection Changes to trigger Collapse
        this._selectService.listBoxValueChangeEvent$.pipe(takeUntilDestroyed()).subscribe(() => {
            if (!this._multiple()) {
                this.close();
            }
        });
        toObservable(this._selectService.value)
            // skipping first else ngcontrol always starts off as dirty and triggering value change on init value
            .pipe(takeUntilDestroyed(), skip(1))
            .subscribe((value) => this._onChange(value || null));
        toObservable(this.dir)
            .pipe(takeUntilDestroyed())
            .subscribe(() => this._selectService.state.update((state) => ({
            ...state,
            dir: this.dir(),
        })));
    }
    ngAfterContentInit() {
        // Check if Label Directive Provided and pass to service
        if (this.selectLabel) {
            this.labelProvided.set(true);
            this._selectService.state.update((state) => ({
                ...state,
                labelId: this.selectLabel.id,
                dir: this.dir(),
            }));
        }
        else if (this._placeholder()) {
            this._selectService.state.update((state) => ({
                ...state,
                labelId: `${state.id}--label`,
                dir: this.dir(),
            }));
        }
    }
    toggle() {
        if (this.isExpanded()) {
            this.close();
        }
        else {
            this.open();
        }
    }
    open() {
        if (!this._canOpen())
            return;
        this._selectService.state.update((state) => ({
            ...state,
            isExpanded: true,
        }));
        this.openedChange.next(true);
        this._moveFocusToCDKList();
    }
    close() {
        if (!this.isExpanded())
            return;
        if (this._selectService.selectTrigger) {
            this._selectService.selectTrigger.focus();
        }
        this.openedChange.next(false);
        this._selectService.state.update((state) => ({
            ...state,
            isExpanded: false,
        }));
        this._onTouched();
    }
    _canOpen() {
        return !this.isExpanded() && !this._disabled() && this.options?.length > 0;
    }
    _moveFocusToCDKList() {
        setTimeout(() => this.selectContent.focusList());
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    writeValue(value) {
        this._selectService.setInitialSelectedOptions(value);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.5", type: BrnSelectComponent, isStandalone: true, selector: "brn-select, hlm-select", inputs: { multiple: { classPropertyName: "multiple", publicName: "multiple", isSignal: false, isRequired: false, transformFunction: null }, placeholder: { classPropertyName: "placeholder", publicName: "placeholder", isSignal: false, isRequired: false, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: false, isRequired: false, transformFunction: null }, dir: { classPropertyName: "dir", publicName: "dir", isSignal: true, isRequired: false, transformFunction: null }, closeDelay: { classPropertyName: "closeDelay", publicName: "closeDelay", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { openedChange: "openedChange" }, providers: [
            BrnSelectService,
            CdkListbox,
            provideExposedSideProviderExisting(() => BrnSelectComponent),
            provideExposesStateProviderExisting(() => BrnSelectComponent),
        ], queries: [{ propertyName: "selectLabel", first: true, predicate: BrnLabelDirective }, { propertyName: "selectContent", first: true, predicate: BrnSelectContentComponent, descendants: true }, { propertyName: "options", predicate: BrnSelectOptionDirective, descendants: true }], viewQueries: [{ propertyName: "_overlayDir", first: true, predicate: CdkConnectedOverlay, descendants: true }], ngImport: i0, template: `
		@if (!labelProvided() && _placeholder()) {
			<label class="hidden" [attr.id]="backupLabelId()">{{ _placeholder() }}</label>
		} @else {
			<ng-content select="label[hlmLabel],label[brnLabel]" />
		}

		<div cdk-overlay-origin (click)="toggle()" #trigger="cdkOverlayOrigin">
			<ng-content select="hlm-select-trigger,[brnSelectTrigger]" />
		</div>
		<ng-template
			cdk-connected-overlay
			cdkConnectedOverlayLockPosition
			cdkConnectedOverlayHasBackdrop
			cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
			[cdkConnectedOverlayOrigin]="trigger"
			[cdkConnectedOverlayOpen]="_delayedExpanded()"
			[cdkConnectedOverlayPositions]="_positions"
			[cdkConnectedOverlayWidth]="triggerWidth() > 0 ? triggerWidth() : 'auto'"
			(backdropClick)="close()"
			(detach)="close()"
			(positionChange)="_positionChanges$.next($event)"
		>
			<ng-content />
		</ng-template>
	`, isInline: true, dependencies: [{ kind: "ngmodule", type: OverlayModule }, { kind: "directive", type: i1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "directive", type: i1.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { kind: "ngmodule", type: CdkListboxModule }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-select, hlm-select',
                    standalone: true,
                    imports: [OverlayModule, BrnSelectTriggerDirective, CdkListboxModule, JsonPipe],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        BrnSelectService,
                        CdkListbox,
                        provideExposedSideProviderExisting(() => BrnSelectComponent),
                        provideExposesStateProviderExisting(() => BrnSelectComponent),
                    ],
                    template: `
		@if (!labelProvided() && _placeholder()) {
			<label class="hidden" [attr.id]="backupLabelId()">{{ _placeholder() }}</label>
		} @else {
			<ng-content select="label[hlmLabel],label[brnLabel]" />
		}

		<div cdk-overlay-origin (click)="toggle()" #trigger="cdkOverlayOrigin">
			<ng-content select="hlm-select-trigger,[brnSelectTrigger]" />
		</div>
		<ng-template
			cdk-connected-overlay
			cdkConnectedOverlayLockPosition
			cdkConnectedOverlayHasBackdrop
			cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
			[cdkConnectedOverlayOrigin]="trigger"
			[cdkConnectedOverlayOpen]="_delayedExpanded()"
			[cdkConnectedOverlayPositions]="_positions"
			[cdkConnectedOverlayWidth]="triggerWidth() > 0 ? triggerWidth() : 'auto'"
			(backdropClick)="close()"
			(detach)="close()"
			(positionChange)="_positionChanges$.next($event)"
		>
			<ng-content />
		</ng-template>
	`,
                }]
        }], ctorParameters: () => [], propDecorators: { multiple: [{
                type: Input,
                args: [{ alias: 'multiple' }]
            }], placeholder: [{
                type: Input,
                args: [{ alias: 'placeholder' }]
            }], disabled: [{
                type: Input,
                args: [{ alias: 'disabled' }]
            }], selectLabel: [{
                type: ContentChild,
                args: [BrnLabelDirective, { descendants: false }]
            }], selectContent: [{
                type: ContentChild,
                args: [BrnSelectContentComponent]
            }], options: [{
                type: ContentChildren,
                args: [BrnSelectOptionDirective, { descendants: true }]
            }], _overlayDir: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }], openedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,