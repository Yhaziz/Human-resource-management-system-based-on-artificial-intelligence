import { Injectable, computed, signal } from '@angular/core';
import { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';
import { Subject, skip } from 'rxjs';
import * as i0 from "@angular/core";
export class BrnSelectService {
    get selectTrigger() {
        return this._selectTrigger;
    }
    constructor() {
        this.state = signal({
            id: '',
            labelId: '',
            panelId: '',
            placeholder: '',
            isExpanded: false,
            multiple: false,
            disabled: false,
            dir: 'ltr',
            selectedOptions: [],
            initialSelectedOptions: [],
            value: '',
            triggerWidth: 0,
        });
        this.id = computed(() => this.state().id);
        this.labelId = computed(() => this.state().labelId);
        this.panelId = computed(() => this.state().panelId);
        this.placeholder = computed(() => this.state().placeholder);
        this.disabled = computed(() => this.state().disabled);
        this.isExpanded = computed(() => this.state().isExpanded);
        this.multiple = computed(() => this.state().multiple);
        this.dir = computed(() => this.state().dir);
        this.selectedOptions = computed(() => this.state().selectedOptions);
        this.initialSelectedOptions = computed(() => this.state().initialSelectedOptions);
        this.value = computed(() => this.state().value);
        this.triggerWidth = computed(() => this.state().triggerWidth);
        this.possibleOptions = computed(() => this._possibleOptions());
        this._possibleOptions = signal([]);
        this.multiple$ = toObservable(this.multiple);
        this.listBoxValueChangeEvent$ = new Subject();
        this.listBoxValueChangeEvent$.pipe(takeUntilDestroyed()).subscribe((listBoxChange) => {
            const updatedSelections = this.multiple() ? this.getUpdatedOptions(listBoxChange) : [listBoxChange.option];
            const value = this.multiple() ? listBoxChange.value : listBoxChange.value[0];
            this.state.update((state) => ({
                ...state,
                selectedOptions: [...updatedSelections],
                value: value,
            }));
        });
        // We need to skip the first value because we don't want to deselect all options when the component is initialized with a preselected value e.g. by the form control
        this.multiple$.pipe(skip(1), takeUntilDestroyed()).subscribe((multiple) => {
            if (!multiple && this.value().length > 1) {
                this.deselectAllOptions();
            }
        });
    }
    setTriggerWidth(triggerWidth) {
        this.state.update((s) => ({ ...s, triggerWidth }));
    }
    getUpdatedOptions(latestListboxChange) {
        const isNewSelection = latestListboxChange.value.findIndex((value) => value === latestListboxChange.option?.value);
        if (isNewSelection === -1) {
            const removedOptionIndex = this.selectedOptions().findIndex((option) => latestListboxChange.option === option);
            const options = this.selectedOptions();
            options.splice(removedOptionIndex, 1);
            return options;
        }
        return [...this.selectedOptions(), latestListboxChange.option];
    }
    deselectAllOptions() {
        this.state.update((state) => ({
            ...state,
            selectedOptions: [],
            value: [],
        }));
    }
    // Needed due to https://github.com/angular/angular/issues/20810
    _setSelectTrigger(trigger) {
        this._selectTrigger = trigger;
    }
    registerOption(option) {
        this._possibleOptions.update((options) => [...options, option]);
    }
    deregisterOption(option) {
        this._possibleOptions.update((options) => options.filter((o) => o !== option));
    }
    setInitialSelectedOptions(value) {
        this.selectOptionByValue(value);
        this.state.update((state) => ({
            ...state,
            initialSelectedOptions: this.selectedOptions(),
        }));
    }
    selectOptionByValue(value) {
        if (value === null || value === undefined) {
            this.state.update((state) => ({
                ...state,
                selectedOptions: [],
                value: this.multiple() ? [] : '',
            }));
            return;
        }
        const options = this._possibleOptions();
        if (this.multiple()) {
            const selectedOptions = options.filter((option) => {
                if (Array.isArray(value)) {
                    return value.includes(option?.value);
                }
                return value === option?.value;
            });
            this.state.update((state) => ({
                ...state,
                selectedOptions,
                value: value,
            }));
        }
        else {
            const selectedOption = options.find((option) => option?.value === value);
            if (!selectedOption) {
                return;
            }
            this.state.update((state) => ({
                ...state,
                selectedOptions: [selectedOption],
                value: selectedOption.value,
            }));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnSelectService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,