import type { FocusableOption } from '@angular/cdk/a11y';
import { ElementRef, type OnDestroy } from '@angular/core';
import { BrnSelectService } from './brn-select.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/listbox";
export declare class BrnSelectOptionDirective implements FocusableOption, OnDestroy {
    private readonly _cdkSelectOption;
    protected readonly _selectService: BrnSelectService;
    private readonly _selected;
    private readonly _focused;
    readonly elementRef: ElementRef<any>;
    readonly selected: import("@angular/core").Signal<boolean>;
    readonly focused: import("@angular/core").Signal<boolean>;
    readonly checkedState: import("@angular/core").Signal<"checked" | "unchecked">;
    readonly dir: import("@angular/core").Signal<"ltr" | "rtl">;
    constructor();
    ngOnDestroy(): void;
    set value(value: unknown | null);
    set disabled(value: boolean);
    get disabled(): boolean;
    private _disabled;
    protected hover(): void;
    focus(): void;
    blur(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSelectOptionDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BrnSelectOptionDirective, "[brnOption]", never, { "value": { "alias": "value"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, never, true, [{ directive: typeof i1.CdkOption; inputs: {}; outputs: {}; }]>;
}
