import { CdkConnectedOverlay, type ConnectedOverlayPositionChange, type ConnectedPosition } from '@angular/cdk/overlay';
import { EventEmitter, type AfterContentInit, type QueryList, type Signal } from '@angular/core';
import { NgControl, type ControlValueAccessor } from '@angular/forms';
import { type ExposesSide, type ExposesState } from '@spartan-ng/ui-core';
import { BrnLabelDirective } from '@spartan-ng/ui-label-brain';
import { Subject } from 'rxjs';
import { BrnSelectContentComponent } from './brn-select-content.component';
import { BrnSelectOptionDirective } from './brn-select-option.directive';
import * as i0 from "@angular/core";
export type BrnReadDirection = 'ltr' | 'rtl';
export declare class BrnSelectComponent implements ControlValueAccessor, AfterContentInit, ExposesSide, ExposesState {
    private readonly _selectService;
    readonly triggerWidth: Signal<number>;
    set multiple(multiple: boolean);
    protected readonly _multiple: Signal<boolean>;
    set placeholder(placeholder: string);
    protected readonly _placeholder: Signal<string>;
    set disabled(disabled: boolean);
    protected readonly _disabled: Signal<boolean>;
    readonly dir: import("@angular/core").InputSignal<BrnReadDirection>;
    protected selectLabel: BrnLabelDirective;
    /** Overlay pane containing the options. */
    protected selectContent: BrnSelectContentComponent;
    protected options: QueryList<BrnSelectOptionDirective>;
    /** Overlay pane containing the options. */
    protected _overlayDir: CdkConnectedOverlay;
    openedChange: EventEmitter<boolean>;
    readonly closeDelay: import("@angular/core").InputSignal<number>;
    readonly isExpanded: Signal<boolean>;
    protected readonly _delayedExpanded: Signal<boolean>;
    readonly state: Signal<"open" | "closed">;
    protected readonly _positionChanges$: Subject<ConnectedOverlayPositionChange>;
    readonly side: Signal<'top' | 'bottom' | 'left' | 'right'>;
    readonly backupLabelId: Signal<string>;
    readonly labelProvided: import("@angular/core").WritableSignal<boolean>;
    readonly ngControl: NgControl | null;
    private _onChange;
    private _onTouched;
    protected _positions: ConnectedPosition[];
    constructor();
    ngAfterContentInit(): void;
    toggle(): void;
    open(): void;
    close(): void;
    protected _canOpen(): boolean;
    private _moveFocusToCDKList;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSelectComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnSelectComponent, "brn-select, hlm-select", never, { "multiple": { "alias": "multiple"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "dir": { "alias": "dir"; "required": false; "isSignal": true; }; "closeDelay": { "alias": "closeDelay"; "required": false; "isSignal": true; }; }, { "openedChange": "openedChange"; }, ["selectLabel", "selectContent", "options"], ["label[hlmLabel],label[brnLabel]", "hlm-select-trigger,[brnSelectTrigger]", "*"], true, never>;
}
