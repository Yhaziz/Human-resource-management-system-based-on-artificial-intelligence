import { ElementRef, EventEmitter, type AfterContentInit, type OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare const BRN_SWITCH_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly import("@angular/forms").ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class BrnSwitchComponent implements AfterContentInit, OnDestroy {
    private readonly _renderer;
    private readonly _isBrowser;
    private _elementRef;
    private _focusMonitor;
    private _cdr;
    focusVisible: import("@angular/core").WritableSignal<boolean>;
    focused: import("@angular/core").WritableSignal<boolean>;
    protected _checked: import("@angular/core").WritableSignal<boolean>;
    set checked(value: boolean);
    /** Used to set the id on the underlying input element. */
    protected readonly _id: import("@angular/core").WritableSignal<string | null>;
    set id(value: string | null);
    /** Used to set the name attribute on the underlying input element. */
    protected readonly _name: import("@angular/core").WritableSignal<string | null>;
    set name(value: string | null);
    /** Used to set the aria-label attribute on the underlying input element. */
    ariaLabel: string | null;
    /** Used to set the aria-labelledby attribute on the underlying input element. */
    ariaLabelledby: string | null;
    /** Used to set the aria-describedby attribute on the underlying input element. */
    private _ariaDescribedby;
    ariaDescribedby: string | null;
    private _required;
    get required(): boolean;
    set required(value: boolean);
    protected readonly _disabled: import("@angular/core").WritableSignal<boolean>;
    set disabled(value: boolean);
    protected _onChange: (_: any) => void;
    private _onTouched;
    checkbox?: ElementRef<HTMLInputElement>;
    changed: EventEmitter<boolean>;
    touched: EventEmitter<void>;
    constructor();
    handleChange(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    forChild(parentValue: string | null | undefined): string | null;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    /** Implemented as a part of ControlValueAccessor. */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnSwitchComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnSwitchComponent, "brn-switch", never, { "checked": { "alias": "checked"; "required": false; }; "id": { "alias": "id"; "required": false; }; "name": { "alias": "name"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "required": { "alias": "required"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "changed": "changed"; "touched": "touched"; }, never, ["brn-switch-thumb"], true, never>;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_disabled: unknown;
}
