import { computed, signal } from '@angular/core';
export class BrnColumnManager {
    constructor(initialColumnVisibility) {
        this.displayedColumns = computed(() => {
            return Object.entries(this._columnVisibility())
                .filter(([, value]) => (typeof value === 'boolean' ? value : value.visible))
                .map(([key]) => key);
        });
        this.isColumnVisible = (columnName) => {
            const visibilityMap = this.columnVisibility();
            const columnEntry = visibilityMap[columnName];
            return typeof columnEntry === 'boolean' ? columnEntry : columnEntry.visible;
        };
        this.isColumnDisabled = (columnName) => this.isColumnVisible(columnName) && this.displayedColumns().length === 1;
        this._initialColumnVisibility = initialColumnVisibility;
        this._columnVisibility = signal(this._initialColumnVisibility);
        this._columnVisibility.set(this._initialColumnVisibility);
        this.columnVisibility = this._columnVisibility.asReadonly();
        this.allColumns = this.createAllColumns(this._initialColumnVisibility);
    }
    toggleVisibility(columnName) {
        const visibilityMap = this._columnVisibility();
        const columnEntry = visibilityMap[columnName];
        const newVisibilityState = typeof columnEntry === 'boolean' ? !columnEntry : { visible: !columnEntry.visible };
        this._columnVisibility.set({ ...visibilityMap, [columnName]: newVisibilityState });
    }
    setVisible(columnName) {
        const visibilityMap = this._columnVisibility();
        const columnEntry = visibilityMap[columnName];
        const newVisibilityState = typeof columnEntry === 'boolean' ? true : { visible: true };
        this._columnVisibility.set({ ...visibilityMap, [columnName]: newVisibilityState });
    }
    setInvisible(columnName) {
        const visibilityMap = this._columnVisibility();
        const columnEntry = visibilityMap[columnName];
        const newVisibilityState = typeof columnEntry === 'boolean' ? false : { visible: false };
        this._columnVisibility.set({ ...visibilityMap, [columnName]: newVisibilityState });
    }
    createAllColumns(initialColumnVisibility) {
        const keys = Object.keys(initialColumnVisibility);
        if (this.isBooleanConfig(initialColumnVisibility)) {
            return keys;
        }
        else {
            return keys.map((key) => {
                const values = initialColumnVisibility[key];
                return {
                    name: key,
                    ...values,
                };
            });
        }
    }
    isBooleanConfig(config) {
        return typeof Object.values(config)[0] === 'boolean';
    }
}
export const useBrnColumnManager = (initialColumnVisibility) => new BrnColumnManager(initialColumnVisibility);
//# sourceMappingURL=data:application/json;base64,