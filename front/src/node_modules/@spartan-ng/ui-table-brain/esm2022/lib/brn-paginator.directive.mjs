import { Directive, Input, TemplateRef, ViewContainerRef, computed, effect, inject, numberAttribute, signal, } from '@angular/core';
import * as i0 from "@angular/core";
export class BrnPaginatorDirective {
    static ngTemplateContextGuard(directive, context) {
        return true;
    }
    set totalElements(value) {
        this.calculateNewState({ newTotalElements: value, newPage: 0 });
    }
    set currentPage(value) {
        this.calculateNewState({ newPage: value });
    }
    set pageSize(value) {
        this.calculateNewState({ newPageSize: value, newPage: 0 });
    }
    constructor() {
        this._vcr = inject(ViewContainerRef);
        this._template = inject((TemplateRef));
        this._state = signal({
            currentPage: 0,
            startIndex: 0,
            endIndex: 0,
            pageSize: 10,
            totalPages: 0,
            totalElements: null,
        });
        this._decrementable = computed(() => 0 < this._state().startIndex);
        this._incrementable = computed(() => this._state().endIndex < (this._state().totalElements ?? 0) - 1);
        effect(() => {
            const state = this._state();
            Promise.resolve().then(() => {
                if (this.onStateChange) {
                    this.onStateChange(state);
                }
            });
        }, { allowSignalWrites: true });
    }
    ngOnInit() {
        this._vcr.createEmbeddedView(this._template, {
            $implicit: {
                state: this._state,
                increment: () => this.incrementPage(),
                decrement: () => this.decrementPage(),
                incrementable: this._incrementable,
                decrementable: this._decrementable,
            },
        });
    }
    decrementPage() {
        const { currentPage } = this._state();
        if (0 < currentPage) {
            this.calculateNewState({ newPage: currentPage - 1 });
        }
    }
    incrementPage() {
        const { currentPage, totalPages } = this._state();
        if (totalPages > currentPage) {
            this.calculateNewState({ newPage: currentPage + 1 });
        }
    }
    reset() {
        this.currentPage = 0;
    }
    calculateNewState({ newPage, newPageSize, newTotalElements, }) {
        const previousState = this._state();
        let currentPage = newPage ?? previousState.currentPage;
        const pageSize = newPageSize ?? previousState.pageSize;
        const totalElements = newTotalElements ?? previousState.totalElements ?? 0;
        const newTotalPages = totalElements ? Math.floor(totalElements / pageSize) : 0;
        if (newTotalPages < currentPage - 1) {
            currentPage = newTotalPages - 1;
        }
        const newStartIndex = totalElements === 0 ? 0 : Math.min(totalElements - 1, currentPage * pageSize);
        const newEndIndex = Math.min((currentPage + 1) * pageSize - 1, totalElements - 1);
        const newState = {
            currentPage: currentPage,
            startIndex: newStartIndex,
            endIndex: newEndIndex,
            pageSize: pageSize,
            totalPages: newTotalPages,
            totalElements: totalElements,
        };
        this._state.set(newState);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPaginatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.5", type: BrnPaginatorDirective, isStandalone: true, selector: "[brnPaginator]", inputs: { totalElements: ["brnPaginatorTotalElements", "totalElements"], currentPage: ["brnPaginatorCurrentPage", "currentPage", numberAttribute], pageSize: ["brnPaginatorPageSize", "pageSize", numberAttribute], onStateChange: ["brnPaginatorOnStateChange", "onStateChange"] }, exportAs: ["brnPaginator"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnPaginatorDirective, decorators: [{
            type: Directive,
            args: [{
                    standalone: true,
                    selector: '[brnPaginator]',
                    exportAs: 'brnPaginator',
                }]
        }], ctorParameters: () => [], propDecorators: { totalElements: [{
                type: Input,
                args: [{ alias: 'brnPaginatorTotalElements' }]
            }], currentPage: [{
                type: Input,
                args: [{ alias: 'brnPaginatorCurrentPage', transform: numberAttribute }]
            }], pageSize: [{
                type: Input,
                args: [{ alias: 'brnPaginatorPageSize', transform: numberAttribute }]
            }], onStateChange: [{
                type: Input,
                args: [{ alias: 'brnPaginatorOnStateChange' }]
            }] } });
//# sourceMappingURL=data:application/json;base64,