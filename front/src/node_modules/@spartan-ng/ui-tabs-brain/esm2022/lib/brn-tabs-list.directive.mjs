import { FocusKeyManager } from '@angular/cdk/a11y';
import { ContentChildren, Directive, inject } from '@angular/core';
import { rxHostListener } from '@spartan-ng/ui-core';
import { take } from 'rxjs';
import { BrnTabsTriggerDirective } from './brn-tabs-trigger.directive';
import { BrnTabsDirective } from './brn-tabs.directive';
import * as i0 from "@angular/core";
export class BrnTabsListDirective {
    constructor() {
        this._root = inject(BrnTabsDirective);
        this._orientation = this._root.$orientation;
        this._direction = this._root.$direction;
        this._value = this._root.$value;
        this._tabs = this._root.$tabs;
        this._keyDownListener = rxHostListener('keydown');
    }
    ngAfterContentInit() {
        if (!this.triggers) {
            return;
        }
        this._keyManager = new FocusKeyManager(this.triggers)
            .withHorizontalOrientation(this._direction())
            .withHomeAndEnd()
            .withPageUpDown()
            .withWrap();
        // needed because by default the index is set to -1, which means first interaction is skipped
        this._keyDownListener.pipe(take(1)).subscribe(() => {
            const currentKey = this._value();
            let activeIndex = 0;
            if (currentKey && this.triggers) {
                const currentTab = this._tabs[currentKey];
                if (currentTab) {
                    activeIndex = this.triggers.toArray().indexOf(currentTab.trigger);
                }
            }
            this._keyManager?.setActiveItem(activeIndex);
        });
        this._keyDownListener.subscribe((event) => {
            if ('key' in event) {
                if (this._orientation() === 'horizontal') {
                    if (event.key === 'ArrowUp' || event.key === 'ArrowDown')
                        return;
                }
                if (this._orientation() === 'vertical') {
                    if (event.key === 'ArrowLeft' || event.key === 'ArrowRight')
                        return;
                }
            }
            this._keyManager?.onKeydown(event);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTabsListDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.5", type: BrnTabsListDirective, isStandalone: true, selector: "[brnTabsList]", host: { attributes: { "role": "tablist" }, properties: { "attr.aria-orientation": "_orientation()", "attr.data-orientation": "_orientation()" } }, queries: [{ propertyName: "triggers", predicate: BrnTabsTriggerDirective, descendants: true }], exportAs: ["brnTabsList"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTabsListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnTabsList]',
                    standalone: true,
                    host: {
                        role: 'tablist',
                        '[attr.aria-orientation]': '_orientation()',
                        '[attr.data-orientation]': '_orientation()',
                    },
                    exportAs: 'brnTabsList',
                }]
        }], propDecorators: { triggers: [{
                type: ContentChildren,
                args: [BrnTabsTriggerDirective, { descendants: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLXRhYnMtbGlzdC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpL3RhYnMvYnJhaW4vc3JjL2xpYi9icm4tdGFicy1saXN0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGVBQWUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUF5QyxNQUFNLGVBQWUsQ0FBQztBQUMxRyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQzs7QUFZeEQsTUFBTSxPQUFPLG9CQUFvQjtJQVZqQztRQVdTLFVBQUssR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV0QixpQkFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ3pDLGVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxXQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDM0IsVUFBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLHFCQUFnQixHQUFHLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQztLQTBDOUQ7SUFuQ08sa0JBQWtCO1FBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDcEIsT0FBTztRQUNSLENBQUM7UUFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksZUFBZSxDQUEwQixJQUFJLENBQUMsUUFBUSxDQUFDO2FBQzVFLHlCQUF5QixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQzthQUM1QyxjQUFjLEVBQUU7YUFDaEIsY0FBYyxFQUFFO2FBQ2hCLFFBQVEsRUFBRSxDQUFDO1FBRWIsNkZBQTZGO1FBQzdGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNsRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDakMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFDO1lBQ3BCLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDakMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDMUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztvQkFDaEIsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbkUsQ0FBQztZQUNGLENBQUM7WUFDRCxJQUFJLENBQUMsV0FBVyxFQUFFLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN6QyxJQUFJLEtBQUssSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFDcEIsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssWUFBWSxFQUFFLENBQUM7b0JBQzFDLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxXQUFXO3dCQUFFLE9BQU87Z0JBQ2xFLENBQUM7Z0JBQ0QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEtBQUssVUFBVSxFQUFFLENBQUM7b0JBQ3hDLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxXQUFXLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxZQUFZO3dCQUFFLE9BQU87Z0JBQ3JFLENBQUM7WUFDRixDQUFDO1lBQ0QsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsS0FBc0IsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQzs4R0FoRFcsb0JBQW9CO2tHQUFwQixvQkFBb0IscVBBV2YsdUJBQXVCOzsyRkFYNUIsb0JBQW9CO2tCQVZoQyxTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxlQUFlO29CQUN6QixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsSUFBSSxFQUFFO3dCQUNMLElBQUksRUFBRSxTQUFTO3dCQUNmLHlCQUF5QixFQUFFLGdCQUFnQjt3QkFDM0MseUJBQXlCLEVBQUUsZ0JBQWdCO3FCQUMzQztvQkFDRCxRQUFRLEVBQUUsYUFBYTtpQkFDdkI7OEJBYU8sUUFBUTtzQkFEZCxlQUFlO3VCQUFDLHVCQUF1QixFQUFFLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvY3VzS2V5TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IENvbnRlbnRDaGlsZHJlbiwgRGlyZWN0aXZlLCBpbmplY3QsIHR5cGUgQWZ0ZXJDb250ZW50SW5pdCwgdHlwZSBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHJ4SG9zdExpc3RlbmVyIH0gZnJvbSAnQHNwYXJ0YW4tbmcvdWktY29yZSc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBCcm5UYWJzVHJpZ2dlckRpcmVjdGl2ZSB9IGZyb20gJy4vYnJuLXRhYnMtdHJpZ2dlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQnJuVGFic0RpcmVjdGl2ZSB9IGZyb20gJy4vYnJuLXRhYnMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW2JyblRhYnNMaXN0XScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdGhvc3Q6IHtcblx0XHRyb2xlOiAndGFibGlzdCcsXG5cdFx0J1thdHRyLmFyaWEtb3JpZW50YXRpb25dJzogJ19vcmllbnRhdGlvbigpJyxcblx0XHQnW2F0dHIuZGF0YS1vcmllbnRhdGlvbl0nOiAnX29yaWVudGF0aW9uKCknLFxuXHR9LFxuXHRleHBvcnRBczogJ2JyblRhYnNMaXN0Jyxcbn0pXG5leHBvcnQgY2xhc3MgQnJuVGFic0xpc3REaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcblx0cHJpdmF0ZSBfcm9vdCA9IGluamVjdChCcm5UYWJzRGlyZWN0aXZlKTtcblxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX29yaWVudGF0aW9uID0gdGhpcy5fcm9vdC4kb3JpZW50YXRpb247XG5cdHByaXZhdGUgcmVhZG9ubHkgX2RpcmVjdGlvbiA9IHRoaXMuX3Jvb3QuJGRpcmVjdGlvbjtcblx0cHJpdmF0ZSByZWFkb25seSBfdmFsdWUgPSB0aGlzLl9yb290LiR2YWx1ZTtcblx0cHJpdmF0ZSByZWFkb25seSBfdGFicyA9IHRoaXMuX3Jvb3QuJHRhYnM7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2tleURvd25MaXN0ZW5lciA9IHJ4SG9zdExpc3RlbmVyKCdrZXlkb3duJyk7XG5cblx0cHJpdmF0ZSBfa2V5TWFuYWdlcj86IEZvY3VzS2V5TWFuYWdlcjxCcm5UYWJzVHJpZ2dlckRpcmVjdGl2ZT47XG5cblx0QENvbnRlbnRDaGlsZHJlbihCcm5UYWJzVHJpZ2dlckRpcmVjdGl2ZSwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuXHRwdWJsaWMgdHJpZ2dlcnM/OiBRdWVyeUxpc3Q8QnJuVGFic1RyaWdnZXJEaXJlY3RpdmU+O1xuXG5cdHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG5cdFx0aWYgKCF0aGlzLnRyaWdnZXJzKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdHRoaXMuX2tleU1hbmFnZXIgPSBuZXcgRm9jdXNLZXlNYW5hZ2VyPEJyblRhYnNUcmlnZ2VyRGlyZWN0aXZlPih0aGlzLnRyaWdnZXJzKVxuXHRcdFx0LndpdGhIb3Jpem9udGFsT3JpZW50YXRpb24odGhpcy5fZGlyZWN0aW9uKCkpXG5cdFx0XHQud2l0aEhvbWVBbmRFbmQoKVxuXHRcdFx0LndpdGhQYWdlVXBEb3duKClcblx0XHRcdC53aXRoV3JhcCgpO1xuXG5cdFx0Ly8gbmVlZGVkIGJlY2F1c2UgYnkgZGVmYXVsdCB0aGUgaW5kZXggaXMgc2V0IHRvIC0xLCB3aGljaCBtZWFucyBmaXJzdCBpbnRlcmFjdGlvbiBpcyBza2lwcGVkXG5cdFx0dGhpcy5fa2V5RG93bkxpc3RlbmVyLnBpcGUodGFrZSgxKSkuc3Vic2NyaWJlKCgpID0+IHtcblx0XHRcdGNvbnN0IGN1cnJlbnRLZXkgPSB0aGlzLl92YWx1ZSgpO1xuXHRcdFx0bGV0IGFjdGl2ZUluZGV4ID0gMDtcblx0XHRcdGlmIChjdXJyZW50S2V5ICYmIHRoaXMudHJpZ2dlcnMpIHtcblx0XHRcdFx0Y29uc3QgY3VycmVudFRhYiA9IHRoaXMuX3RhYnNbY3VycmVudEtleV07XG5cdFx0XHRcdGlmIChjdXJyZW50VGFiKSB7XG5cdFx0XHRcdFx0YWN0aXZlSW5kZXggPSB0aGlzLnRyaWdnZXJzLnRvQXJyYXkoKS5pbmRleE9mKGN1cnJlbnRUYWIudHJpZ2dlcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX2tleU1hbmFnZXI/LnNldEFjdGl2ZUl0ZW0oYWN0aXZlSW5kZXgpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5fa2V5RG93bkxpc3RlbmVyLnN1YnNjcmliZSgoZXZlbnQpID0+IHtcblx0XHRcdGlmICgna2V5JyBpbiBldmVudCkge1xuXHRcdFx0XHRpZiAodGhpcy5fb3JpZW50YXRpb24oKSA9PT0gJ2hvcml6b250YWwnKSB7XG5cdFx0XHRcdFx0aWYgKGV2ZW50LmtleSA9PT0gJ0Fycm93VXAnIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93RG93bicpIHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAodGhpcy5fb3JpZW50YXRpb24oKSA9PT0gJ3ZlcnRpY2FsJykge1xuXHRcdFx0XHRcdGlmIChldmVudC5rZXkgPT09ICdBcnJvd0xlZnQnIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93UmlnaHQnKSByZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRoaXMuX2tleU1hbmFnZXI/Lm9uS2V5ZG93bihldmVudCBhcyBLZXlib2FyZEV2ZW50KTtcblx0XHR9KTtcblx0fVxufVxuIl19