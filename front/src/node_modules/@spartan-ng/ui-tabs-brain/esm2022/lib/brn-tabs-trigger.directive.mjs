import { Directive, ElementRef, Input, computed, effect, inject, input } from '@angular/core';
import { BrnTabsDirective } from './brn-tabs.directive';
import * as i0 from "@angular/core";
export class BrnTabsTriggerDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this._root = inject(BrnTabsDirective);
        this._orientation = this._root.$orientation;
        this.triggerFor = input.required({ alias: 'brnTabsTrigger' });
        this.selected = computed(() => this._root.$value() === this.triggerFor());
        this.contentId = computed(() => 'brn-tabs-content-' + this.triggerFor());
        this.labelId = computed(() => 'brn-tabs-label-' + this.triggerFor());
        // leaving this as an @input to be compatible with the `FocusKeyManager` used in the `BrnTabsListDirective`
        this.disabled = false;
        effect(() => {
            this._root.registerTrigger(this.triggerFor(), this);
        });
    }
    focus() {
        this.elementRef.nativeElement.focus();
        if (this._root.$activationMode() === 'automatic') {
            this.activate();
        }
    }
    activate() {
        if (!this.triggerFor())
            return;
        this._root.setValue(this.triggerFor());
        this._root.emitTabActivated(this.triggerFor());
    }
    get key() {
        return this.triggerFor();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTabsTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.5", type: BrnTabsTriggerDirective, isStandalone: true, selector: "button[brnTabsTrigger]", inputs: { triggerFor: { classPropertyName: "triggerFor", publicName: "brnTabsTrigger", isSignal: true, isRequired: true, transformFunction: null }, disabled: { classPropertyName: "disabled", publicName: "disabled", isSignal: false, isRequired: false, transformFunction: null } }, host: { attributes: { "type": "button", "role": "tab" }, listeners: { "click": "activate()" }, properties: { "id": "labelId()", "tabindex": "selected() ? \"0\": \"-1\"", "attr.aria-selected": "selected()", "attr.aria-controls": "contentId()", "attr.data-state": "selected() ? 'active' : 'inactive'", "attr.data-orientation": "_orientation()", "attr.data-disabled": "disabled ? '' : undefined" } }, exportAs: ["brnTabsTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTabsTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[brnTabsTrigger]',
                    standalone: true,
                    host: {
                        '[id]': 'labelId()',
                        type: 'button',
                        role: 'tab',
                        '[tabindex]': 'selected() ? "0": "-1"',
                        '[attr.aria-selected]': 'selected()',
                        '[attr.aria-controls]': 'contentId()',
                        '[attr.data-state]': "selected() ? 'active' : 'inactive'",
                        '[attr.data-orientation]': '_orientation()',
                        '[attr.data-disabled]': "disabled ? '' : undefined",
                        '(click)': 'activate()',
                    },
                    exportAs: 'brnTabsTrigger',
                }]
        }], ctorParameters: () => [], propDecorators: { disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLXRhYnMtdHJpZ2dlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpL3RhYnMvYnJhaW4vc3JjL2xpYi9icm4tdGFicy10cmlnZ2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQW1CeEQsTUFBTSxPQUFPLHVCQUF1QjtJQWdCbkM7UUFmZ0IsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUvQixVQUFLLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFFL0IsaUJBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUUxQyxlQUFVLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBUyxFQUFFLEtBQUssRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDakUsYUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLGNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDcEUsWUFBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUVuRiwyR0FBMkc7UUFFcEcsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUd2QixNQUFNLENBQUMsR0FBRyxFQUFFO1lBQ1gsSUFBSSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVNLEtBQUs7UUFDWCxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxFQUFFLEtBQUssV0FBVyxFQUFFLENBQUM7WUFDbEQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLENBQUM7SUFDRixDQUFDO0lBRU0sUUFBUTtRQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQUUsT0FBTztRQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxJQUFJLEdBQUc7UUFDTixPQUFPLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMxQixDQUFDOzhHQXJDVyx1QkFBdUI7a0dBQXZCLHVCQUF1Qjs7MkZBQXZCLHVCQUF1QjtrQkFqQm5DLFNBQVM7bUJBQUM7b0JBQ1YsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRTt3QkFDTCxNQUFNLEVBQUUsV0FBVzt3QkFDbkIsSUFBSSxFQUFFLFFBQVE7d0JBQ2QsSUFBSSxFQUFFLEtBQUs7d0JBQ1gsWUFBWSxFQUFFLHdCQUF3Qjt3QkFDdEMsc0JBQXNCLEVBQUUsWUFBWTt3QkFDcEMsc0JBQXNCLEVBQUUsYUFBYTt3QkFDckMsbUJBQW1CLEVBQUUsb0NBQW9DO3dCQUN6RCx5QkFBeUIsRUFBRSxnQkFBZ0I7d0JBQzNDLHNCQUFzQixFQUFFLDJCQUEyQjt3QkFDbkQsU0FBUyxFQUFFLFlBQVk7cUJBQ3ZCO29CQUNELFFBQVEsRUFBRSxnQkFBZ0I7aUJBQzFCO3dEQWVPLFFBQVE7c0JBRGQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIGNvbXB1dGVkLCBlZmZlY3QsIGluamVjdCwgaW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJyblRhYnNEaXJlY3RpdmUgfSBmcm9tICcuL2Jybi10YWJzLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuXHRzZWxlY3RvcjogJ2J1dHRvblticm5UYWJzVHJpZ2dlcl0nLFxuXHRzdGFuZGFsb25lOiB0cnVlLFxuXHRob3N0OiB7XG5cdFx0J1tpZF0nOiAnbGFiZWxJZCgpJyxcblx0XHR0eXBlOiAnYnV0dG9uJyxcblx0XHRyb2xlOiAndGFiJyxcblx0XHQnW3RhYmluZGV4XSc6ICdzZWxlY3RlZCgpID8gXCIwXCI6IFwiLTFcIicsXG5cdFx0J1thdHRyLmFyaWEtc2VsZWN0ZWRdJzogJ3NlbGVjdGVkKCknLFxuXHRcdCdbYXR0ci5hcmlhLWNvbnRyb2xzXSc6ICdjb250ZW50SWQoKScsXG5cdFx0J1thdHRyLmRhdGEtc3RhdGVdJzogXCJzZWxlY3RlZCgpID8gJ2FjdGl2ZScgOiAnaW5hY3RpdmUnXCIsXG5cdFx0J1thdHRyLmRhdGEtb3JpZW50YXRpb25dJzogJ19vcmllbnRhdGlvbigpJyxcblx0XHQnW2F0dHIuZGF0YS1kaXNhYmxlZF0nOiBcImRpc2FibGVkID8gJycgOiB1bmRlZmluZWRcIixcblx0XHQnKGNsaWNrKSc6ICdhY3RpdmF0ZSgpJyxcblx0fSxcblx0ZXhwb3J0QXM6ICdicm5UYWJzVHJpZ2dlcicsXG59KVxuZXhwb3J0IGNsYXNzIEJyblRhYnNUcmlnZ2VyRGlyZWN0aXZlIHtcblx0cHVibGljIHJlYWRvbmx5IGVsZW1lbnRSZWYgPSBpbmplY3QoRWxlbWVudFJlZik7XG5cblx0cHJpdmF0ZSByZWFkb25seSBfcm9vdCA9IGluamVjdChCcm5UYWJzRGlyZWN0aXZlKTtcblxuXHRwcm90ZWN0ZWQgcmVhZG9ubHkgX29yaWVudGF0aW9uID0gdGhpcy5fcm9vdC4kb3JpZW50YXRpb247XG5cblx0cHVibGljIHJlYWRvbmx5IHRyaWdnZXJGb3IgPSBpbnB1dC5yZXF1aXJlZDxzdHJpbmc+KHsgYWxpYXM6ICdicm5UYWJzVHJpZ2dlcicgfSk7XG5cdHB1YmxpYyByZWFkb25seSBzZWxlY3RlZCA9IGNvbXB1dGVkKCgpID0+IHRoaXMuX3Jvb3QuJHZhbHVlKCkgPT09IHRoaXMudHJpZ2dlckZvcigpKTtcblx0cHJvdGVjdGVkIHJlYWRvbmx5IGNvbnRlbnRJZCA9IGNvbXB1dGVkKCgpID0+ICdicm4tdGFicy1jb250ZW50LScgKyB0aGlzLnRyaWdnZXJGb3IoKSk7XG5cdHByb3RlY3RlZCByZWFkb25seSBsYWJlbElkID0gY29tcHV0ZWQoKCkgPT4gJ2Jybi10YWJzLWxhYmVsLScgKyB0aGlzLnRyaWdnZXJGb3IoKSk7XG5cblx0Ly8gbGVhdmluZyB0aGlzIGFzIGFuIEBpbnB1dCB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIGBGb2N1c0tleU1hbmFnZXJgIHVzZWQgaW4gdGhlIGBCcm5UYWJzTGlzdERpcmVjdGl2ZWBcblx0QElucHV0KClcblx0cHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0ZWZmZWN0KCgpID0+IHtcblx0XHRcdHRoaXMuX3Jvb3QucmVnaXN0ZXJUcmlnZ2VyKHRoaXMudHJpZ2dlckZvcigpLCB0aGlzKTtcblx0XHR9KTtcblx0fVxuXG5cdHB1YmxpYyBmb2N1cygpIHtcblx0XHR0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5mb2N1cygpO1xuXHRcdGlmICh0aGlzLl9yb290LiRhY3RpdmF0aW9uTW9kZSgpID09PSAnYXV0b21hdGljJykge1xuXHRcdFx0dGhpcy5hY3RpdmF0ZSgpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBhY3RpdmF0ZSgpIHtcblx0XHRpZiAoIXRoaXMudHJpZ2dlckZvcigpKSByZXR1cm47XG5cdFx0dGhpcy5fcm9vdC5zZXRWYWx1ZSh0aGlzLnRyaWdnZXJGb3IoKSk7XG5cdFx0dGhpcy5fcm9vdC5lbWl0VGFiQWN0aXZhdGVkKHRoaXMudHJpZ2dlckZvcigpKTtcblx0fVxuXG5cdGdldCBrZXkoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcblx0XHRyZXR1cm4gdGhpcy50cmlnZ2VyRm9yKCk7XG5cdH1cbn1cbiJdfQ==