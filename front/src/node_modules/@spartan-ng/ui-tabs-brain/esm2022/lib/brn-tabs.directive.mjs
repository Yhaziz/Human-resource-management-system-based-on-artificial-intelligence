import { Directive, EventEmitter, Input, Output, input, signal } from '@angular/core';
import * as i0 from "@angular/core";
export class BrnTabsDirective {
    constructor() {
        this.orientation = input('horizontal');
        /** internal **/
        this.$orientation = this.orientation;
        this.direction = input('ltr');
        /** internal **/
        this.$direction = this.direction;
        this.tabActivated = new EventEmitter();
        // leaving this as an @input and signal to be set programmatically
        // current limitation by InputSignal which are readonly
        this._value = signal(undefined);
        /** internal **/
        this.$value = this._value.asReadonly();
        this.activationMode = input('automatic');
        /** internal **/
        this.$activationMode = this.activationMode;
        this._tabs = {};
        this.$tabs = this._tabs;
    }
    set value(value) {
        this._value.set(value);
    }
    registerTrigger(key, trigger) {
        this._tabs[key] = {
            ...(this._tabs[key] ?? {}),
            trigger,
        };
    }
    registerContent(key, content) {
        this._tabs[key] = {
            ...(this._tabs[key] ?? {}),
            content,
        };
    }
    emitTabActivated(key) {
        this.tabActivated.emit(key);
    }
    setValue(key) {
        this._value.set(key);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTabsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "17.1.0", version: "17.3.5", type: BrnTabsDirective, isStandalone: true, selector: "[brnTabs]", inputs: { orientation: { classPropertyName: "orientation", publicName: "orientation", isSignal: true, isRequired: false, transformFunction: null }, direction: { classPropertyName: "direction", publicName: "direction", isSignal: true, isRequired: false, transformFunction: null }, value: { classPropertyName: "value", publicName: "brnTabs", isSignal: false, isRequired: false, transformFunction: null }, activationMode: { classPropertyName: "activationMode", publicName: "activationMode", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { tabActivated: "tabActivated" }, host: { properties: { "attr.data-orientation": "orientation()", "attr.dir": "direction()" } }, exportAs: ["brnTabs"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTabsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[brnTabs]',
                    standalone: true,
                    host: {
                        '[attr.data-orientation]': 'orientation()',
                        '[attr.dir]': 'direction()',
                    },
                    exportAs: 'brnTabs',
                }]
        }], propDecorators: { tabActivated: [{
                type: Output
            }], value: [{
                type: Input,
                args: ['brnTabs']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLXRhYnMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy91aS90YWJzL2JyYWluL3NyYy9saWIvYnJuLXRhYnMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFpQnRGLE1BQU0sT0FBTyxnQkFBZ0I7SUFUN0I7UUFVaUIsZ0JBQVcsR0FBRyxLQUFLLENBQXFCLFlBQVksQ0FBQyxDQUFDO1FBQ3RFLGdCQUFnQjtRQUNoQixpQkFBWSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFFaEIsY0FBUyxHQUFHLEtBQUssQ0FBbUIsS0FBSyxDQUFDLENBQUM7UUFDM0QsZ0JBQWdCO1FBQ2hCLGVBQVUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBRW5CLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztRQUVuRCxrRUFBa0U7UUFDbEUsdURBQXVEO1FBQ3BDLFdBQU0sR0FBRyxNQUFNLENBQXFCLFNBQVMsQ0FBQyxDQUFDO1FBS2xFLGdCQUFnQjtRQUNoQixXQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVsQixtQkFBYyxHQUFHLEtBQUssQ0FBb0IsV0FBVyxDQUFDLENBQUM7UUFDdkUsZ0JBQWdCO1FBQ2hCLG9CQUFlLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUU5QixVQUFLLEdBQThGLEVBQUUsQ0FBQztRQUM5RixVQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztLQXFCbkM7SUFqQ0EsSUFDSSxLQUFLLENBQUMsS0FBYTtRQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBV00sZUFBZSxDQUFDLEdBQVcsRUFBRSxPQUFnQztRQUNuRSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQ2pCLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMxQixPQUFPO1NBQ1AsQ0FBQztJQUNILENBQUM7SUFFTSxlQUFlLENBQUMsR0FBVyxFQUFFLE9BQWdDO1FBQ25FLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUc7WUFDakIsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLE9BQU87U0FDUCxDQUFDO0lBQ0gsQ0FBQztJQUNELGdCQUFnQixDQUFDLEdBQVc7UUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUNELFFBQVEsQ0FBQyxHQUFXO1FBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7OEdBOUNXLGdCQUFnQjtrR0FBaEIsZ0JBQWdCOzsyRkFBaEIsZ0JBQWdCO2tCQVQ1QixTQUFTO21CQUFDO29CQUNWLFFBQVEsRUFBRSxXQUFXO29CQUNyQixVQUFVLEVBQUUsSUFBSTtvQkFDaEIsSUFBSSxFQUFFO3dCQUNMLHlCQUF5QixFQUFFLGVBQWU7d0JBQzFDLFlBQVksRUFBRSxhQUFhO3FCQUMzQjtvQkFDRCxRQUFRLEVBQUUsU0FBUztpQkFDbkI7OEJBVVMsWUFBWTtzQkFEcEIsTUFBTTtnQkFPSCxLQUFLO3NCQURSLEtBQUs7dUJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0LCBpbnB1dCwgc2lnbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgdHlwZSB7IEJyblRhYnNDb250ZW50RGlyZWN0aXZlIH0gZnJvbSAnLi9icm4tdGFicy1jb250ZW50LmRpcmVjdGl2ZSc7XG5pbXBvcnQgdHlwZSB7IEJyblRhYnNUcmlnZ2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9icm4tdGFicy10cmlnZ2VyLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCB0eXBlIEJyblRhYnNPcmllbnRhdGlvbiA9ICdob3Jpem9udGFsJyB8ICd2ZXJ0aWNhbCc7XG5leHBvcnQgdHlwZSBCcm5UYWJzRGlyZWN0aW9uID0gJ2x0cicgfCAncnRsJztcbmV4cG9ydCB0eXBlIEJybkFjdGl2YXRpb25Nb2RlID0gJ2F1dG9tYXRpYycgfCAnbWFudWFsJztcblxuQERpcmVjdGl2ZSh7XG5cdHNlbGVjdG9yOiAnW2JyblRhYnNdJyxcblx0c3RhbmRhbG9uZTogdHJ1ZSxcblx0aG9zdDoge1xuXHRcdCdbYXR0ci5kYXRhLW9yaWVudGF0aW9uXSc6ICdvcmllbnRhdGlvbigpJyxcblx0XHQnW2F0dHIuZGlyXSc6ICdkaXJlY3Rpb24oKScsXG5cdH0sXG5cdGV4cG9ydEFzOiAnYnJuVGFicycsXG59KVxuZXhwb3J0IGNsYXNzIEJyblRhYnNEaXJlY3RpdmUge1xuXHRwdWJsaWMgcmVhZG9ubHkgb3JpZW50YXRpb24gPSBpbnB1dDxCcm5UYWJzT3JpZW50YXRpb24+KCdob3Jpem9udGFsJyk7XG5cdC8qKiBpbnRlcm5hbCAqKi9cblx0JG9yaWVudGF0aW9uID0gdGhpcy5vcmllbnRhdGlvbjtcblxuXHRwdWJsaWMgcmVhZG9ubHkgZGlyZWN0aW9uID0gaW5wdXQ8QnJuVGFic0RpcmVjdGlvbj4oJ2x0cicpO1xuXHQvKiogaW50ZXJuYWwgKiovXG5cdCRkaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbjtcblx0QE91dHB1dCgpXG5cdHJlYWRvbmx5IHRhYkFjdGl2YXRlZCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG5cdC8vIGxlYXZpbmcgdGhpcyBhcyBhbiBAaW5wdXQgYW5kIHNpZ25hbCB0byBiZSBzZXQgcHJvZ3JhbW1hdGljYWxseVxuXHQvLyBjdXJyZW50IGxpbWl0YXRpb24gYnkgSW5wdXRTaWduYWwgd2hpY2ggYXJlIHJlYWRvbmx5XG5cdHByb3RlY3RlZCByZWFkb25seSBfdmFsdWUgPSBzaWduYWw8c3RyaW5nIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXHRASW5wdXQoJ2JyblRhYnMnKVxuXHRzZXQgdmFsdWUodmFsdWU6IHN0cmluZykge1xuXHRcdHRoaXMuX3ZhbHVlLnNldCh2YWx1ZSk7XG5cdH1cblx0LyoqIGludGVybmFsICoqL1xuXHQkdmFsdWUgPSB0aGlzLl92YWx1ZS5hc1JlYWRvbmx5KCk7XG5cblx0cHVibGljIHJlYWRvbmx5IGFjdGl2YXRpb25Nb2RlID0gaW5wdXQ8QnJuQWN0aXZhdGlvbk1vZGU+KCdhdXRvbWF0aWMnKTtcblx0LyoqIGludGVybmFsICoqL1xuXHQkYWN0aXZhdGlvbk1vZGUgPSB0aGlzLmFjdGl2YXRpb25Nb2RlO1xuXG5cdHByaXZhdGUgX3RhYnM6IHsgW2tleTogc3RyaW5nXTogeyB0cmlnZ2VyOiBCcm5UYWJzVHJpZ2dlckRpcmVjdGl2ZTsgY29udGVudDogQnJuVGFic0NvbnRlbnREaXJlY3RpdmUgfSB9ID0ge307XG5cdHB1YmxpYyByZWFkb25seSAkdGFicyA9IHRoaXMuX3RhYnM7XG5cblx0cHVibGljIHJlZ2lzdGVyVHJpZ2dlcihrZXk6IHN0cmluZywgdHJpZ2dlcjogQnJuVGFic1RyaWdnZXJEaXJlY3RpdmUpIHtcblx0XHR0aGlzLl90YWJzW2tleV0gPSB7XG5cdFx0XHQuLi4odGhpcy5fdGFic1trZXldID8/IHt9KSxcblx0XHRcdHRyaWdnZXIsXG5cdFx0fTtcblx0fVxuXG5cdHB1YmxpYyByZWdpc3RlckNvbnRlbnQoa2V5OiBzdHJpbmcsIGNvbnRlbnQ6IEJyblRhYnNDb250ZW50RGlyZWN0aXZlKSB7XG5cdFx0dGhpcy5fdGFic1trZXldID0ge1xuXHRcdFx0Li4uKHRoaXMuX3RhYnNba2V5XSA/PyB7fSksXG5cdFx0XHRjb250ZW50LFxuXHRcdH07XG5cdH1cblx0ZW1pdFRhYkFjdGl2YXRlZChrZXk6IHN0cmluZykge1xuXHRcdHRoaXMudGFiQWN0aXZhdGVkLmVtaXQoa2V5KTtcblx0fVxuXHRzZXRWYWx1ZShrZXk6IHN0cmluZykge1xuXHRcdHRoaXMuX3ZhbHVlLnNldChrZXkpO1xuXHR9XG59XG4iXX0=