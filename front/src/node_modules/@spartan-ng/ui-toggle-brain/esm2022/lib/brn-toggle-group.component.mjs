import { SelectionModel } from '@angular/cdk/collections';
import { ChangeDetectorRef, Component, ContentChildren, DestroyRef, EventEmitter, Input, Output, booleanAttribute, forwardRef, inject, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { map, merge, of, startWith, switchMap } from 'rxjs';
import { BrnToggleDirective } from './brn-toggle.directive';
import { ToggleGroupCanBeNullableProvider } from './toggle-group-can-be-nullable-provider';
import * as i0 from "@angular/core";
export const BRN_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => BrnToggleGroupComponent),
    multi: true,
};
let uniqueIdCounter = 0;
export class BrnButtonToggleChange {
    constructor(source, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    value) {
        this.source = source;
        this.value = value;
    }
}
export class BrnToggleGroupComponent {
    constructor() {
        this._cdr = inject(ChangeDetectorRef);
        this._destroyRef = inject(DestroyRef);
        this._vertical = false;
        this._multiple = false;
        this._nullable = false;
        this._skipNullableCheck = false;
        this._disabled = false;
        /**
         * The method to be called in order to update ngModel.
         */
        // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-explicit-any
        this._controlValueAccessorChangeFn = () => { };
        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
        // eslint-disable-next-line @typescript-eslint/no-empty-function,@typescript-eslint/no-explicit-any
        this._onTouched = () => { };
        this._name = `brn-button-toggle-group-${uniqueIdCounter++}`;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.valueChange = new EventEmitter();
        this.change = new EventEmitter();
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
        this._markTogglesForCheck();
    }
    get vertical() {
        return this._vertical;
    }
    set vertical(value) {
        this._vertical = value;
    }
    /** Value of the toggle group. */
    get value() {
        const selected = this._selectionModel ? this._selectionModel.selected : [];
        if (this.multiple) {
            return selected.map((toggle) => toggle.value);
        }
        return selected[0] ? selected[0].value : undefined;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    set value(newValue) {
        if (this._disabled) {
            return;
        }
        this._setSelectionByValue(newValue);
        this.valueChange.emit(this.value);
    }
    /** Selected button toggles in the group. */
    get selected() {
        const selected = this._selectionModel ? this._selectionModel.selected : [];
        return this.multiple ? selected : selected[0] || null;
    }
    /** Whether no button toggles need to be selected. */
    get nullable() {
        return this._nullable;
    }
    set nullable(value) {
        this._nullable = value;
        this._markTogglesForCheck();
    }
    /** Whether multiple button toggles can be selected. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = value;
        this._markTogglesForCheck();
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = value;
        this._buttonToggles?.forEach((toggle) => (toggle.disabled = this._disabled));
        this._markTogglesForCheck();
    }
    ngOnInit() {
        this._selectionModel = new SelectionModel(this.multiple, undefined, false);
    }
    ngAfterContentInit() {
        if (!this._selectionModel || !this._buttonToggles)
            return;
        this._selectionModel.select(...this._buttonToggles.filter((toggle) => toggle.isOn()));
        this._buttonToggles.changes
            .pipe(startWith(this._buttonToggles), switchMap(() => {
            if (!this._buttonToggles)
                return of();
            return merge(...this._buttonToggles
                .toArray()
                .map((toggle) => toggle.toggled.asObservable().pipe(map((state) => ({ toggle: toggle, state })))));
        }), takeUntilDestroyed(this._destroyRef))
            .subscribe(({ state, toggle }) => {
            if (!this._selectionModel) {
                return;
            }
            this._onTouched();
            if (state === 'on') {
                if (!this.multiple) {
                    this._skipNullableCheck = true;
                    this._selectionModel.selected.forEach((s) => s.toggleOff());
                    this._skipNullableCheck = false;
                }
                this._selectionModel.select(toggle);
            }
            else {
                this._selectionModel.deselect(toggle);
            }
            this._updateModelValue(toggle);
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    writeValue(value) {
        this.value = value;
        this._cdr.markForCheck();
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerOnChange(fn) {
        this._controlValueAccessorChangeFn = fn;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _canBeNullable(value) {
        if (this._nullable || this._skipNullableCheck)
            return true;
        if (this._multiple) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return !(this.value.length === 1 && this.value[0] === value);
        }
        return this.value !== value;
    }
    /** Updates the selection state of the toggles in the group based on a value. */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _setSelectionByValue(value) {
        if (!this._buttonToggles) {
            return;
        }
        if (this.multiple && value) {
            if (!Array.isArray(value)) {
                throw Error('Value must be an array in multiple-selection mode.');
            }
            this._clearSelection();
            value.forEach((currentValue) => this._selectValue(currentValue));
        }
        else {
            this._clearSelection();
            this._selectValue(value);
        }
    }
    /** Clears the selected toggles. */
    _clearSelection() {
        if (!this._selectionModel)
            return;
        this._selectionModel.clear();
        (this._buttonToggles ?? []).forEach((toggle) => toggle.toggleOff());
    }
    /** Selects a value if there's a toggle that corresponds to it. */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _selectValue(value) {
        if (!this._selectionModel)
            return;
        const correspondingOption = (this._buttonToggles ?? []).find((toggle) => {
            return toggle.value != null && toggle.value === value;
        });
        if (correspondingOption) {
            correspondingOption.toggleOn();
        }
    }
    _updateModelValue(toggle) {
        const value = this.value;
        const event = new BrnButtonToggleChange(toggle, value);
        this._controlValueAccessorChangeFn(value);
        this.change.emit(event);
        this.valueChange.emit(value);
    }
    /** Marks all the child button toggles to be checked. */
    _markTogglesForCheck() {
        this._buttonToggles?.forEach((toggle) => toggle._markForCheck());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnToggleGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.5", type: BrnToggleGroupComponent, isStandalone: true, selector: "brn-toggle-group", inputs: { name: "name", vertical: ["vertical", "vertical", booleanAttribute], value: "value", nullable: ["nullable", "nullable", booleanAttribute], multiple: ["multiple", "multiple", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, outputs: { valueChange: "valueChange", change: "change" }, host: { attributes: { "role": "group" }, properties: { "attr.aria-disabled": "disabled", "attr.data-disabled": "disabled", "attr.data-vertical": "vertical" }, classAttribute: "brn-button-toggle-group" }, providers: [
            BRN_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,
            {
                provide: ToggleGroupCanBeNullableProvider,
                useExisting: forwardRef(() => BrnToggleGroupComponent),
            },
        ], queries: [{ propertyName: "_buttonToggles", predicate: BrnToggleDirective, descendants: true }], exportAs: ["brnToggleGroup"], ngImport: i0, template: `
		<ng-content />
	`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnToggleGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-toggle-group',
                    standalone: true,
                    providers: [
                        BRN_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,
                        {
                            provide: ToggleGroupCanBeNullableProvider,
                            useExisting: forwardRef(() => BrnToggleGroupComponent),
                        },
                    ],
                    host: {
                        role: 'group',
                        class: 'brn-button-toggle-group',
                        '[attr.aria-disabled]': 'disabled',
                        '[attr.data-disabled]': 'disabled',
                        '[attr.data-vertical]': 'vertical',
                    },
                    exportAs: 'brnToggleGroup',
                    template: `
		<ng-content />
	`,
                }]
        }], propDecorators: { _buttonToggles: [{
                type: ContentChildren,
                args: [BrnToggleDirective, {
                        // Note that this would technically pick up toggles
                        // from nested groups, but that's not a case that we support.
                        descendants: true,
                    }]
            }], name: [{
                type: Input
            }], vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], nullable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], multiple: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], change: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,