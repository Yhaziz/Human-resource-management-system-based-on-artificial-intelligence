import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, booleanAttribute, computed, inject, signal, } from '@angular/core';
import { ToggleGroupCanBeNullableProvider } from './toggle-group-can-be-nullable-provider';
import * as i0 from "@angular/core";
let uniqueId = 0;
export class BrnToggleDirective {
    constructor() {
        this._cdr = inject(ChangeDetectorRef);
        this._tgCanBeNullableProvider = inject(ToggleGroupCanBeNullableProvider, { optional: true });
        this._disabled = signal(undefined);
        this._state = signal('off', { equal: (a, b) => a === b });
        this.state = this._state.asReadonly();
        this.toggleDisabled = this._disabled.asReadonly();
        this.isOn = computed(() => this.state() === 'on');
        this.id = 'brn-toggle-' + uniqueId++;
        this._disableToggleClick = false;
        this.toggled = new EventEmitter();
    }
    set disabled(value) {
        this._disabled.set(value ? true : undefined);
    }
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set setState(value) {
        this._state.set(value);
    }
    set disableToggleClick(value) {
        this._disableToggleClick = value;
    }
    toggle() {
        if (this._disableToggleClick)
            return;
        if (this._state() === 'on') {
            this.toggleOff();
        }
        else {
            this.toggleOn();
        }
    }
    toggleOff() {
        if (this._tgCanBeNullableProvider && !this._tgCanBeNullableProvider._canBeNullable(this.value))
            return;
        this._state.set('off');
        this.toggled.emit('off');
    }
    toggleOn() {
        this._state.set('on');
        this.toggled.emit('on');
    }
    _markForCheck() {
        this._cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.5", type: BrnToggleDirective, isStandalone: true, selector: "button[hlmToggle], button[brnToggle]", inputs: { id: "id", value: "value", disabled: ["disabled", "disabled", booleanAttribute], setState: ["state", "setState"], disableToggleClick: ["disableToggleClick", "disableToggleClick", booleanAttribute] }, outputs: { toggled: "toggled" }, host: { listeners: { "click": "toggle()" }, properties: { "attr.disabled": "toggleDisabled()", "attr.data-disabled": "toggleDisabled()", "attr.data-state": "state()", "attr.aria-pressed": "isOn()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: 'button[hlmToggle], button[brnToggle]',
                    standalone: true,
                    host: {
                        '[attr.disabled]': 'toggleDisabled()',
                        '[attr.data-disabled]': 'toggleDisabled()',
                        '[attr.data-state]': 'state()',
                        '[attr.aria-pressed]': 'isOn()',
                        '(click)': 'toggle()',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], setState: [{
                type: Input,
                args: ['state']
            }], disableToggleClick: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], toggled: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJuLXRvZ2dsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3VpL3RvZ2dsZS9icmFpbi9zcmMvbGliL2Jybi10b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxFQUNOLGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsTUFBTSxFQUNOLE1BQU0sR0FDTixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7QUFFM0YsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0FBY2pCLE1BQU0sT0FBTyxrQkFBa0I7SUFaL0I7UUFha0IsU0FBSSxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pDLDZCQUF3QixHQUFHLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRXhGLGNBQVMsR0FBRyxNQUFNLENBQW1CLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELFdBQU0sR0FBRyxNQUFNLENBQWUsS0FBSyxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFcEUsVUFBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDakMsbUJBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzdDLFNBQUksR0FBRyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLElBQUksQ0FBQyxDQUFDO1FBR3RELE9BQUUsR0FBRyxhQUFhLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFpQi9CLHdCQUFtQixHQUFHLEtBQUssQ0FBQztRQU9wQixZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7S0F5QjNEO0lBM0NBLElBQ0ksUUFBUSxDQUFDLEtBQWM7UUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRCwyREFBMkQ7SUFDM0QsSUFDSSxRQUFRLENBQUMsS0FBbUI7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUdELElBQ0ksa0JBQWtCLENBQUMsS0FBYztRQUNwQyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsS0FBSyxDQUFDO0lBQ2xDLENBQUM7SUFLRCxNQUFNO1FBQ0wsSUFBSSxJQUFJLENBQUMsbUJBQW1CO1lBQUUsT0FBTztRQUNyQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxJQUFJLEVBQUUsQ0FBQztZQUM1QixJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDbEIsQ0FBQzthQUFNLENBQUM7WUFDUCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsQ0FBQztJQUNGLENBQUM7SUFFRCxTQUFTO1FBQ1IsSUFBSSxJQUFJLENBQUMsd0JBQXdCLElBQUksQ0FBQyxJQUFJLENBQUMsd0JBQXdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFBRSxPQUFPO1FBQ3ZHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxRQUFRO1FBQ1AsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLGFBQWE7UUFDbkIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDOzhHQTVEVyxrQkFBa0I7a0dBQWxCLGtCQUFrQiwrSUFrQlYsZ0JBQWdCLHFHQVloQixnQkFBZ0I7OzJGQTlCeEIsa0JBQWtCO2tCQVo5QixTQUFTO21CQUFDO29CQUNWLDhEQUE4RDtvQkFDOUQsUUFBUSxFQUFFLHNDQUFzQztvQkFDaEQsVUFBVSxFQUFFLElBQUk7b0JBQ2hCLElBQUksRUFBRTt3QkFDTCxpQkFBaUIsRUFBRSxrQkFBa0I7d0JBQ3JDLHNCQUFzQixFQUFFLGtCQUFrQjt3QkFDMUMsbUJBQW1CLEVBQUUsU0FBUzt3QkFDOUIscUJBQXFCLEVBQUUsUUFBUTt3QkFDL0IsU0FBUyxFQUFFLFVBQVU7cUJBQ3JCO2lCQUNEOzhCQWFPLEVBQUU7c0JBRFIsS0FBSztnQkFLQyxLQUFLO3NCQUZYLEtBQUs7Z0JBS0YsUUFBUTtzQkFEWCxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQU9sQyxRQUFRO3NCQURYLEtBQUs7dUJBQUMsT0FBTztnQkFPVixrQkFBa0I7c0JBRHJCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBTXRCLE9BQU87c0JBRHRCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuXHRDaGFuZ2VEZXRlY3RvclJlZixcblx0RGlyZWN0aXZlLFxuXHRFdmVudEVtaXR0ZXIsXG5cdElucHV0LFxuXHRPdXRwdXQsXG5cdGJvb2xlYW5BdHRyaWJ1dGUsXG5cdGNvbXB1dGVkLFxuXHRpbmplY3QsXG5cdHNpZ25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUb2dnbGVHcm91cENhbkJlTnVsbGFibGVQcm92aWRlciB9IGZyb20gJy4vdG9nZ2xlLWdyb3VwLWNhbi1iZS1udWxsYWJsZS1wcm92aWRlcic7XG5cbmxldCB1bmlxdWVJZCA9IDA7XG5cbkBEaXJlY3RpdmUoe1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvclxuXHRzZWxlY3RvcjogJ2J1dHRvbltobG1Ub2dnbGVdLCBidXR0b25bYnJuVG9nZ2xlXScsXG5cdHN0YW5kYWxvbmU6IHRydWUsXG5cdGhvc3Q6IHtcblx0XHQnW2F0dHIuZGlzYWJsZWRdJzogJ3RvZ2dsZURpc2FibGVkKCknLFxuXHRcdCdbYXR0ci5kYXRhLWRpc2FibGVkXSc6ICd0b2dnbGVEaXNhYmxlZCgpJyxcblx0XHQnW2F0dHIuZGF0YS1zdGF0ZV0nOiAnc3RhdGUoKScsXG5cdFx0J1thdHRyLmFyaWEtcHJlc3NlZF0nOiAnaXNPbigpJyxcblx0XHQnKGNsaWNrKSc6ICd0b2dnbGUoKScsXG5cdH0sXG59KVxuZXhwb3J0IGNsYXNzIEJyblRvZ2dsZURpcmVjdGl2ZSB7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2NkciA9IGluamVjdChDaGFuZ2VEZXRlY3RvclJlZik7XG5cdHByaXZhdGUgcmVhZG9ubHkgX3RnQ2FuQmVOdWxsYWJsZVByb3ZpZGVyID0gaW5qZWN0KFRvZ2dsZUdyb3VwQ2FuQmVOdWxsYWJsZVByb3ZpZGVyLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xuXG5cdHByaXZhdGUgcmVhZG9ubHkgX2Rpc2FibGVkID0gc2lnbmFsPHRydWUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZCk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX3N0YXRlID0gc2lnbmFsPCdvbicgfCAnb2ZmJz4oJ29mZicsIHsgZXF1YWw6IChhLCBiKSA9PiBhID09PSBiIH0pO1xuXG5cdHB1YmxpYyByZWFkb25seSBzdGF0ZSA9IHRoaXMuX3N0YXRlLmFzUmVhZG9ubHkoKTtcblx0cHVibGljIHJlYWRvbmx5IHRvZ2dsZURpc2FibGVkID0gdGhpcy5fZGlzYWJsZWQuYXNSZWFkb25seSgpO1xuXHRwdWJsaWMgcmVhZG9ubHkgaXNPbiA9IGNvbXB1dGVkKCgpID0+IHRoaXMuc3RhdGUoKSA9PT0gJ29uJyk7XG5cblx0QElucHV0KClcblx0cHVibGljIGlkID0gJ2Jybi10b2dnbGUtJyArIHVuaXF1ZUlkKys7XG5cblx0QElucHV0KClcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcblx0cHVibGljIHZhbHVlOiBhbnk7XG5cblx0QElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG5cdHNldCBkaXNhYmxlZCh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX2Rpc2FibGVkLnNldCh2YWx1ZSA/IHRydWUgOiB1bmRlZmluZWQpO1xuXHR9XG5cblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1pbnB1dC1yZW5hbWVcblx0QElucHV0KCdzdGF0ZScpXG5cdHNldCBzZXRTdGF0ZSh2YWx1ZTogJ29uJyB8ICdvZmYnKSB7XG5cdFx0dGhpcy5fc3RhdGUuc2V0KHZhbHVlKTtcblx0fVxuXG5cdHByaXZhdGUgX2Rpc2FibGVUb2dnbGVDbGljayA9IGZhbHNlO1xuXHRASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSlcblx0c2V0IGRpc2FibGVUb2dnbGVDbGljayh2YWx1ZTogYm9vbGVhbikge1xuXHRcdHRoaXMuX2Rpc2FibGVUb2dnbGVDbGljayA9IHZhbHVlO1xuXHR9XG5cblx0QE91dHB1dCgpXG5cdHB1YmxpYyByZWFkb25seSB0b2dnbGVkID0gbmV3IEV2ZW50RW1pdHRlcjwnb24nIHwgJ29mZic+KCk7XG5cblx0dG9nZ2xlKCkge1xuXHRcdGlmICh0aGlzLl9kaXNhYmxlVG9nZ2xlQ2xpY2spIHJldHVybjtcblx0XHRpZiAodGhpcy5fc3RhdGUoKSA9PT0gJ29uJykge1xuXHRcdFx0dGhpcy50b2dnbGVPZmYoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50b2dnbGVPbigpO1xuXHRcdH1cblx0fVxuXG5cdHRvZ2dsZU9mZigpIHtcblx0XHRpZiAodGhpcy5fdGdDYW5CZU51bGxhYmxlUHJvdmlkZXIgJiYgIXRoaXMuX3RnQ2FuQmVOdWxsYWJsZVByb3ZpZGVyLl9jYW5CZU51bGxhYmxlKHRoaXMudmFsdWUpKSByZXR1cm47XG5cdFx0dGhpcy5fc3RhdGUuc2V0KCdvZmYnKTtcblx0XHR0aGlzLnRvZ2dsZWQuZW1pdCgnb2ZmJyk7XG5cdH1cblxuXHR0b2dnbGVPbigpIHtcblx0XHR0aGlzLl9zdGF0ZS5zZXQoJ29uJyk7XG5cdFx0dGhpcy50b2dnbGVkLmVtaXQoJ29uJyk7XG5cdH1cblxuXHRwdWJsaWMgX21hcmtGb3JDaGVjaygpIHtcblx0XHR0aGlzLl9jZHIubWFya0ZvckNoZWNrKCk7XG5cdH1cbn1cbiJdfQ==