import { EventEmitter, type AfterContentInit, type OnInit, type QueryList } from '@angular/core';
import { type ControlValueAccessor } from '@angular/forms';
import { BrnToggleDirective } from './brn-toggle.directive';
import { ToggleGroupCanBeNullableProvider } from './toggle-group-can-be-nullable-provider';
import * as i0 from "@angular/core";
export declare const BRN_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: {
    provide: import("@angular/core").InjectionToken<readonly ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class BrnButtonToggleChange {
    source: BrnToggleDirective;
    value: any;
    constructor(source: BrnToggleDirective, value: any);
}
export declare class BrnToggleGroupComponent implements ControlValueAccessor, OnInit, AfterContentInit, ToggleGroupCanBeNullableProvider {
    private readonly _cdr;
    private readonly _destroyRef;
    private _vertical;
    private _multiple;
    private _nullable;
    private _skipNullableCheck;
    private _disabled;
    private _selectionModel?;
    /**
     * The method to be called in order to update ngModel.
     */
    private _controlValueAccessorChangeFn;
    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */
    private _onTouched;
    _buttonToggles?: QueryList<BrnToggleDirective>;
    private _name;
    get name(): string;
    set name(value: string);
    get vertical(): boolean;
    set vertical(value: boolean);
    /** Value of the toggle group. */
    get value(): any;
    set value(newValue: any);
    readonly valueChange: EventEmitter<any>;
    /** Selected button toggles in the group. */
    get selected(): BrnToggleDirective | BrnToggleDirective[];
    /** Whether no button toggles need to be selected. */
    get nullable(): boolean;
    set nullable(value: boolean);
    /** Whether multiple button toggles can be selected. */
    get multiple(): boolean;
    set multiple(value: boolean);
    get disabled(): boolean;
    set disabled(value: boolean);
    readonly change: EventEmitter<BrnButtonToggleChange>;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (value: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    _canBeNullable(value: any): boolean;
    /** Updates the selection state of the toggles in the group based on a value. */
    private _setSelectionByValue;
    /** Clears the selected toggles. */
    private _clearSelection;
    /** Selects a value if there's a toggle that corresponds to it. */
    private _selectValue;
    private _updateModelValue;
    /** Marks all the child button toggles to be checked. */
    private _markTogglesForCheck;
    static ɵfac: i0.ɵɵFactoryDeclaration<BrnToggleGroupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BrnToggleGroupComponent, "brn-toggle-group", ["brnToggleGroup"], { "name": { "alias": "name"; "required": false; }; "vertical": { "alias": "vertical"; "required": false; }; "value": { "alias": "value"; "required": false; }; "nullable": { "alias": "nullable"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "valueChange": "valueChange"; "change": "change"; }, ["_buttonToggles"], ["*"], true, never>;
    static ngAcceptInputType_vertical: unknown;
    static ngAcceptInputType_nullable: unknown;
    static ngAcceptInputType_multiple: unknown;
    static ngAcceptInputType_disabled: unknown;
}
