/**
 * We are building on shoulders of giants here and adapt the implementation provided by the incredible Angular
 * team: https://github.com/angular/components/blob/main/src/material/tooltip/tooltip.ts
 * Check them out! Give them a try! Leave a star! Their work is incredible!
 */
import { NgTemplateOutlet, isPlatformBrowser } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, PLATFORM_ID, Renderer2, ViewChild, ViewEncapsulation, inject, signal, } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Internal component that wraps the tooltip's content.
 * @docs-private
 */
export class BrnTooltipContentComponent {
    constructor() {
        this._cdr = inject(ChangeDetectorRef);
        this._isBrowser = isPlatformBrowser(inject(PLATFORM_ID));
        this._renderer2 = inject(Renderer2);
        this._contentHovered = signal(false);
        this._tooltipClasses = signal('');
        this.side = signal('above');
        /** Message to display in the tooltip */
        this.content = null;
        /** Amount of milliseconds to delay the closing sequence. */
        this._mouseLeaveHideDelay = 0;
        /** Amount of milliseconds of closing animation. */
        this._exitAnimationDuration = 0;
        /** Whether interactions on the page should close the tooltip */
        this._closeOnInteraction = false;
        /** Whether the tooltip is currently visible. */
        this._isVisible = false;
        /** Subject for notifying that the tooltip has been hidden from the view */
        this._onHide = new Subject();
        this.afterHidden = this._onHide.asObservable();
    }
    /**
     * Shows the tooltip with originating from the provided origin
     * @param delay Amount of milliseconds to the delay showing the tooltip.
     */
    show(delay) {
        // Cancel the delayed hide if it is scheduled
        if (this._hideTimeoutId != null) {
            clearTimeout(this._hideTimeoutId);
        }
        if (this._animateTimeoutId != null) {
            clearTimeout(this._animateTimeoutId);
        }
        this._showTimeoutId = setTimeout(() => {
            this._toggleDataAttributes(true, this.side());
            this._toggleVisibility(true);
            this._showTimeoutId = undefined;
        }, delay);
    }
    /**
     * Begins to hide the tooltip after the provided delay in ms.
     * @param delay Amount of milliseconds to delay hiding the tooltip.
     * @param exitAnimationDuration Time before hiding to finish animation
     * */
    hide(delay, exitAnimationDuration) {
        // Cancel the delayed show if it is scheduled
        if (this._showTimeoutId != null) {
            clearTimeout(this._showTimeoutId);
        }
        // start out animation at delay minus animation delay or immediately if possible
        this._animateTimeoutId = setTimeout(() => {
            this._animateTimeoutId = undefined;
            if (this._contentHovered())
                return;
            this._toggleDataAttributes(false, this.side());
        }, Math.max(delay, 0));
        this._hideTimeoutId = setTimeout(() => {
            this._hideTimeoutId = undefined;
            if (this._contentHovered())
                return;
            this._toggleVisibility(false);
        }, delay + exitAnimationDuration);
    }
    /** Whether the tooltip is being displayed. */
    isVisible() {
        return this._isVisible;
    }
    ngOnDestroy() {
        this._cancelPendingAnimations();
        this._onHide.complete();
        this._triggerElement = undefined;
    }
    _isTypeOfString(content) {
        return typeof content === 'string';
    }
    /**
     * Interactions on the HTML body should close the tooltip immediately as defined in the
     * material design spec.
     * https://material.io/design/components/tooltips.html#behavior
     */
    _handleBodyInteraction() {
        if (this._closeOnInteraction) {
            this.hide(0, 0);
        }
    }
    /**
     * Marks that the tooltip needs to be checked in the next change detection run.
     * Mainly used for rendering the initial text before positioning a tooltip, which
     * can be problematic in components with OnPush change detection.
     */
    _markForCheck() {
        this._cdr.markForCheck();
    }
    _handleMouseLeave({ relatedTarget }) {
        if (!relatedTarget || !this._triggerElement?.contains(relatedTarget)) {
            if (this.isVisible()) {
                this.hide(this._mouseLeaveHideDelay, this._exitAnimationDuration);
            }
            else {
                this._finalize(false);
            }
        }
        this._contentHovered.set(false);
    }
    /** Cancels any pending animation sequences. */
    _cancelPendingAnimations() {
        if (this._showTimeoutId != null) {
            clearTimeout(this._showTimeoutId);
        }
        if (this._hideTimeoutId != null) {
            clearTimeout(this._hideTimeoutId);
        }
        this._showTimeoutId = this._hideTimeoutId = undefined;
    }
    _finalize(toVisible) {
        if (toVisible) {
            this._closeOnInteraction = true;
        }
        else if (!this.isVisible()) {
            this._onHide.next();
        }
    }
    /** Toggles the visibility of the tooltip element. */
    _toggleVisibility(isVisible) {
        // We set the classes directly here ourselves so that toggling the tooltip state
        // isn't bound by change detection. This allows us to hide it even if the
        // view ref has been detached from the CD tree.
        const tooltip = this._tooltip?.nativeElement;
        if (!tooltip || !this._isBrowser)
            return;
        this._renderer2.setStyle(tooltip, 'visibility', isVisible ? 'visible' : 'hidden');
        this._isVisible = isVisible;
    }
    _toggleDataAttributes(isVisible, side) {
        // We set the classes directly here ourselves so that toggling the tooltip state
        // isn't bound by change detection. This allows us to hide it even if the
        // view ref has been detached from the CD tree.
        const tooltip = this._tooltip?.nativeElement;
        if (!tooltip || !this._isBrowser)
            return;
        this._renderer2.setAttribute(tooltip, 'data-side', side);
        this._renderer2.setAttribute(tooltip, 'data-state', isVisible ? 'open' : 'closed');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTooltipContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.5", type: BrnTooltipContentComponent, isStandalone: true, selector: "brn-tooltip-content", host: { attributes: { "aria-hidden": "true" }, listeners: { "mouseleave": "_handleMouseLeave($event)" }, properties: { "style.zoom": "isVisible() ? 1 : null" } }, viewQueries: [{ propertyName: "_tooltip", first: true, predicate: ["tooltip"], descendants: true, static: true }], ngImport: i0, template: `
		<div
			(mouseenter)="_contentHovered.set(true)"
			(mouseleave)="_contentHovered.set(false)"
			[class]="_tooltipClasses()"
			[style.visibility]="'hidden'"
			#tooltip
		>
			@if (_isTypeOfString(content)) {
				{{ content }}
			} @else {
				<ng-container [ngTemplateOutlet]="content" />
			}
		</div>
	`, isInline: true, dependencies: [{ kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.5", ngImport: i0, type: BrnTooltipContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'brn-tooltip-content',
                    standalone: true,
                    template: `
		<div
			(mouseenter)="_contentHovered.set(true)"
			(mouseleave)="_contentHovered.set(false)"
			[class]="_tooltipClasses()"
			[style.visibility]="'hidden'"
			#tooltip
		>
			@if (_isTypeOfString(content)) {
				{{ content }}
			} @else {
				<ng-container [ngTemplateOutlet]="content" />
			}
		</div>
	`,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        // Forces the element to have a layout in IE and Edge. This fixes issues where the element
                        // won't be rendered if the animations are disabled or there is no web animations polyfill.
                        '[style.zoom]': 'isVisible() ? 1 : null',
                        '(mouseleave)': '_handleMouseLeave($event)',
                        'aria-hidden': 'true',
                    },
                    imports: [NgTemplateOutlet],
                }]
        }], propDecorators: { _tooltip: [{
                type: ViewChild,
                args: ['tooltip', {
                        // Use a static query here since we interact directly with
                        // the DOM which can happen before `ngAfterViewInit`.
                        static: true,
                    }]
            }] } });
//# sourceMappingURL=data:application/json;base64,