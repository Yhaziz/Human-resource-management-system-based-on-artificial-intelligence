import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { EmblaCarouselType, EmblaEventType, EmblaOptionsType, EmblaPluginType } from 'embla-carousel';
import * as i0 from "@angular/core";
export declare class EmblaCarouselDirective implements AfterViewInit, OnChanges, OnDestroy {
    private globalOptions;
    private ngZone;
    protected _elementRef: ElementRef<HTMLElement>;
    options: EmblaOptionsType;
    plugins: EmblaPluginType[];
    subscribeToEvents: EmblaEventType[];
    eventsThrottleTime: number;
    readonly emblaChange: EventEmitter<EmblaEventType>;
    private destroy$;
    private storedOptions;
    private storedPlugins;
    emblaApi?: EmblaCarouselType;
    constructor();
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    scrollTo(...args: Parameters<EmblaCarouselType['scrollTo']>): void;
    scrollPrev(...args: Parameters<EmblaCarouselType['scrollPrev']>): void;
    scrollNext(...args: Parameters<EmblaCarouselType['scrollNext']>): void;
    reInit(): void;
    /**
     * `eventsThrottler$` Subject was made just because `scroll` event fires too often.
     */
    private listenEvents;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<EmblaCarouselDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<EmblaCarouselDirective, "[emblaCarousel]", ["emblaCarousel"], { "options": "options"; "plugins": "plugins"; "subscribeToEvents": "subscribeToEvents"; "eventsThrottleTime": "eventsThrottleTime"; }, { "emblaChange": "emblaChange"; }, never, never, true>;
}
